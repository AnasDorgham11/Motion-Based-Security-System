
Challenge1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006c48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  00006c48  00006cdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000439  0080017e  0080017e  00006dfa  2**0
                  ALLOC
  3 .stab         000067d4  00000000  00000000  00006dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000375e  00000000  00000000  0000d5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  00010d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000026e  00000000  00000000  00010f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002d8f  00000000  00000000  000111bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018dc  00000000  00000000  00013f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001584  00000000  00000000  00015827  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  00016dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000031f  00000000  00000000  00016fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ace  00000000  00000000  0001730b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00017dd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__vector_1>
       8:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__vector_2>
       c:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__vector_3>
      10:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <__vector_4>
      14:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__vector_5>
      18:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__vector_6>
      1c:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__vector_7>
      20:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__vector_8>
      24:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__vector_9>
      28:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__vector_10>
      2c:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 17 18 	jmp	0x302e	; 0x302e <__vector_17>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	fc e6       	ldi	r31, 0x6C	; 108
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3b       	cpi	r26, 0xB7	; 183
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9d 34 	call	0x693a	; 0x693a <main>
      8a:	0c 94 22 36 	jmp	0x6c44	; 0x6c44 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 43 05 	call	0xa86	; 0xa86 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 43 05 	call	0xa86	; 0xa86 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 eb 35 	jmp	0x6bd6	; 0x6bd6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e7       	ldi	r26, 0x76	; 118
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 07 36 	jmp	0x6c0e	; 0x6c0e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f7 35 	jmp	0x6bee	; 0x6bee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 13 36 	jmp	0x6c26	; 0x6c26 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f7 35 	jmp	0x6bee	; 0x6bee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 13 36 	jmp	0x6c26	; 0x6c26 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 eb 35 	jmp	0x6bd6	; 0x6bd6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e7       	ldi	r24, 0x76	; 118
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 07 36 	jmp	0x6c0e	; 0x6c0e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f3 35 	jmp	0x6be6	; 0x6be6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e7       	ldi	r22, 0x76	; 118
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0f 36 	jmp	0x6c1e	; 0x6c1e <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f7 35 	jmp	0x6bee	; 0x6bee <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 13 36 	jmp	0x6c26	; 0x6c26 <__epilogue_restores__+0x18>

000007ea <__nesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f7 35 	jmp	0x6bee	; 0x6bee <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__nesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__nesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__nesf2+0x58>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 13 36 	jmp	0x6c26	; 0x6c26 <__epilogue_restores__+0x18>

0000084a <__gtsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f7 35 	jmp	0x6bee	; 0x6bee <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 13 36 	jmp	0x6c26	; 0x6c26 <__epilogue_restores__+0x18>

000008aa <__gesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f7 35 	jmp	0x6bee	; 0x6bee <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__gesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__gesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__gesf2+0x58>
     900:	8f ef       	ldi	r24, 0xFF	; 255
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 13 36 	jmp	0x6c26	; 0x6c26 <__epilogue_restores__+0x18>

0000090a <__ltsf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 f7 35 	jmp	0x6bee	; 0x6bee <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__ltsf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__ltsf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__ltsf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 13 36 	jmp	0x6c26	; 0x6c26 <__epilogue_restores__+0x18>

0000096a <__lesf2>:
     96a:	a8 e1       	ldi	r26, 0x18	; 24
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 f7 35 	jmp	0x6bee	; 0x6bee <__prologue_saves__+0x18>
     976:	69 83       	std	Y+1, r22	; 0x01
     978:	7a 83       	std	Y+2, r23	; 0x02
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	9c 83       	std	Y+4, r25	; 0x04
     97e:	2d 83       	std	Y+5, r18	; 0x05
     980:	3e 83       	std	Y+6, r19	; 0x06
     982:	4f 83       	std	Y+7, r20	; 0x07
     984:	58 87       	std	Y+8, r21	; 0x08
     986:	89 e0       	ldi	r24, 0x09	; 9
     988:	e8 2e       	mov	r14, r24
     98a:	f1 2c       	mov	r15, r1
     98c:	ec 0e       	add	r14, r28
     98e:	fd 1e       	adc	r15, r29
     990:	ce 01       	movw	r24, r28
     992:	01 96       	adiw	r24, 0x01	; 1
     994:	b7 01       	movw	r22, r14
     996:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     99a:	8e 01       	movw	r16, r28
     99c:	0f 5e       	subi	r16, 0xEF	; 239
     99e:	1f 4f       	sbci	r17, 0xFF	; 255
     9a0:	ce 01       	movw	r24, r28
     9a2:	05 96       	adiw	r24, 0x05	; 5
     9a4:	b8 01       	movw	r22, r16
     9a6:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     9aa:	89 85       	ldd	r24, Y+9	; 0x09
     9ac:	82 30       	cpi	r24, 0x02	; 2
     9ae:	40 f0       	brcs	.+16     	; 0x9c0 <__lesf2+0x56>
     9b0:	89 89       	ldd	r24, Y+17	; 0x11
     9b2:	82 30       	cpi	r24, 0x02	; 2
     9b4:	28 f0       	brcs	.+10     	; 0x9c0 <__lesf2+0x56>
     9b6:	c7 01       	movw	r24, r14
     9b8:	b8 01       	movw	r22, r16
     9ba:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fpcmp_parts_f>
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <__lesf2+0x58>
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	68 96       	adiw	r28, 0x18	; 24
     9c4:	e6 e0       	ldi	r30, 0x06	; 6
     9c6:	0c 94 13 36 	jmp	0x6c26	; 0x6c26 <__epilogue_restores__+0x18>

000009ca <__floatsisf>:
     9ca:	a8 e0       	ldi	r26, 0x08	; 8
     9cc:	b0 e0       	ldi	r27, 0x00	; 0
     9ce:	eb ee       	ldi	r30, 0xEB	; 235
     9d0:	f4 e0       	ldi	r31, 0x04	; 4
     9d2:	0c 94 f4 35 	jmp	0x6be8	; 0x6be8 <__prologue_saves__+0x12>
     9d6:	9b 01       	movw	r18, r22
     9d8:	ac 01       	movw	r20, r24
     9da:	83 e0       	ldi	r24, 0x03	; 3
     9dc:	89 83       	std	Y+1, r24	; 0x01
     9de:	da 01       	movw	r26, r20
     9e0:	c9 01       	movw	r24, r18
     9e2:	88 27       	eor	r24, r24
     9e4:	b7 fd       	sbrc	r27, 7
     9e6:	83 95       	inc	r24
     9e8:	99 27       	eor	r25, r25
     9ea:	aa 27       	eor	r26, r26
     9ec:	bb 27       	eor	r27, r27
     9ee:	b8 2e       	mov	r11, r24
     9f0:	21 15       	cp	r18, r1
     9f2:	31 05       	cpc	r19, r1
     9f4:	41 05       	cpc	r20, r1
     9f6:	51 05       	cpc	r21, r1
     9f8:	19 f4       	brne	.+6      	; 0xa00 <__floatsisf+0x36>
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	89 83       	std	Y+1, r24	; 0x01
     9fe:	3a c0       	rjmp	.+116    	; 0xa74 <__floatsisf+0xaa>
     a00:	88 23       	and	r24, r24
     a02:	a9 f0       	breq	.+42     	; 0xa2e <__floatsisf+0x64>
     a04:	20 30       	cpi	r18, 0x00	; 0
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	38 07       	cpc	r19, r24
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	48 07       	cpc	r20, r24
     a0e:	80 e8       	ldi	r24, 0x80	; 128
     a10:	58 07       	cpc	r21, r24
     a12:	29 f4       	brne	.+10     	; 0xa1e <__floatsisf+0x54>
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	9f ec       	ldi	r25, 0xCF	; 207
     a1c:	30 c0       	rjmp	.+96     	; 0xa7e <__floatsisf+0xb4>
     a1e:	ee 24       	eor	r14, r14
     a20:	ff 24       	eor	r15, r15
     a22:	87 01       	movw	r16, r14
     a24:	e2 1a       	sub	r14, r18
     a26:	f3 0a       	sbc	r15, r19
     a28:	04 0b       	sbc	r16, r20
     a2a:	15 0b       	sbc	r17, r21
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <__floatsisf+0x68>
     a2e:	79 01       	movw	r14, r18
     a30:	8a 01       	movw	r16, r20
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 10 06 	call	0xc20	; 0xc20 <__clzsi2>
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	18 16       	cp	r1, r24
     a50:	19 06       	cpc	r1, r25
     a52:	84 f4       	brge	.+32     	; 0xa74 <__floatsisf+0xaa>
     a54:	08 2e       	mov	r0, r24
     a56:	04 c0       	rjmp	.+8      	; 0xa60 <__floatsisf+0x96>
     a58:	ee 0c       	add	r14, r14
     a5a:	ff 1c       	adc	r15, r15
     a5c:	00 1f       	adc	r16, r16
     a5e:	11 1f       	adc	r17, r17
     a60:	0a 94       	dec	r0
     a62:	d2 f7       	brpl	.-12     	; 0xa58 <__floatsisf+0x8e>
     a64:	ed 82       	std	Y+5, r14	; 0x05
     a66:	fe 82       	std	Y+6, r15	; 0x06
     a68:	0f 83       	std	Y+7, r16	; 0x07
     a6a:	18 87       	std	Y+8, r17	; 0x08
     a6c:	c8 1a       	sub	r12, r24
     a6e:	d9 0a       	sbc	r13, r25
     a70:	dc 82       	std	Y+4, r13	; 0x04
     a72:	cb 82       	std	Y+3, r12	; 0x03
     a74:	ba 82       	std	Y+2, r11	; 0x02
     a76:	ce 01       	movw	r24, r28
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__pack_f>
     a7e:	28 96       	adiw	r28, 0x08	; 8
     a80:	e9 e0       	ldi	r30, 0x09	; 9
     a82:	0c 94 10 36 	jmp	0x6c20	; 0x6c20 <__epilogue_restores__+0x12>

00000a86 <__fixsfsi>:
     a86:	ac e0       	ldi	r26, 0x0C	; 12
     a88:	b0 e0       	ldi	r27, 0x00	; 0
     a8a:	e9 e4       	ldi	r30, 0x49	; 73
     a8c:	f5 e0       	ldi	r31, 0x05	; 5
     a8e:	0c 94 fb 35 	jmp	0x6bf6	; 0x6bf6 <__prologue_saves__+0x20>
     a92:	69 83       	std	Y+1, r22	; 0x01
     a94:	7a 83       	std	Y+2, r23	; 0x02
     a96:	8b 83       	std	Y+3, r24	; 0x03
     a98:	9c 83       	std	Y+4, r25	; 0x04
     a9a:	ce 01       	movw	r24, r28
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	be 01       	movw	r22, r28
     aa0:	6b 5f       	subi	r22, 0xFB	; 251
     aa2:	7f 4f       	sbci	r23, 0xFF	; 255
     aa4:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     aa8:	8d 81       	ldd	r24, Y+5	; 0x05
     aaa:	82 30       	cpi	r24, 0x02	; 2
     aac:	61 f1       	breq	.+88     	; 0xb06 <__fixsfsi+0x80>
     aae:	82 30       	cpi	r24, 0x02	; 2
     ab0:	50 f1       	brcs	.+84     	; 0xb06 <__fixsfsi+0x80>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f4       	brne	.+8      	; 0xabe <__fixsfsi+0x38>
     ab6:	8e 81       	ldd	r24, Y+6	; 0x06
     ab8:	88 23       	and	r24, r24
     aba:	51 f1       	breq	.+84     	; 0xb10 <__fixsfsi+0x8a>
     abc:	2e c0       	rjmp	.+92     	; 0xb1a <__fixsfsi+0x94>
     abe:	2f 81       	ldd	r18, Y+7	; 0x07
     ac0:	38 85       	ldd	r19, Y+8	; 0x08
     ac2:	37 fd       	sbrc	r19, 7
     ac4:	20 c0       	rjmp	.+64     	; 0xb06 <__fixsfsi+0x80>
     ac6:	6e 81       	ldd	r22, Y+6	; 0x06
     ac8:	2f 31       	cpi	r18, 0x1F	; 31
     aca:	31 05       	cpc	r19, r1
     acc:	1c f0       	brlt	.+6      	; 0xad4 <__fixsfsi+0x4e>
     ace:	66 23       	and	r22, r22
     ad0:	f9 f0       	breq	.+62     	; 0xb10 <__fixsfsi+0x8a>
     ad2:	23 c0       	rjmp	.+70     	; 0xb1a <__fixsfsi+0x94>
     ad4:	8e e1       	ldi	r24, 0x1E	; 30
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	82 1b       	sub	r24, r18
     ada:	93 0b       	sbc	r25, r19
     adc:	29 85       	ldd	r18, Y+9	; 0x09
     ade:	3a 85       	ldd	r19, Y+10	; 0x0a
     ae0:	4b 85       	ldd	r20, Y+11	; 0x0b
     ae2:	5c 85       	ldd	r21, Y+12	; 0x0c
     ae4:	04 c0       	rjmp	.+8      	; 0xaee <__fixsfsi+0x68>
     ae6:	56 95       	lsr	r21
     ae8:	47 95       	ror	r20
     aea:	37 95       	ror	r19
     aec:	27 95       	ror	r18
     aee:	8a 95       	dec	r24
     af0:	d2 f7       	brpl	.-12     	; 0xae6 <__fixsfsi+0x60>
     af2:	66 23       	and	r22, r22
     af4:	b1 f0       	breq	.+44     	; 0xb22 <__fixsfsi+0x9c>
     af6:	50 95       	com	r21
     af8:	40 95       	com	r20
     afa:	30 95       	com	r19
     afc:	21 95       	neg	r18
     afe:	3f 4f       	sbci	r19, 0xFF	; 255
     b00:	4f 4f       	sbci	r20, 0xFF	; 255
     b02:	5f 4f       	sbci	r21, 0xFF	; 255
     b04:	0e c0       	rjmp	.+28     	; 0xb22 <__fixsfsi+0x9c>
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	09 c0       	rjmp	.+18     	; 0xb22 <__fixsfsi+0x9c>
     b10:	2f ef       	ldi	r18, 0xFF	; 255
     b12:	3f ef       	ldi	r19, 0xFF	; 255
     b14:	4f ef       	ldi	r20, 0xFF	; 255
     b16:	5f e7       	ldi	r21, 0x7F	; 127
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__fixsfsi+0x9c>
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	50 e8       	ldi	r21, 0x80	; 128
     b22:	b9 01       	movw	r22, r18
     b24:	ca 01       	movw	r24, r20
     b26:	2c 96       	adiw	r28, 0x0c	; 12
     b28:	e2 e0       	ldi	r30, 0x02	; 2
     b2a:	0c 94 17 36 	jmp	0x6c2e	; 0x6c2e <__epilogue_restores__+0x20>

00000b2e <__floatunsisf>:
     b2e:	a8 e0       	ldi	r26, 0x08	; 8
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	ed e9       	ldi	r30, 0x9D	; 157
     b34:	f5 e0       	ldi	r31, 0x05	; 5
     b36:	0c 94 f3 35 	jmp	0x6be6	; 0x6be6 <__prologue_saves__+0x10>
     b3a:	7b 01       	movw	r14, r22
     b3c:	8c 01       	movw	r16, r24
     b3e:	61 15       	cp	r22, r1
     b40:	71 05       	cpc	r23, r1
     b42:	81 05       	cpc	r24, r1
     b44:	91 05       	cpc	r25, r1
     b46:	19 f4       	brne	.+6      	; 0xb4e <__floatunsisf+0x20>
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	60 c0       	rjmp	.+192    	; 0xc0e <__floatunsisf+0xe0>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	8e e1       	ldi	r24, 0x1E	; 30
     b54:	c8 2e       	mov	r12, r24
     b56:	d1 2c       	mov	r13, r1
     b58:	dc 82       	std	Y+4, r13	; 0x04
     b5a:	cb 82       	std	Y+3, r12	; 0x03
     b5c:	ed 82       	std	Y+5, r14	; 0x05
     b5e:	fe 82       	std	Y+6, r15	; 0x06
     b60:	0f 83       	std	Y+7, r16	; 0x07
     b62:	18 87       	std	Y+8, r17	; 0x08
     b64:	c8 01       	movw	r24, r16
     b66:	b7 01       	movw	r22, r14
     b68:	0e 94 10 06 	call	0xc20	; 0xc20 <__clzsi2>
     b6c:	fc 01       	movw	r30, r24
     b6e:	31 97       	sbiw	r30, 0x01	; 1
     b70:	f7 ff       	sbrs	r31, 7
     b72:	3b c0       	rjmp	.+118    	; 0xbea <__floatunsisf+0xbc>
     b74:	22 27       	eor	r18, r18
     b76:	33 27       	eor	r19, r19
     b78:	2e 1b       	sub	r18, r30
     b7a:	3f 0b       	sbc	r19, r31
     b7c:	57 01       	movw	r10, r14
     b7e:	68 01       	movw	r12, r16
     b80:	02 2e       	mov	r0, r18
     b82:	04 c0       	rjmp	.+8      	; 0xb8c <__floatunsisf+0x5e>
     b84:	d6 94       	lsr	r13
     b86:	c7 94       	ror	r12
     b88:	b7 94       	ror	r11
     b8a:	a7 94       	ror	r10
     b8c:	0a 94       	dec	r0
     b8e:	d2 f7       	brpl	.-12     	; 0xb84 <__floatunsisf+0x56>
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	50 e0       	ldi	r21, 0x00	; 0
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	04 c0       	rjmp	.+8      	; 0xbaa <__floatunsisf+0x7c>
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	aa 1f       	adc	r26, r26
     ba8:	bb 1f       	adc	r27, r27
     baa:	2a 95       	dec	r18
     bac:	d2 f7       	brpl	.-12     	; 0xba2 <__floatunsisf+0x74>
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	a1 09       	sbc	r26, r1
     bb2:	b1 09       	sbc	r27, r1
     bb4:	8e 21       	and	r24, r14
     bb6:	9f 21       	and	r25, r15
     bb8:	a0 23       	and	r26, r16
     bba:	b1 23       	and	r27, r17
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	a1 05       	cpc	r26, r1
     bc0:	b1 05       	cpc	r27, r1
     bc2:	21 f0       	breq	.+8      	; 0xbcc <__floatunsisf+0x9e>
     bc4:	41 e0       	ldi	r20, 0x01	; 1
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	4a 29       	or	r20, r10
     bce:	5b 29       	or	r21, r11
     bd0:	6c 29       	or	r22, r12
     bd2:	7d 29       	or	r23, r13
     bd4:	4d 83       	std	Y+5, r20	; 0x05
     bd6:	5e 83       	std	Y+6, r21	; 0x06
     bd8:	6f 83       	std	Y+7, r22	; 0x07
     bda:	78 87       	std	Y+8, r23	; 0x08
     bdc:	8e e1       	ldi	r24, 0x1E	; 30
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	8e 1b       	sub	r24, r30
     be2:	9f 0b       	sbc	r25, r31
     be4:	9c 83       	std	Y+4, r25	; 0x04
     be6:	8b 83       	std	Y+3, r24	; 0x03
     be8:	12 c0       	rjmp	.+36     	; 0xc0e <__floatunsisf+0xe0>
     bea:	30 97       	sbiw	r30, 0x00	; 0
     bec:	81 f0       	breq	.+32     	; 0xc0e <__floatunsisf+0xe0>
     bee:	0e 2e       	mov	r0, r30
     bf0:	04 c0       	rjmp	.+8      	; 0xbfa <__floatunsisf+0xcc>
     bf2:	ee 0c       	add	r14, r14
     bf4:	ff 1c       	adc	r15, r15
     bf6:	00 1f       	adc	r16, r16
     bf8:	11 1f       	adc	r17, r17
     bfa:	0a 94       	dec	r0
     bfc:	d2 f7       	brpl	.-12     	; 0xbf2 <__floatunsisf+0xc4>
     bfe:	ed 82       	std	Y+5, r14	; 0x05
     c00:	fe 82       	std	Y+6, r15	; 0x06
     c02:	0f 83       	std	Y+7, r16	; 0x07
     c04:	18 87       	std	Y+8, r17	; 0x08
     c06:	ce 1a       	sub	r12, r30
     c08:	df 0a       	sbc	r13, r31
     c0a:	dc 82       	std	Y+4, r13	; 0x04
     c0c:	cb 82       	std	Y+3, r12	; 0x03
     c0e:	1a 82       	std	Y+2, r1	; 0x02
     c10:	ce 01       	movw	r24, r28
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__pack_f>
     c18:	28 96       	adiw	r28, 0x08	; 8
     c1a:	ea e0       	ldi	r30, 0x0A	; 10
     c1c:	0c 94 0f 36 	jmp	0x6c1e	; 0x6c1e <__epilogue_restores__+0x10>

00000c20 <__clzsi2>:
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	7b 01       	movw	r14, r22
     c2a:	8c 01       	movw	r16, r24
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	e8 16       	cp	r14, r24
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	f8 06       	cpc	r15, r24
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	08 07       	cpc	r16, r24
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	18 07       	cpc	r17, r24
     c3c:	88 f4       	brcc	.+34     	; 0xc60 <__clzsi2+0x40>
     c3e:	8f ef       	ldi	r24, 0xFF	; 255
     c40:	e8 16       	cp	r14, r24
     c42:	f1 04       	cpc	r15, r1
     c44:	01 05       	cpc	r16, r1
     c46:	11 05       	cpc	r17, r1
     c48:	31 f0       	breq	.+12     	; 0xc56 <__clzsi2+0x36>
     c4a:	28 f0       	brcs	.+10     	; 0xc56 <__clzsi2+0x36>
     c4c:	88 e0       	ldi	r24, 0x08	; 8
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	a0 e0       	ldi	r26, 0x00	; 0
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	17 c0       	rjmp	.+46     	; 0xc84 <__clzsi2+0x64>
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	a0 e0       	ldi	r26, 0x00	; 0
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	12 c0       	rjmp	.+36     	; 0xc84 <__clzsi2+0x64>
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	e8 16       	cp	r14, r24
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	f8 06       	cpc	r15, r24
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	08 07       	cpc	r16, r24
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	18 07       	cpc	r17, r24
     c70:	28 f0       	brcs	.+10     	; 0xc7c <__clzsi2+0x5c>
     c72:	88 e1       	ldi	r24, 0x18	; 24
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	a0 e0       	ldi	r26, 0x00	; 0
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__clzsi2+0x64>
     c7c:	80 e1       	ldi	r24, 0x10	; 16
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	20 e2       	ldi	r18, 0x20	; 32
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	28 1b       	sub	r18, r24
     c8e:	39 0b       	sbc	r19, r25
     c90:	4a 0b       	sbc	r20, r26
     c92:	5b 0b       	sbc	r21, r27
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <__clzsi2+0x7e>
     c96:	16 95       	lsr	r17
     c98:	07 95       	ror	r16
     c9a:	f7 94       	ror	r15
     c9c:	e7 94       	ror	r14
     c9e:	8a 95       	dec	r24
     ca0:	d2 f7       	brpl	.-12     	; 0xc96 <__clzsi2+0x76>
     ca2:	f7 01       	movw	r30, r14
     ca4:	e2 58       	subi	r30, 0x82	; 130
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	80 81       	ld	r24, Z
     caa:	28 1b       	sub	r18, r24
     cac:	31 09       	sbc	r19, r1
     cae:	41 09       	sbc	r20, r1
     cb0:	51 09       	sbc	r21, r1
     cb2:	c9 01       	movw	r24, r18
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	08 95       	ret

00000cbe <__pack_f>:
     cbe:	df 92       	push	r13
     cc0:	ef 92       	push	r14
     cc2:	ff 92       	push	r15
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	fc 01       	movw	r30, r24
     cca:	e4 80       	ldd	r14, Z+4	; 0x04
     ccc:	f5 80       	ldd	r15, Z+5	; 0x05
     cce:	06 81       	ldd	r16, Z+6	; 0x06
     cd0:	17 81       	ldd	r17, Z+7	; 0x07
     cd2:	d1 80       	ldd	r13, Z+1	; 0x01
     cd4:	80 81       	ld	r24, Z
     cd6:	82 30       	cpi	r24, 0x02	; 2
     cd8:	48 f4       	brcc	.+18     	; 0xcec <__pack_f+0x2e>
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	a0 e1       	ldi	r26, 0x10	; 16
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e8 2a       	or	r14, r24
     ce4:	f9 2a       	or	r15, r25
     ce6:	0a 2b       	or	r16, r26
     ce8:	1b 2b       	or	r17, r27
     cea:	a5 c0       	rjmp	.+330    	; 0xe36 <__pack_f+0x178>
     cec:	84 30       	cpi	r24, 0x04	; 4
     cee:	09 f4       	brne	.+2      	; 0xcf2 <__pack_f+0x34>
     cf0:	9f c0       	rjmp	.+318    	; 0xe30 <__pack_f+0x172>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	21 f4       	brne	.+8      	; 0xcfe <__pack_f+0x40>
     cf6:	ee 24       	eor	r14, r14
     cf8:	ff 24       	eor	r15, r15
     cfa:	87 01       	movw	r16, r14
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <__pack_f+0x4a>
     cfe:	e1 14       	cp	r14, r1
     d00:	f1 04       	cpc	r15, r1
     d02:	01 05       	cpc	r16, r1
     d04:	11 05       	cpc	r17, r1
     d06:	19 f4       	brne	.+6      	; 0xd0e <__pack_f+0x50>
     d08:	e0 e0       	ldi	r30, 0x00	; 0
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	96 c0       	rjmp	.+300    	; 0xe3a <__pack_f+0x17c>
     d0e:	62 81       	ldd	r22, Z+2	; 0x02
     d10:	73 81       	ldd	r23, Z+3	; 0x03
     d12:	9f ef       	ldi	r25, 0xFF	; 255
     d14:	62 38       	cpi	r22, 0x82	; 130
     d16:	79 07       	cpc	r23, r25
     d18:	0c f0       	brlt	.+2      	; 0xd1c <__pack_f+0x5e>
     d1a:	5b c0       	rjmp	.+182    	; 0xdd2 <__pack_f+0x114>
     d1c:	22 e8       	ldi	r18, 0x82	; 130
     d1e:	3f ef       	ldi	r19, 0xFF	; 255
     d20:	26 1b       	sub	r18, r22
     d22:	37 0b       	sbc	r19, r23
     d24:	2a 31       	cpi	r18, 0x1A	; 26
     d26:	31 05       	cpc	r19, r1
     d28:	2c f0       	brlt	.+10     	; 0xd34 <__pack_f+0x76>
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	2a c0       	rjmp	.+84     	; 0xd88 <__pack_f+0xca>
     d34:	b8 01       	movw	r22, r16
     d36:	a7 01       	movw	r20, r14
     d38:	02 2e       	mov	r0, r18
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <__pack_f+0x86>
     d3c:	76 95       	lsr	r23
     d3e:	67 95       	ror	r22
     d40:	57 95       	ror	r21
     d42:	47 95       	ror	r20
     d44:	0a 94       	dec	r0
     d46:	d2 f7       	brpl	.-12     	; 0xd3c <__pack_f+0x7e>
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 e0       	ldi	r26, 0x00	; 0
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	04 c0       	rjmp	.+8      	; 0xd5a <__pack_f+0x9c>
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	aa 1f       	adc	r26, r26
     d58:	bb 1f       	adc	r27, r27
     d5a:	2a 95       	dec	r18
     d5c:	d2 f7       	brpl	.-12     	; 0xd52 <__pack_f+0x94>
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	a1 09       	sbc	r26, r1
     d62:	b1 09       	sbc	r27, r1
     d64:	8e 21       	and	r24, r14
     d66:	9f 21       	and	r25, r15
     d68:	a0 23       	and	r26, r16
     d6a:	b1 23       	and	r27, r17
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	a1 05       	cpc	r26, r1
     d70:	b1 05       	cpc	r27, r1
     d72:	21 f0       	breq	.+8      	; 0xd7c <__pack_f+0xbe>
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	a0 e0       	ldi	r26, 0x00	; 0
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	9a 01       	movw	r18, r20
     d7e:	ab 01       	movw	r20, r22
     d80:	28 2b       	or	r18, r24
     d82:	39 2b       	or	r19, r25
     d84:	4a 2b       	or	r20, r26
     d86:	5b 2b       	or	r21, r27
     d88:	da 01       	movw	r26, r20
     d8a:	c9 01       	movw	r24, r18
     d8c:	8f 77       	andi	r24, 0x7F	; 127
     d8e:	90 70       	andi	r25, 0x00	; 0
     d90:	a0 70       	andi	r26, 0x00	; 0
     d92:	b0 70       	andi	r27, 0x00	; 0
     d94:	80 34       	cpi	r24, 0x40	; 64
     d96:	91 05       	cpc	r25, r1
     d98:	a1 05       	cpc	r26, r1
     d9a:	b1 05       	cpc	r27, r1
     d9c:	39 f4       	brne	.+14     	; 0xdac <__pack_f+0xee>
     d9e:	27 ff       	sbrs	r18, 7
     da0:	09 c0       	rjmp	.+18     	; 0xdb4 <__pack_f+0xf6>
     da2:	20 5c       	subi	r18, 0xC0	; 192
     da4:	3f 4f       	sbci	r19, 0xFF	; 255
     da6:	4f 4f       	sbci	r20, 0xFF	; 255
     da8:	5f 4f       	sbci	r21, 0xFF	; 255
     daa:	04 c0       	rjmp	.+8      	; 0xdb4 <__pack_f+0xf6>
     dac:	21 5c       	subi	r18, 0xC1	; 193
     dae:	3f 4f       	sbci	r19, 0xFF	; 255
     db0:	4f 4f       	sbci	r20, 0xFF	; 255
     db2:	5f 4f       	sbci	r21, 0xFF	; 255
     db4:	e0 e0       	ldi	r30, 0x00	; 0
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	20 30       	cpi	r18, 0x00	; 0
     dba:	a0 e0       	ldi	r26, 0x00	; 0
     dbc:	3a 07       	cpc	r19, r26
     dbe:	a0 e0       	ldi	r26, 0x00	; 0
     dc0:	4a 07       	cpc	r20, r26
     dc2:	a0 e4       	ldi	r26, 0x40	; 64
     dc4:	5a 07       	cpc	r21, r26
     dc6:	10 f0       	brcs	.+4      	; 0xdcc <__pack_f+0x10e>
     dc8:	e1 e0       	ldi	r30, 0x01	; 1
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	79 01       	movw	r14, r18
     dce:	8a 01       	movw	r16, r20
     dd0:	27 c0       	rjmp	.+78     	; 0xe20 <__pack_f+0x162>
     dd2:	60 38       	cpi	r22, 0x80	; 128
     dd4:	71 05       	cpc	r23, r1
     dd6:	64 f5       	brge	.+88     	; 0xe30 <__pack_f+0x172>
     dd8:	fb 01       	movw	r30, r22
     dda:	e1 58       	subi	r30, 0x81	; 129
     ddc:	ff 4f       	sbci	r31, 0xFF	; 255
     dde:	d8 01       	movw	r26, r16
     de0:	c7 01       	movw	r24, r14
     de2:	8f 77       	andi	r24, 0x7F	; 127
     de4:	90 70       	andi	r25, 0x00	; 0
     de6:	a0 70       	andi	r26, 0x00	; 0
     de8:	b0 70       	andi	r27, 0x00	; 0
     dea:	80 34       	cpi	r24, 0x40	; 64
     dec:	91 05       	cpc	r25, r1
     dee:	a1 05       	cpc	r26, r1
     df0:	b1 05       	cpc	r27, r1
     df2:	39 f4       	brne	.+14     	; 0xe02 <__pack_f+0x144>
     df4:	e7 fe       	sbrs	r14, 7
     df6:	0d c0       	rjmp	.+26     	; 0xe12 <__pack_f+0x154>
     df8:	80 e4       	ldi	r24, 0x40	; 64
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	a0 e0       	ldi	r26, 0x00	; 0
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	04 c0       	rjmp	.+8      	; 0xe0a <__pack_f+0x14c>
     e02:	8f e3       	ldi	r24, 0x3F	; 63
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	a0 e0       	ldi	r26, 0x00	; 0
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e8 0e       	add	r14, r24
     e0c:	f9 1e       	adc	r15, r25
     e0e:	0a 1f       	adc	r16, r26
     e10:	1b 1f       	adc	r17, r27
     e12:	17 ff       	sbrs	r17, 7
     e14:	05 c0       	rjmp	.+10     	; 0xe20 <__pack_f+0x162>
     e16:	16 95       	lsr	r17
     e18:	07 95       	ror	r16
     e1a:	f7 94       	ror	r15
     e1c:	e7 94       	ror	r14
     e1e:	31 96       	adiw	r30, 0x01	; 1
     e20:	87 e0       	ldi	r24, 0x07	; 7
     e22:	16 95       	lsr	r17
     e24:	07 95       	ror	r16
     e26:	f7 94       	ror	r15
     e28:	e7 94       	ror	r14
     e2a:	8a 95       	dec	r24
     e2c:	d1 f7       	brne	.-12     	; 0xe22 <__pack_f+0x164>
     e2e:	05 c0       	rjmp	.+10     	; 0xe3a <__pack_f+0x17c>
     e30:	ee 24       	eor	r14, r14
     e32:	ff 24       	eor	r15, r15
     e34:	87 01       	movw	r16, r14
     e36:	ef ef       	ldi	r30, 0xFF	; 255
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	6e 2f       	mov	r22, r30
     e3c:	67 95       	ror	r22
     e3e:	66 27       	eor	r22, r22
     e40:	67 95       	ror	r22
     e42:	90 2f       	mov	r25, r16
     e44:	9f 77       	andi	r25, 0x7F	; 127
     e46:	d7 94       	ror	r13
     e48:	dd 24       	eor	r13, r13
     e4a:	d7 94       	ror	r13
     e4c:	8e 2f       	mov	r24, r30
     e4e:	86 95       	lsr	r24
     e50:	49 2f       	mov	r20, r25
     e52:	46 2b       	or	r20, r22
     e54:	58 2f       	mov	r21, r24
     e56:	5d 29       	or	r21, r13
     e58:	b7 01       	movw	r22, r14
     e5a:	ca 01       	movw	r24, r20
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	ff 90       	pop	r15
     e62:	ef 90       	pop	r14
     e64:	df 90       	pop	r13
     e66:	08 95       	ret

00000e68 <__unpack_f>:
     e68:	fc 01       	movw	r30, r24
     e6a:	db 01       	movw	r26, r22
     e6c:	40 81       	ld	r20, Z
     e6e:	51 81       	ldd	r21, Z+1	; 0x01
     e70:	22 81       	ldd	r18, Z+2	; 0x02
     e72:	62 2f       	mov	r22, r18
     e74:	6f 77       	andi	r22, 0x7F	; 127
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	22 1f       	adc	r18, r18
     e7a:	22 27       	eor	r18, r18
     e7c:	22 1f       	adc	r18, r18
     e7e:	93 81       	ldd	r25, Z+3	; 0x03
     e80:	89 2f       	mov	r24, r25
     e82:	88 0f       	add	r24, r24
     e84:	82 2b       	or	r24, r18
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	99 1f       	adc	r25, r25
     e8c:	99 27       	eor	r25, r25
     e8e:	99 1f       	adc	r25, r25
     e90:	11 96       	adiw	r26, 0x01	; 1
     e92:	9c 93       	st	X, r25
     e94:	11 97       	sbiw	r26, 0x01	; 1
     e96:	21 15       	cp	r18, r1
     e98:	31 05       	cpc	r19, r1
     e9a:	a9 f5       	brne	.+106    	; 0xf06 <__unpack_f+0x9e>
     e9c:	41 15       	cp	r20, r1
     e9e:	51 05       	cpc	r21, r1
     ea0:	61 05       	cpc	r22, r1
     ea2:	71 05       	cpc	r23, r1
     ea4:	11 f4       	brne	.+4      	; 0xeaa <__unpack_f+0x42>
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	37 c0       	rjmp	.+110    	; 0xf18 <__unpack_f+0xb0>
     eaa:	82 e8       	ldi	r24, 0x82	; 130
     eac:	9f ef       	ldi	r25, 0xFF	; 255
     eae:	13 96       	adiw	r26, 0x03	; 3
     eb0:	9c 93       	st	X, r25
     eb2:	8e 93       	st	-X, r24
     eb4:	12 97       	sbiw	r26, 0x02	; 2
     eb6:	9a 01       	movw	r18, r20
     eb8:	ab 01       	movw	r20, r22
     eba:	67 e0       	ldi	r22, 0x07	; 7
     ebc:	22 0f       	add	r18, r18
     ebe:	33 1f       	adc	r19, r19
     ec0:	44 1f       	adc	r20, r20
     ec2:	55 1f       	adc	r21, r21
     ec4:	6a 95       	dec	r22
     ec6:	d1 f7       	brne	.-12     	; 0xebc <__unpack_f+0x54>
     ec8:	83 e0       	ldi	r24, 0x03	; 3
     eca:	8c 93       	st	X, r24
     ecc:	0d c0       	rjmp	.+26     	; 0xee8 <__unpack_f+0x80>
     ece:	22 0f       	add	r18, r18
     ed0:	33 1f       	adc	r19, r19
     ed2:	44 1f       	adc	r20, r20
     ed4:	55 1f       	adc	r21, r21
     ed6:	12 96       	adiw	r26, 0x02	; 2
     ed8:	8d 91       	ld	r24, X+
     eda:	9c 91       	ld	r25, X
     edc:	13 97       	sbiw	r26, 0x03	; 3
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	13 96       	adiw	r26, 0x03	; 3
     ee2:	9c 93       	st	X, r25
     ee4:	8e 93       	st	-X, r24
     ee6:	12 97       	sbiw	r26, 0x02	; 2
     ee8:	20 30       	cpi	r18, 0x00	; 0
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	38 07       	cpc	r19, r24
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	48 07       	cpc	r20, r24
     ef2:	80 e4       	ldi	r24, 0x40	; 64
     ef4:	58 07       	cpc	r21, r24
     ef6:	58 f3       	brcs	.-42     	; 0xece <__unpack_f+0x66>
     ef8:	14 96       	adiw	r26, 0x04	; 4
     efa:	2d 93       	st	X+, r18
     efc:	3d 93       	st	X+, r19
     efe:	4d 93       	st	X+, r20
     f00:	5c 93       	st	X, r21
     f02:	17 97       	sbiw	r26, 0x07	; 7
     f04:	08 95       	ret
     f06:	2f 3f       	cpi	r18, 0xFF	; 255
     f08:	31 05       	cpc	r19, r1
     f0a:	79 f4       	brne	.+30     	; 0xf2a <__unpack_f+0xc2>
     f0c:	41 15       	cp	r20, r1
     f0e:	51 05       	cpc	r21, r1
     f10:	61 05       	cpc	r22, r1
     f12:	71 05       	cpc	r23, r1
     f14:	19 f4       	brne	.+6      	; 0xf1c <__unpack_f+0xb4>
     f16:	84 e0       	ldi	r24, 0x04	; 4
     f18:	8c 93       	st	X, r24
     f1a:	08 95       	ret
     f1c:	64 ff       	sbrs	r22, 4
     f1e:	03 c0       	rjmp	.+6      	; 0xf26 <__unpack_f+0xbe>
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	8c 93       	st	X, r24
     f24:	12 c0       	rjmp	.+36     	; 0xf4a <__unpack_f+0xe2>
     f26:	1c 92       	st	X, r1
     f28:	10 c0       	rjmp	.+32     	; 0xf4a <__unpack_f+0xe2>
     f2a:	2f 57       	subi	r18, 0x7F	; 127
     f2c:	30 40       	sbci	r19, 0x00	; 0
     f2e:	13 96       	adiw	r26, 0x03	; 3
     f30:	3c 93       	st	X, r19
     f32:	2e 93       	st	-X, r18
     f34:	12 97       	sbiw	r26, 0x02	; 2
     f36:	83 e0       	ldi	r24, 0x03	; 3
     f38:	8c 93       	st	X, r24
     f3a:	87 e0       	ldi	r24, 0x07	; 7
     f3c:	44 0f       	add	r20, r20
     f3e:	55 1f       	adc	r21, r21
     f40:	66 1f       	adc	r22, r22
     f42:	77 1f       	adc	r23, r23
     f44:	8a 95       	dec	r24
     f46:	d1 f7       	brne	.-12     	; 0xf3c <__unpack_f+0xd4>
     f48:	70 64       	ori	r23, 0x40	; 64
     f4a:	14 96       	adiw	r26, 0x04	; 4
     f4c:	4d 93       	st	X+, r20
     f4e:	5d 93       	st	X+, r21
     f50:	6d 93       	st	X+, r22
     f52:	7c 93       	st	X, r23
     f54:	17 97       	sbiw	r26, 0x07	; 7
     f56:	08 95       	ret

00000f58 <__fpcmp_parts_f>:
     f58:	1f 93       	push	r17
     f5a:	dc 01       	movw	r26, r24
     f5c:	fb 01       	movw	r30, r22
     f5e:	9c 91       	ld	r25, X
     f60:	92 30       	cpi	r25, 0x02	; 2
     f62:	08 f4       	brcc	.+2      	; 0xf66 <__fpcmp_parts_f+0xe>
     f64:	47 c0       	rjmp	.+142    	; 0xff4 <__fpcmp_parts_f+0x9c>
     f66:	80 81       	ld	r24, Z
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	08 f4       	brcc	.+2      	; 0xf6e <__fpcmp_parts_f+0x16>
     f6c:	43 c0       	rjmp	.+134    	; 0xff4 <__fpcmp_parts_f+0x9c>
     f6e:	94 30       	cpi	r25, 0x04	; 4
     f70:	51 f4       	brne	.+20     	; 0xf86 <__fpcmp_parts_f+0x2e>
     f72:	11 96       	adiw	r26, 0x01	; 1
     f74:	1c 91       	ld	r17, X
     f76:	84 30       	cpi	r24, 0x04	; 4
     f78:	99 f5       	brne	.+102    	; 0xfe0 <__fpcmp_parts_f+0x88>
     f7a:	81 81       	ldd	r24, Z+1	; 0x01
     f7c:	68 2f       	mov	r22, r24
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	61 1b       	sub	r22, r17
     f82:	71 09       	sbc	r23, r1
     f84:	3f c0       	rjmp	.+126    	; 0x1004 <__fpcmp_parts_f+0xac>
     f86:	84 30       	cpi	r24, 0x04	; 4
     f88:	21 f0       	breq	.+8      	; 0xf92 <__fpcmp_parts_f+0x3a>
     f8a:	92 30       	cpi	r25, 0x02	; 2
     f8c:	31 f4       	brne	.+12     	; 0xf9a <__fpcmp_parts_f+0x42>
     f8e:	82 30       	cpi	r24, 0x02	; 2
     f90:	b9 f1       	breq	.+110    	; 0x1000 <__fpcmp_parts_f+0xa8>
     f92:	81 81       	ldd	r24, Z+1	; 0x01
     f94:	88 23       	and	r24, r24
     f96:	89 f1       	breq	.+98     	; 0xffa <__fpcmp_parts_f+0xa2>
     f98:	2d c0       	rjmp	.+90     	; 0xff4 <__fpcmp_parts_f+0x9c>
     f9a:	11 96       	adiw	r26, 0x01	; 1
     f9c:	1c 91       	ld	r17, X
     f9e:	11 97       	sbiw	r26, 0x01	; 1
     fa0:	82 30       	cpi	r24, 0x02	; 2
     fa2:	f1 f0       	breq	.+60     	; 0xfe0 <__fpcmp_parts_f+0x88>
     fa4:	81 81       	ldd	r24, Z+1	; 0x01
     fa6:	18 17       	cp	r17, r24
     fa8:	d9 f4       	brne	.+54     	; 0xfe0 <__fpcmp_parts_f+0x88>
     faa:	12 96       	adiw	r26, 0x02	; 2
     fac:	2d 91       	ld	r18, X+
     fae:	3c 91       	ld	r19, X
     fb0:	13 97       	sbiw	r26, 0x03	; 3
     fb2:	82 81       	ldd	r24, Z+2	; 0x02
     fb4:	93 81       	ldd	r25, Z+3	; 0x03
     fb6:	82 17       	cp	r24, r18
     fb8:	93 07       	cpc	r25, r19
     fba:	94 f0       	brlt	.+36     	; 0xfe0 <__fpcmp_parts_f+0x88>
     fbc:	28 17       	cp	r18, r24
     fbe:	39 07       	cpc	r19, r25
     fc0:	bc f0       	brlt	.+46     	; 0xff0 <__fpcmp_parts_f+0x98>
     fc2:	14 96       	adiw	r26, 0x04	; 4
     fc4:	8d 91       	ld	r24, X+
     fc6:	9d 91       	ld	r25, X+
     fc8:	0d 90       	ld	r0, X+
     fca:	bc 91       	ld	r27, X
     fcc:	a0 2d       	mov	r26, r0
     fce:	24 81       	ldd	r18, Z+4	; 0x04
     fd0:	35 81       	ldd	r19, Z+5	; 0x05
     fd2:	46 81       	ldd	r20, Z+6	; 0x06
     fd4:	57 81       	ldd	r21, Z+7	; 0x07
     fd6:	28 17       	cp	r18, r24
     fd8:	39 07       	cpc	r19, r25
     fda:	4a 07       	cpc	r20, r26
     fdc:	5b 07       	cpc	r21, r27
     fde:	18 f4       	brcc	.+6      	; 0xfe6 <__fpcmp_parts_f+0x8e>
     fe0:	11 23       	and	r17, r17
     fe2:	41 f0       	breq	.+16     	; 0xff4 <__fpcmp_parts_f+0x9c>
     fe4:	0a c0       	rjmp	.+20     	; 0xffa <__fpcmp_parts_f+0xa2>
     fe6:	82 17       	cp	r24, r18
     fe8:	93 07       	cpc	r25, r19
     fea:	a4 07       	cpc	r26, r20
     fec:	b5 07       	cpc	r27, r21
     fee:	40 f4       	brcc	.+16     	; 0x1000 <__fpcmp_parts_f+0xa8>
     ff0:	11 23       	and	r17, r17
     ff2:	19 f0       	breq	.+6      	; 0xffa <__fpcmp_parts_f+0xa2>
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	05 c0       	rjmp	.+10     	; 0x1004 <__fpcmp_parts_f+0xac>
     ffa:	6f ef       	ldi	r22, 0xFF	; 255
     ffc:	7f ef       	ldi	r23, 0xFF	; 255
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <__fpcmp_parts_f+0xac>
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	cb 01       	movw	r24, r22
    1006:	1f 91       	pop	r17
    1008:	08 95       	ret

0000100a <TIMER_Timer0_Init>:

/********************************\
*********** Functions ************
\********************************/

void TIMER_Timer0_Init(TIMER0_mode_of_operation mode, TIMER0_prescaler prescaler){
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <TIMER_Timer0_Init+0x6>
    1010:	00 d0       	rcall	.+0      	; 0x1012 <TIMER_Timer0_Init+0x8>
    1012:	00 d0       	rcall	.+0      	; 0x1014 <TIMER_Timer0_Init+0xa>
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	6a 83       	std	Y+2, r22	; 0x02
	switch (mode){
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	3e 83       	std	Y+6, r19	; 0x06
    1024:	2d 83       	std	Y+5, r18	; 0x05
    1026:	8d 81       	ldd	r24, Y+5	; 0x05
    1028:	9e 81       	ldd	r25, Y+6	; 0x06
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	91 05       	cpc	r25, r1
    102e:	21 f1       	breq	.+72     	; 0x1078 <TIMER_Timer0_Init+0x6e>
    1030:	2d 81       	ldd	r18, Y+5	; 0x05
    1032:	3e 81       	ldd	r19, Y+6	; 0x06
    1034:	22 30       	cpi	r18, 0x02	; 2
    1036:	31 05       	cpc	r19, r1
    1038:	2c f4       	brge	.+10     	; 0x1044 <TIMER_Timer0_Init+0x3a>
    103a:	8d 81       	ldd	r24, Y+5	; 0x05
    103c:	9e 81       	ldd	r25, Y+6	; 0x06
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	61 f0       	breq	.+24     	; 0x105a <TIMER_Timer0_Init+0x50>
    1042:	46 c0       	rjmp	.+140    	; 0x10d0 <TIMER_Timer0_Init+0xc6>
    1044:	2d 81       	ldd	r18, Y+5	; 0x05
    1046:	3e 81       	ldd	r19, Y+6	; 0x06
    1048:	22 30       	cpi	r18, 0x02	; 2
    104a:	31 05       	cpc	r19, r1
    104c:	21 f1       	breq	.+72     	; 0x1096 <TIMER_Timer0_Init+0x8c>
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	83 30       	cpi	r24, 0x03	; 3
    1054:	91 05       	cpc	r25, r1
    1056:	71 f1       	breq	.+92     	; 0x10b4 <TIMER_Timer0_Init+0xaa>
    1058:	3b c0       	rjmp	.+118    	; 0x10d0 <TIMER_Timer0_Init+0xc6>
	case TIMER0_NORMAL:
		CLEAR_BIT(TCCR0, WGM00);
    105a:	a3 e5       	ldi	r26, 0x53	; 83
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e3 e5       	ldi	r30, 0x53	; 83
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	8f 7b       	andi	r24, 0xBF	; 191
    1066:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, WGM01);
    1068:	a3 e5       	ldi	r26, 0x53	; 83
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e3 e5       	ldi	r30, 0x53	; 83
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	87 7f       	andi	r24, 0xF7	; 247
    1074:	8c 93       	st	X, r24
    1076:	2c c0       	rjmp	.+88     	; 0x10d0 <TIMER_Timer0_Init+0xc6>
		break;
	case TIMER0_PWM_PHASE_CORRECT:
		SET_BIT(TCCR0, WGM00);
    1078:	a3 e5       	ldi	r26, 0x53	; 83
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e3 e5       	ldi	r30, 0x53	; 83
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	80 64       	ori	r24, 0x40	; 64
    1084:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, WGM01);
    1086:	a3 e5       	ldi	r26, 0x53	; 83
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e3 e5       	ldi	r30, 0x53	; 83
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	87 7f       	andi	r24, 0xF7	; 247
    1092:	8c 93       	st	X, r24
    1094:	1d c0       	rjmp	.+58     	; 0x10d0 <TIMER_Timer0_Init+0xc6>
		break;
	case TIMER0_CTC:
		CLEAR_BIT(TCCR0, WGM00);
    1096:	a3 e5       	ldi	r26, 0x53	; 83
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e3 e5       	ldi	r30, 0x53	; 83
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	8f 7b       	andi	r24, 0xBF	; 191
    10a2:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    10a4:	a3 e5       	ldi	r26, 0x53	; 83
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e3 e5       	ldi	r30, 0x53	; 83
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	88 60       	ori	r24, 0x08	; 8
    10b0:	8c 93       	st	X, r24
    10b2:	0e c0       	rjmp	.+28     	; 0x10d0 <TIMER_Timer0_Init+0xc6>
		break;
	case TIMER0_FAST_PWM:
		SET_BIT(TCCR0, WGM00);
    10b4:	a3 e5       	ldi	r26, 0x53	; 83
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e3 e5       	ldi	r30, 0x53	; 83
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	80 64       	ori	r24, 0x40	; 64
    10c0:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    10c2:	a3 e5       	ldi	r26, 0x53	; 83
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e3 e5       	ldi	r30, 0x53	; 83
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	88 60       	ori	r24, 0x08	; 8
    10ce:	8c 93       	st	X, r24
	 * 		Prescalers definitions are arranged from 0 (Stop) to 7.
	 * 		Therefore, It is easier to just make TCCR0 &= 0b11111000 then TCCR0 =| prescaler to set the chosen prescaler.
	 * 		However, it is often better to avoid using magic numbers or depend on the location of flags, so "SET_BIT" and "CLEAR_BIT" are used below.
	 *
	 */
	switch (prescaler){
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	3c 83       	std	Y+4, r19	; 0x04
    10d8:	2b 83       	std	Y+3, r18	; 0x03
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	83 30       	cpi	r24, 0x03	; 3
    10e0:	91 05       	cpc	r25, r1
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <TIMER_Timer0_Init+0xdc>
    10e4:	70 c0       	rjmp	.+224    	; 0x11c6 <TIMER_Timer0_Init+0x1bc>
    10e6:	2b 81       	ldd	r18, Y+3	; 0x03
    10e8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ea:	24 30       	cpi	r18, 0x04	; 4
    10ec:	31 05       	cpc	r19, r1
    10ee:	84 f4       	brge	.+32     	; 0x1110 <TIMER_Timer0_Init+0x106>
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	91 05       	cpc	r25, r1
    10f8:	d1 f1       	breq	.+116    	; 0x116e <TIMER_Timer0_Init+0x164>
    10fa:	2b 81       	ldd	r18, Y+3	; 0x03
    10fc:	3c 81       	ldd	r19, Y+4	; 0x04
    10fe:	22 30       	cpi	r18, 0x02	; 2
    1100:	31 05       	cpc	r19, r1
    1102:	0c f0       	brlt	.+2      	; 0x1106 <TIMER_Timer0_Init+0xfc>
    1104:	4a c0       	rjmp	.+148    	; 0x119a <TIMER_Timer0_Init+0x190>
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	d1 f0       	breq	.+52     	; 0x1142 <TIMER_Timer0_Init+0x138>
    110e:	c8 c0       	rjmp	.+400    	; 0x12a0 <TIMER_Timer0_Init+0x296>
    1110:	2b 81       	ldd	r18, Y+3	; 0x03
    1112:	3c 81       	ldd	r19, Y+4	; 0x04
    1114:	25 30       	cpi	r18, 0x05	; 5
    1116:	31 05       	cpc	r19, r1
    1118:	09 f4       	brne	.+2      	; 0x111c <TIMER_Timer0_Init+0x112>
    111a:	81 c0       	rjmp	.+258    	; 0x121e <TIMER_Timer0_Init+0x214>
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	85 30       	cpi	r24, 0x05	; 5
    1122:	91 05       	cpc	r25, r1
    1124:	0c f4       	brge	.+2      	; 0x1128 <TIMER_Timer0_Init+0x11e>
    1126:	65 c0       	rjmp	.+202    	; 0x11f2 <TIMER_Timer0_Init+0x1e8>
    1128:	2b 81       	ldd	r18, Y+3	; 0x03
    112a:	3c 81       	ldd	r19, Y+4	; 0x04
    112c:	26 30       	cpi	r18, 0x06	; 6
    112e:	31 05       	cpc	r19, r1
    1130:	09 f4       	brne	.+2      	; 0x1134 <TIMER_Timer0_Init+0x12a>
    1132:	8b c0       	rjmp	.+278    	; 0x124a <TIMER_Timer0_Init+0x240>
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	9c 81       	ldd	r25, Y+4	; 0x04
    1138:	87 30       	cpi	r24, 0x07	; 7
    113a:	91 05       	cpc	r25, r1
    113c:	09 f4       	brne	.+2      	; 0x1140 <TIMER_Timer0_Init+0x136>
    113e:	9b c0       	rjmp	.+310    	; 0x1276 <TIMER_Timer0_Init+0x26c>
    1140:	af c0       	rjmp	.+350    	; 0x12a0 <TIMER_Timer0_Init+0x296>
	case TIMER0_STOP:
		CLEAR_BIT(TCCR0, CS00);
    1142:	a3 e5       	ldi	r26, 0x53	; 83
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e3 e5       	ldi	r30, 0x53	; 83
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	8e 7f       	andi	r24, 0xFE	; 254
    114e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, CS01);
    1150:	a3 e5       	ldi	r26, 0x53	; 83
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e3 e5       	ldi	r30, 0x53	; 83
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	8d 7f       	andi	r24, 0xFD	; 253
    115c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, CS02);
    115e:	a3 e5       	ldi	r26, 0x53	; 83
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e3 e5       	ldi	r30, 0x53	; 83
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	8b 7f       	andi	r24, 0xFB	; 251
    116a:	8c 93       	st	X, r24
    116c:	99 c0       	rjmp	.+306    	; 0x12a0 <TIMER_Timer0_Init+0x296>
		break;
	case TIMER0_NO_PRESCALER:
		SET_BIT(TCCR0, CS00);
    116e:	a3 e5       	ldi	r26, 0x53	; 83
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e3 e5       	ldi	r30, 0x53	; 83
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	81 60       	ori	r24, 0x01	; 1
    117a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, CS01);
    117c:	a3 e5       	ldi	r26, 0x53	; 83
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e3 e5       	ldi	r30, 0x53	; 83
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	8d 7f       	andi	r24, 0xFD	; 253
    1188:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, CS02);
    118a:	a3 e5       	ldi	r26, 0x53	; 83
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e3 e5       	ldi	r30, 0x53	; 83
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	8b 7f       	andi	r24, 0xFB	; 251
    1196:	8c 93       	st	X, r24
    1198:	83 c0       	rjmp	.+262    	; 0x12a0 <TIMER_Timer0_Init+0x296>
		break;
	case TIMER0_PRESCALER_8:
		CLEAR_BIT(TCCR0, CS00);
    119a:	a3 e5       	ldi	r26, 0x53	; 83
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e3 e5       	ldi	r30, 0x53	; 83
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	8e 7f       	andi	r24, 0xFE	; 254
    11a6:	8c 93       	st	X, r24
		SET_BIT(TCCR0, CS01);
    11a8:	a3 e5       	ldi	r26, 0x53	; 83
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e3 e5       	ldi	r30, 0x53	; 83
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	82 60       	ori	r24, 0x02	; 2
    11b4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, CS02);
    11b6:	a3 e5       	ldi	r26, 0x53	; 83
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e3 e5       	ldi	r30, 0x53	; 83
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	8b 7f       	andi	r24, 0xFB	; 251
    11c2:	8c 93       	st	X, r24
    11c4:	6d c0       	rjmp	.+218    	; 0x12a0 <TIMER_Timer0_Init+0x296>
		break;
	case TIMER0_PRESCALER_64:
		SET_BIT(TCCR0, CS00);
    11c6:	a3 e5       	ldi	r26, 0x53	; 83
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e3 e5       	ldi	r30, 0x53	; 83
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	81 60       	ori	r24, 0x01	; 1
    11d2:	8c 93       	st	X, r24
		SET_BIT(TCCR0, CS01);
    11d4:	a3 e5       	ldi	r26, 0x53	; 83
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e3 e5       	ldi	r30, 0x53	; 83
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	82 60       	ori	r24, 0x02	; 2
    11e0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, CS02);
    11e2:	a3 e5       	ldi	r26, 0x53	; 83
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e3 e5       	ldi	r30, 0x53	; 83
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	8b 7f       	andi	r24, 0xFB	; 251
    11ee:	8c 93       	st	X, r24
    11f0:	57 c0       	rjmp	.+174    	; 0x12a0 <TIMER_Timer0_Init+0x296>
		break;
	case TIMER0_PRESCALER_256:
		CLEAR_BIT(TCCR0, CS00);
    11f2:	a3 e5       	ldi	r26, 0x53	; 83
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e3 e5       	ldi	r30, 0x53	; 83
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8e 7f       	andi	r24, 0xFE	; 254
    11fe:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, CS01);
    1200:	a3 e5       	ldi	r26, 0x53	; 83
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e3 e5       	ldi	r30, 0x53	; 83
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	8d 7f       	andi	r24, 0xFD	; 253
    120c:	8c 93       	st	X, r24
		SET_BIT(TCCR0, CS02);
    120e:	a3 e5       	ldi	r26, 0x53	; 83
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e3 e5       	ldi	r30, 0x53	; 83
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	84 60       	ori	r24, 0x04	; 4
    121a:	8c 93       	st	X, r24
    121c:	41 c0       	rjmp	.+130    	; 0x12a0 <TIMER_Timer0_Init+0x296>
		break;
	case TIMER0_PRESCALER_1024:
		SET_BIT(TCCR0, CS00);
    121e:	a3 e5       	ldi	r26, 0x53	; 83
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e3 e5       	ldi	r30, 0x53	; 83
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	81 60       	ori	r24, 0x01	; 1
    122a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, CS01);
    122c:	a3 e5       	ldi	r26, 0x53	; 83
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e3 e5       	ldi	r30, 0x53	; 83
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8d 7f       	andi	r24, 0xFD	; 253
    1238:	8c 93       	st	X, r24
		SET_BIT(TCCR0, CS02);
    123a:	a3 e5       	ldi	r26, 0x53	; 83
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e3 e5       	ldi	r30, 0x53	; 83
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	84 60       	ori	r24, 0x04	; 4
    1246:	8c 93       	st	X, r24
    1248:	2b c0       	rjmp	.+86     	; 0x12a0 <TIMER_Timer0_Init+0x296>
		break;
	case TIMER0_FALLING_EDGE:
		CLEAR_BIT(TCCR0, CS00);
    124a:	a3 e5       	ldi	r26, 0x53	; 83
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e3 e5       	ldi	r30, 0x53	; 83
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	8e 7f       	andi	r24, 0xFE	; 254
    1256:	8c 93       	st	X, r24
		SET_BIT(TCCR0, CS01);
    1258:	a3 e5       	ldi	r26, 0x53	; 83
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e3 e5       	ldi	r30, 0x53	; 83
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	82 60       	ori	r24, 0x02	; 2
    1264:	8c 93       	st	X, r24
		SET_BIT(TCCR0, CS02);
    1266:	a3 e5       	ldi	r26, 0x53	; 83
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e3 e5       	ldi	r30, 0x53	; 83
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	84 60       	ori	r24, 0x04	; 4
    1272:	8c 93       	st	X, r24
    1274:	15 c0       	rjmp	.+42     	; 0x12a0 <TIMER_Timer0_Init+0x296>
		break;
	case TIMER0_RISING_EDGE:
		SET_BIT(TCCR0, CS00);
    1276:	a3 e5       	ldi	r26, 0x53	; 83
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e3 e5       	ldi	r30, 0x53	; 83
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	81 60       	ori	r24, 0x01	; 1
    1282:	8c 93       	st	X, r24
		SET_BIT(TCCR0, CS01);
    1284:	a3 e5       	ldi	r26, 0x53	; 83
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e3 e5       	ldi	r30, 0x53	; 83
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	82 60       	ori	r24, 0x02	; 2
    1290:	8c 93       	st	X, r24
		SET_BIT(TCCR0, CS02);
    1292:	a3 e5       	ldi	r26, 0x53	; 83
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e3 e5       	ldi	r30, 0x53	; 83
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	84 60       	ori	r24, 0x04	; 4
    129e:	8c 93       	st	X, r24
		break;
	}
//	TIMER_TIFR_ClearFlag(TOV0);
//	TIMER_TIFR_ClearFlag(OCF0);
	TCNT0 = 0;
    12a0:	e2 e5       	ldi	r30, 0x52	; 82
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	10 82       	st	Z, r1
}
    12a6:	26 96       	adiw	r28, 0x06	; 6
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <TIMER_Timer0_TCNT0_Set>:

void TIMER_Timer0_TCNT0_Set(u8_t value){
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	0f 92       	push	r0
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = value;
    12c4:	e2 e5       	ldi	r30, 0x52	; 82
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	80 83       	st	Z, r24
}
    12cc:	0f 90       	pop	r0
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <TIMER_Timer0_OCR0_Set>:

void TIMER_Timer0_OCR0_Set(u8_t value){
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	0f 92       	push	r0
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = value;
    12e0:	ec e5       	ldi	r30, 0x5C	; 92
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	80 83       	st	Z, r24
}
    12e8:	0f 90       	pop	r0
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <TIMER_Timer0_OC0_Init>:

void TIMER_Timer0_OC0_Init(TIMER0_OC0_mode mode){
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <TIMER_Timer0_OC0_Init+0x6>
    12f6:	0f 92       	push	r0
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinDirection(OC0_PORT, OC0, PIN_OUTPUT);
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	63 e0       	ldi	r22, 0x03	; 3
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
	switch (mode){
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	3b 83       	std	Y+3, r19	; 0x03
    1310:	2a 83       	std	Y+2, r18	; 0x02
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	9b 81       	ldd	r25, Y+3	; 0x03
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	91 05       	cpc	r25, r1
    131a:	21 f1       	breq	.+72     	; 0x1364 <TIMER_Timer0_OC0_Init+0x74>
    131c:	2a 81       	ldd	r18, Y+2	; 0x02
    131e:	3b 81       	ldd	r19, Y+3	; 0x03
    1320:	22 30       	cpi	r18, 0x02	; 2
    1322:	31 05       	cpc	r19, r1
    1324:	2c f4       	brge	.+10     	; 0x1330 <TIMER_Timer0_OC0_Init+0x40>
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	9b 81       	ldd	r25, Y+3	; 0x03
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	61 f0       	breq	.+24     	; 0x1346 <TIMER_Timer0_OC0_Init+0x56>
    132e:	46 c0       	rjmp	.+140    	; 0x13bc <TIMER_Timer0_OC0_Init+0xcc>
    1330:	2a 81       	ldd	r18, Y+2	; 0x02
    1332:	3b 81       	ldd	r19, Y+3	; 0x03
    1334:	22 30       	cpi	r18, 0x02	; 2
    1336:	31 05       	cpc	r19, r1
    1338:	21 f1       	breq	.+72     	; 0x1382 <TIMER_Timer0_OC0_Init+0x92>
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	9b 81       	ldd	r25, Y+3	; 0x03
    133e:	83 30       	cpi	r24, 0x03	; 3
    1340:	91 05       	cpc	r25, r1
    1342:	71 f1       	breq	.+92     	; 0x13a0 <TIMER_Timer0_OC0_Init+0xb0>
    1344:	3b c0       	rjmp	.+118    	; 0x13bc <TIMER_Timer0_OC0_Init+0xcc>
	case OC0_DISCONNECT:
		CLEAR_BIT(TCCR0, COM00);
    1346:	a3 e5       	ldi	r26, 0x53	; 83
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e3 e5       	ldi	r30, 0x53	; 83
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	8f 7e       	andi	r24, 0xEF	; 239
    1352:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, COM01);
    1354:	a3 e5       	ldi	r26, 0x53	; 83
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e3 e5       	ldi	r30, 0x53	; 83
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	8f 7d       	andi	r24, 0xDF	; 223
    1360:	8c 93       	st	X, r24
    1362:	2c c0       	rjmp	.+88     	; 0x13bc <TIMER_Timer0_OC0_Init+0xcc>
		break;
	case OC0_TOGGLE:
		SET_BIT(TCCR0, COM00);
    1364:	a3 e5       	ldi	r26, 0x53	; 83
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e3 e5       	ldi	r30, 0x53	; 83
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	80 61       	ori	r24, 0x10	; 16
    1370:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, COM01);
    1372:	a3 e5       	ldi	r26, 0x53	; 83
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e3 e5       	ldi	r30, 0x53	; 83
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	8f 7d       	andi	r24, 0xDF	; 223
    137e:	8c 93       	st	X, r24
    1380:	1d c0       	rjmp	.+58     	; 0x13bc <TIMER_Timer0_OC0_Init+0xcc>
		break;
	case OC0_NON_INVERTING:
		CLEAR_BIT(TCCR0, COM00);
    1382:	a3 e5       	ldi	r26, 0x53	; 83
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e3 e5       	ldi	r30, 0x53	; 83
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	8f 7e       	andi	r24, 0xEF	; 239
    138e:	8c 93       	st	X, r24
		SET_BIT(TCCR0, COM01);
    1390:	a3 e5       	ldi	r26, 0x53	; 83
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e3 e5       	ldi	r30, 0x53	; 83
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	80 62       	ori	r24, 0x20	; 32
    139c:	8c 93       	st	X, r24
    139e:	0e c0       	rjmp	.+28     	; 0x13bc <TIMER_Timer0_OC0_Init+0xcc>
		break;
	case OC0_INVERTING:
		SET_BIT(TCCR0, COM00);
    13a0:	a3 e5       	ldi	r26, 0x53	; 83
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e3 e5       	ldi	r30, 0x53	; 83
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	80 61       	ori	r24, 0x10	; 16
    13ac:	8c 93       	st	X, r24
		SET_BIT(TCCR0, COM01);
    13ae:	a3 e5       	ldi	r26, 0x53	; 83
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e3 e5       	ldi	r30, 0x53	; 83
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	80 62       	ori	r24, 0x20	; 32
    13ba:	8c 93       	st	X, r24
		break;
	}
}
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <TIMER_Timer0_OV_EnableInterrupt>:

void TIMER_Timer0_OV_EnableInterrupt(void){
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TOIE0);
    13d0:	a9 e5       	ldi	r26, 0x59	; 89
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e9 e5       	ldi	r30, 0x59	; 89
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	81 60       	ori	r24, 0x01	; 1
    13dc:	8c 93       	st	X, r24
}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <TIMER_Timer0_OV_DisableInterrupt>:

void TIMER_Timer0_OV_DisableInterrupt(void){
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, TOIE0);
    13ec:	a9 e5       	ldi	r26, 0x59	; 89
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e9 e5       	ldi	r30, 0x59	; 89
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8e 7f       	andi	r24, 0xFE	; 254
    13f8:	8c 93       	st	X, r24
}
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <TIMER_Timer0_OC_EnableInterrupt>:

void TIMER_Timer0_OC_EnableInterrupt(void){
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE0);
    1408:	a9 e5       	ldi	r26, 0x59	; 89
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e9 e5       	ldi	r30, 0x59	; 89
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	82 60       	ori	r24, 0x02	; 2
    1414:	8c 93       	st	X, r24
}
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <TIMER_Timer0_OC_DisableInterrupt>:

void TIMER_Timer0_OC_DisableInterrupt(void){
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, OCIE0);
    1424:	a9 e5       	ldi	r26, 0x59	; 89
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e9 e5       	ldi	r30, 0x59	; 89
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	8d 7f       	andi	r24, 0xFD	; 253
    1430:	8c 93       	st	X, r24
}
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <TIMER_Timer0_OV_SetCallBack>:

void TIMER_Timer0_OV_SetCallBack(void (*local_function_pointer) (void)){
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	00 d0       	rcall	.+0      	; 0x143e <TIMER_Timer0_OV_SetCallBack+0x6>
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	9a 83       	std	Y+2, r25	; 0x02
    1444:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_function_pointer = local_function_pointer;
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	9a 81       	ldd	r25, Y+2	; 0x02
    144a:	90 93 7f 01 	sts	0x017F, r25
    144e:	80 93 7e 01 	sts	0x017E, r24
}
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <TIMER_Timer0_OC_SetCallBack>:
void TIMER_Timer0_OC_SetCallBack(void (*local_function_pointer) (void)){
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	00 d0       	rcall	.+0      	; 0x1462 <TIMER_Timer0_OC_SetCallBack+0x6>
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	9a 83       	std	Y+2, r25	; 0x02
    1468:	89 83       	std	Y+1, r24	; 0x01
	Timer0_COMP_function_pointer = local_function_pointer;
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	9a 81       	ldd	r25, Y+2	; 0x02
    146e:	90 93 81 01 	sts	0x0181, r25
    1472:	80 93 80 01 	sts	0x0180, r24
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <TIMER_Timer0_OV_Polling_Wait>:

void TIMER_Timer0_OV_Polling_Wait(void){
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
	TIMER_TIFR_ClearFlag(TOV0);			// Clear TOV0 initially.
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	0e 94 0a 14 	call	0x2814	; 0x2814 <TIMER_TIFR_ClearFlag>
	while(!GET_BIT(TIFR, TOV0));		// While TOV0 flag is 0 (Overflow hasn't been reached yet), stay here.
    148e:	e8 e5       	ldi	r30, 0x58	; 88
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	81 70       	andi	r24, 0x01	; 1
    149a:	90 70       	andi	r25, 0x00	; 0
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	b9 f3       	breq	.-18     	; 0x148e <TIMER_Timer0_OV_Polling_Wait+0xe>
}
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <TIMER_Timer0_OC_Polling_Wait>:

void TIMER_Timer0_OC_Polling_Wait(void){
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
	TIMER_TIFR_ClearFlag(OCF0);			// Clear OCF0 initially.
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	0e 94 0a 14 	call	0x2814	; 0x2814 <TIMER_TIFR_ClearFlag>
	while(!GET_BIT(TIFR, OCF0));		// While OCF0 flag is 0 (TCNT0 has not matched OCR0 yet), stay here.
    14b4:	e8 e5       	ldi	r30, 0x58	; 88
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	86 95       	lsr	r24
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	81 70       	andi	r24, 0x01	; 1
    14c2:	90 70       	andi	r25, 0x00	; 0
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	b1 f3       	breq	.-20     	; 0x14b4 <TIMER_Timer0_OC_Polling_Wait+0xe>
}
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <TIMER_Timer0_Stop>:

void TIMER_Timer0_Stop(void){
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR0, CS00);
    14d6:	a3 e5       	ldi	r26, 0x53	; 83
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e3 e5       	ldi	r30, 0x53	; 83
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	8e 7f       	andi	r24, 0xFE	; 254
    14e2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, CS01);
    14e4:	a3 e5       	ldi	r26, 0x53	; 83
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e3 e5       	ldi	r30, 0x53	; 83
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8d 7f       	andi	r24, 0xFD	; 253
    14f0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, CS02);
    14f2:	a3 e5       	ldi	r26, 0x53	; 83
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e3 e5       	ldi	r30, 0x53	; 83
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	8b 7f       	andi	r24, 0xFB	; 251
    14fe:	8c 93       	st	X, r24
}
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <__vector_10>:
 * __vector_11(void) -> Timer 0 Overflow Interrupt.
 *
 */

void __vector_10(void) __attribute__ ((signal, used, externally_visible));
void __vector_10 (void){
    1506:	1f 92       	push	r1
    1508:	0f 92       	push	r0
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	0f 92       	push	r0
    150e:	11 24       	eor	r1, r1
    1510:	2f 93       	push	r18
    1512:	3f 93       	push	r19
    1514:	4f 93       	push	r20
    1516:	5f 93       	push	r21
    1518:	6f 93       	push	r22
    151a:	7f 93       	push	r23
    151c:	8f 93       	push	r24
    151e:	9f 93       	push	r25
    1520:	af 93       	push	r26
    1522:	bf 93       	push	r27
    1524:	ef 93       	push	r30
    1526:	ff 93       	push	r31
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_COMP_function_pointer){	// Check if the function pointer is not NULL
    1530:	80 91 80 01 	lds	r24, 0x0180
    1534:	90 91 81 01 	lds	r25, 0x0181
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	29 f0       	breq	.+10     	; 0x1546 <__vector_10+0x40>
		Timer0_COMP_function_pointer();	// Execute the function
    153c:	e0 91 80 01 	lds	r30, 0x0180
    1540:	f0 91 81 01 	lds	r31, 0x0181
    1544:	09 95       	icall
	}
}
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	ff 91       	pop	r31
    154c:	ef 91       	pop	r30
    154e:	bf 91       	pop	r27
    1550:	af 91       	pop	r26
    1552:	9f 91       	pop	r25
    1554:	8f 91       	pop	r24
    1556:	7f 91       	pop	r23
    1558:	6f 91       	pop	r22
    155a:	5f 91       	pop	r21
    155c:	4f 91       	pop	r20
    155e:	3f 91       	pop	r19
    1560:	2f 91       	pop	r18
    1562:	0f 90       	pop	r0
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	0f 90       	pop	r0
    1568:	1f 90       	pop	r1
    156a:	18 95       	reti

0000156c <__vector_11>:

void __vector_11(void) __attribute__ ((signal, used, externally_visible));
void __vector_11 (void){
    156c:	1f 92       	push	r1
    156e:	0f 92       	push	r0
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	0f 92       	push	r0
    1574:	11 24       	eor	r1, r1
    1576:	2f 93       	push	r18
    1578:	3f 93       	push	r19
    157a:	4f 93       	push	r20
    157c:	5f 93       	push	r21
    157e:	6f 93       	push	r22
    1580:	7f 93       	push	r23
    1582:	8f 93       	push	r24
    1584:	9f 93       	push	r25
    1586:	af 93       	push	r26
    1588:	bf 93       	push	r27
    158a:	ef 93       	push	r30
    158c:	ff 93       	push	r31
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_OVF_function_pointer){	// Check if the function pointer is not NULL
    1596:	80 91 7e 01 	lds	r24, 0x017E
    159a:	90 91 7f 01 	lds	r25, 0x017F
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	29 f0       	breq	.+10     	; 0x15ac <__vector_11+0x40>
		Timer0_OVF_function_pointer();	// Execute the function
    15a2:	e0 91 7e 01 	lds	r30, 0x017E
    15a6:	f0 91 7f 01 	lds	r31, 0x017F
    15aa:	09 95       	icall
	}
}
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	ff 91       	pop	r31
    15b2:	ef 91       	pop	r30
    15b4:	bf 91       	pop	r27
    15b6:	af 91       	pop	r26
    15b8:	9f 91       	pop	r25
    15ba:	8f 91       	pop	r24
    15bc:	7f 91       	pop	r23
    15be:	6f 91       	pop	r22
    15c0:	5f 91       	pop	r21
    15c2:	4f 91       	pop	r20
    15c4:	3f 91       	pop	r19
    15c6:	2f 91       	pop	r18
    15c8:	0f 90       	pop	r0
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	0f 90       	pop	r0
    15ce:	1f 90       	pop	r1
    15d0:	18 95       	reti

000015d2 <TIMER_Timer1_Init>:

/********************************\
*********** Functions ************
\********************************/

void TIMER_Timer1_Init(TIMER1_mode_of_operation mode, TIMER1_prescaler  prescaler){
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <TIMER_Timer1_Init+0x6>
    15d8:	00 d0       	rcall	.+0      	; 0x15da <TIMER_Timer1_Init+0x8>
    15da:	00 d0       	rcall	.+0      	; 0x15dc <TIMER_Timer1_Init+0xa>
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	6a 83       	std	Y+2, r22	; 0x02
	switch (mode){
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	3e 83       	std	Y+6, r19	; 0x06
    15ec:	2d 83       	std	Y+5, r18	; 0x05
    15ee:	8d 81       	ldd	r24, Y+5	; 0x05
    15f0:	9e 81       	ldd	r25, Y+6	; 0x06
    15f2:	87 30       	cpi	r24, 0x07	; 7
    15f4:	91 05       	cpc	r25, r1
    15f6:	09 f4       	brne	.+2      	; 0x15fa <TIMER_Timer1_Init+0x28>
    15f8:	24 c1       	rjmp	.+584    	; 0x1842 <TIMER_Timer1_Init+0x270>
    15fa:	2d 81       	ldd	r18, Y+5	; 0x05
    15fc:	3e 81       	ldd	r19, Y+6	; 0x06
    15fe:	28 30       	cpi	r18, 0x08	; 8
    1600:	31 05       	cpc	r19, r1
    1602:	4c f5       	brge	.+82     	; 0x1656 <TIMER_Timer1_Init+0x84>
    1604:	8d 81       	ldd	r24, Y+5	; 0x05
    1606:	9e 81       	ldd	r25, Y+6	; 0x06
    1608:	83 30       	cpi	r24, 0x03	; 3
    160a:	91 05       	cpc	r25, r1
    160c:	09 f4       	brne	.+2      	; 0x1610 <TIMER_Timer1_Init+0x3e>
    160e:	a5 c0       	rjmp	.+330    	; 0x175a <TIMER_Timer1_Init+0x188>
    1610:	2d 81       	ldd	r18, Y+5	; 0x05
    1612:	3e 81       	ldd	r19, Y+6	; 0x06
    1614:	24 30       	cpi	r18, 0x04	; 4
    1616:	31 05       	cpc	r19, r1
    1618:	8c f4       	brge	.+34     	; 0x163c <TIMER_Timer1_Init+0x6a>
    161a:	8d 81       	ldd	r24, Y+5	; 0x05
    161c:	9e 81       	ldd	r25, Y+6	; 0x06
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	91 05       	cpc	r25, r1
    1622:	09 f4       	brne	.+2      	; 0x1626 <TIMER_Timer1_Init+0x54>
    1624:	60 c0       	rjmp	.+192    	; 0x16e6 <TIMER_Timer1_Init+0x114>
    1626:	2d 81       	ldd	r18, Y+5	; 0x05
    1628:	3e 81       	ldd	r19, Y+6	; 0x06
    162a:	22 30       	cpi	r18, 0x02	; 2
    162c:	31 05       	cpc	r19, r1
    162e:	0c f0       	brlt	.+2      	; 0x1632 <TIMER_Timer1_Init+0x60>
    1630:	77 c0       	rjmp	.+238    	; 0x1720 <TIMER_Timer1_Init+0x14e>
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	c9 f1       	breq	.+114    	; 0x16ac <TIMER_Timer1_Init+0xda>
    163a:	ea c1       	rjmp	.+980    	; 0x1a10 <TIMER_Timer1_Init+0x43e>
    163c:	2d 81       	ldd	r18, Y+5	; 0x05
    163e:	3e 81       	ldd	r19, Y+6	; 0x06
    1640:	25 30       	cpi	r18, 0x05	; 5
    1642:	31 05       	cpc	r19, r1
    1644:	09 f4       	brne	.+2      	; 0x1648 <TIMER_Timer1_Init+0x76>
    1646:	c3 c0       	rjmp	.+390    	; 0x17ce <TIMER_Timer1_Init+0x1fc>
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	9e 81       	ldd	r25, Y+6	; 0x06
    164c:	86 30       	cpi	r24, 0x06	; 6
    164e:	91 05       	cpc	r25, r1
    1650:	0c f0       	brlt	.+2      	; 0x1654 <TIMER_Timer1_Init+0x82>
    1652:	da c0       	rjmp	.+436    	; 0x1808 <TIMER_Timer1_Init+0x236>
    1654:	9f c0       	rjmp	.+318    	; 0x1794 <TIMER_Timer1_Init+0x1c2>
    1656:	2d 81       	ldd	r18, Y+5	; 0x05
    1658:	3e 81       	ldd	r19, Y+6	; 0x06
    165a:	2b 30       	cpi	r18, 0x0B	; 11
    165c:	31 05       	cpc	r19, r1
    165e:	09 f4       	brne	.+2      	; 0x1662 <TIMER_Timer1_Init+0x90>
    1660:	64 c1       	rjmp	.+712    	; 0x192a <TIMER_Timer1_Init+0x358>
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	8c 30       	cpi	r24, 0x0C	; 12
    1668:	91 05       	cpc	r25, r1
    166a:	6c f4       	brge	.+26     	; 0x1686 <TIMER_Timer1_Init+0xb4>
    166c:	2d 81       	ldd	r18, Y+5	; 0x05
    166e:	3e 81       	ldd	r19, Y+6	; 0x06
    1670:	29 30       	cpi	r18, 0x09	; 9
    1672:	31 05       	cpc	r19, r1
    1674:	09 f4       	brne	.+2      	; 0x1678 <TIMER_Timer1_Init+0xa6>
    1676:	1f c1       	rjmp	.+574    	; 0x18b6 <TIMER_Timer1_Init+0x2e4>
    1678:	8d 81       	ldd	r24, Y+5	; 0x05
    167a:	9e 81       	ldd	r25, Y+6	; 0x06
    167c:	8a 30       	cpi	r24, 0x0A	; 10
    167e:	91 05       	cpc	r25, r1
    1680:	0c f0       	brlt	.+2      	; 0x1684 <TIMER_Timer1_Init+0xb2>
    1682:	36 c1       	rjmp	.+620    	; 0x18f0 <TIMER_Timer1_Init+0x31e>
    1684:	fb c0       	rjmp	.+502    	; 0x187c <TIMER_Timer1_Init+0x2aa>
    1686:	2d 81       	ldd	r18, Y+5	; 0x05
    1688:	3e 81       	ldd	r19, Y+6	; 0x06
    168a:	2d 30       	cpi	r18, 0x0D	; 13
    168c:	31 05       	cpc	r19, r1
    168e:	09 f4       	brne	.+2      	; 0x1692 <TIMER_Timer1_Init+0xc0>
    1690:	86 c1       	rjmp	.+780    	; 0x199e <TIMER_Timer1_Init+0x3cc>
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	9e 81       	ldd	r25, Y+6	; 0x06
    1696:	8d 30       	cpi	r24, 0x0D	; 13
    1698:	91 05       	cpc	r25, r1
    169a:	0c f4       	brge	.+2      	; 0x169e <TIMER_Timer1_Init+0xcc>
    169c:	63 c1       	rjmp	.+710    	; 0x1964 <TIMER_Timer1_Init+0x392>
    169e:	2d 81       	ldd	r18, Y+5	; 0x05
    16a0:	3e 81       	ldd	r19, Y+6	; 0x06
    16a2:	2e 30       	cpi	r18, 0x0E	; 14
    16a4:	31 05       	cpc	r19, r1
    16a6:	09 f4       	brne	.+2      	; 0x16aa <TIMER_Timer1_Init+0xd8>
    16a8:	97 c1       	rjmp	.+814    	; 0x19d8 <TIMER_Timer1_Init+0x406>
    16aa:	b2 c1       	rjmp	.+868    	; 0x1a10 <TIMER_Timer1_Init+0x43e>
	case TIMER1_NORMAL:
		CLEAR_BIT(TCCR1A, WGM10);
    16ac:	af e4       	ldi	r26, 0x4F	; 79
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	ef e4       	ldi	r30, 0x4F	; 79
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	8e 7f       	andi	r24, 0xFE	; 254
    16b8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A, WGM11);
    16ba:	af e4       	ldi	r26, 0x4F	; 79
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	ef e4       	ldi	r30, 0x4F	; 79
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	8d 7f       	andi	r24, 0xFD	; 253
    16c6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM12);
    16c8:	ae e4       	ldi	r26, 0x4E	; 78
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	ee e4       	ldi	r30, 0x4E	; 78
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	87 7f       	andi	r24, 0xF7	; 247
    16d4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM13);
    16d6:	ae e4       	ldi	r26, 0x4E	; 78
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	ee e4       	ldi	r30, 0x4E	; 78
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8f 7e       	andi	r24, 0xEF	; 239
    16e2:	8c 93       	st	X, r24
    16e4:	95 c1       	rjmp	.+810    	; 0x1a10 <TIMER_Timer1_Init+0x43e>
		break;
	case TIMER1_PWM_PHASE_CORRECT_8_BIT:
		SET_BIT(TCCR1A, WGM10);
    16e6:	af e4       	ldi	r26, 0x4F	; 79
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	ef e4       	ldi	r30, 0x4F	; 79
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	81 60       	ori	r24, 0x01	; 1
    16f2:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A, WGM11);
    16f4:	af e4       	ldi	r26, 0x4F	; 79
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	ef e4       	ldi	r30, 0x4F	; 79
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	8d 7f       	andi	r24, 0xFD	; 253
    1700:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM12);
    1702:	ae e4       	ldi	r26, 0x4E	; 78
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	ee e4       	ldi	r30, 0x4E	; 78
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	87 7f       	andi	r24, 0xF7	; 247
    170e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM13);
    1710:	ae e4       	ldi	r26, 0x4E	; 78
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	ee e4       	ldi	r30, 0x4E	; 78
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	8f 7e       	andi	r24, 0xEF	; 239
    171c:	8c 93       	st	X, r24
    171e:	78 c1       	rjmp	.+752    	; 0x1a10 <TIMER_Timer1_Init+0x43e>
		break;
	case TIMER1_PWM_PHASE_CORRECT_9_BIT:
		CLEAR_BIT(TCCR1A, WGM10);
    1720:	af e4       	ldi	r26, 0x4F	; 79
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	ef e4       	ldi	r30, 0x4F	; 79
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	8e 7f       	andi	r24, 0xFE	; 254
    172c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    172e:	af e4       	ldi	r26, 0x4F	; 79
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	ef e4       	ldi	r30, 0x4F	; 79
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	82 60       	ori	r24, 0x02	; 2
    173a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM12);
    173c:	ae e4       	ldi	r26, 0x4E	; 78
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	ee e4       	ldi	r30, 0x4E	; 78
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	87 7f       	andi	r24, 0xF7	; 247
    1748:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM13);
    174a:	ae e4       	ldi	r26, 0x4E	; 78
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	ee e4       	ldi	r30, 0x4E	; 78
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	8f 7e       	andi	r24, 0xEF	; 239
    1756:	8c 93       	st	X, r24
    1758:	5b c1       	rjmp	.+694    	; 0x1a10 <TIMER_Timer1_Init+0x43e>
		break;
	case TIMER1_PWM_PHASE_CORRECT_10_BIT:
		SET_BIT(TCCR1A, WGM10);
    175a:	af e4       	ldi	r26, 0x4F	; 79
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	ef e4       	ldi	r30, 0x4F	; 79
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	81 60       	ori	r24, 0x01	; 1
    1766:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    1768:	af e4       	ldi	r26, 0x4F	; 79
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	ef e4       	ldi	r30, 0x4F	; 79
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	82 60       	ori	r24, 0x02	; 2
    1774:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM12);
    1776:	ae e4       	ldi	r26, 0x4E	; 78
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	ee e4       	ldi	r30, 0x4E	; 78
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	87 7f       	andi	r24, 0xF7	; 247
    1782:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM13);
    1784:	ae e4       	ldi	r26, 0x4E	; 78
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	ee e4       	ldi	r30, 0x4E	; 78
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	8f 7e       	andi	r24, 0xEF	; 239
    1790:	8c 93       	st	X, r24
    1792:	3e c1       	rjmp	.+636    	; 0x1a10 <TIMER_Timer1_Init+0x43e>
		break;
	case TIMER1_CTC_OCR1:
		CLEAR_BIT(TCCR1A, WGM10);
    1794:	af e4       	ldi	r26, 0x4F	; 79
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	ef e4       	ldi	r30, 0x4F	; 79
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	8e 7f       	andi	r24, 0xFE	; 254
    17a0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A, WGM11);
    17a2:	af e4       	ldi	r26, 0x4F	; 79
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	ef e4       	ldi	r30, 0x4F	; 79
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	8d 7f       	andi	r24, 0xFD	; 253
    17ae:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    17b0:	ae e4       	ldi	r26, 0x4E	; 78
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	ee e4       	ldi	r30, 0x4E	; 78
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	88 60       	ori	r24, 0x08	; 8
    17bc:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM13);
    17be:	ae e4       	ldi	r26, 0x4E	; 78
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	ee e4       	ldi	r30, 0x4E	; 78
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	8f 7e       	andi	r24, 0xEF	; 239
    17ca:	8c 93       	st	X, r24
    17cc:	21 c1       	rjmp	.+578    	; 0x1a10 <TIMER_Timer1_Init+0x43e>
		break;
	case TIMER1_FAST_PWM_8_BIT:
		SET_BIT(TCCR1A, WGM10);
    17ce:	af e4       	ldi	r26, 0x4F	; 79
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	ef e4       	ldi	r30, 0x4F	; 79
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	81 60       	ori	r24, 0x01	; 1
    17da:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A, WGM11);
    17dc:	af e4       	ldi	r26, 0x4F	; 79
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	ef e4       	ldi	r30, 0x4F	; 79
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	8d 7f       	andi	r24, 0xFD	; 253
    17e8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    17ea:	ae e4       	ldi	r26, 0x4E	; 78
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	ee e4       	ldi	r30, 0x4E	; 78
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	88 60       	ori	r24, 0x08	; 8
    17f6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM13);
    17f8:	ae e4       	ldi	r26, 0x4E	; 78
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	ee e4       	ldi	r30, 0x4E	; 78
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	8f 7e       	andi	r24, 0xEF	; 239
    1804:	8c 93       	st	X, r24
    1806:	04 c1       	rjmp	.+520    	; 0x1a10 <TIMER_Timer1_Init+0x43e>
		break;
	case TIMER1_FAST_PWM_9_BIT:
		CLEAR_BIT(TCCR1A, WGM10);
    1808:	af e4       	ldi	r26, 0x4F	; 79
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	ef e4       	ldi	r30, 0x4F	; 79
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	8e 7f       	andi	r24, 0xFE	; 254
    1814:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    1816:	af e4       	ldi	r26, 0x4F	; 79
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	ef e4       	ldi	r30, 0x4F	; 79
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	82 60       	ori	r24, 0x02	; 2
    1822:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    1824:	ae e4       	ldi	r26, 0x4E	; 78
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	ee e4       	ldi	r30, 0x4E	; 78
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	88 60       	ori	r24, 0x08	; 8
    1830:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM13);
    1832:	ae e4       	ldi	r26, 0x4E	; 78
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ee e4       	ldi	r30, 0x4E	; 78
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8f 7e       	andi	r24, 0xEF	; 239
    183e:	8c 93       	st	X, r24
    1840:	e7 c0       	rjmp	.+462    	; 0x1a10 <TIMER_Timer1_Init+0x43e>
		break;
	case TIMER1_FAST_PWM_10_BIT:
		SET_BIT(TCCR1A, WGM10);
    1842:	af e4       	ldi	r26, 0x4F	; 79
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	ef e4       	ldi	r30, 0x4F	; 79
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	81 60       	ori	r24, 0x01	; 1
    184e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    1850:	af e4       	ldi	r26, 0x4F	; 79
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	ef e4       	ldi	r30, 0x4F	; 79
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	82 60       	ori	r24, 0x02	; 2
    185c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    185e:	ae e4       	ldi	r26, 0x4E	; 78
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	ee e4       	ldi	r30, 0x4E	; 78
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	88 60       	ori	r24, 0x08	; 8
    186a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM13);
    186c:	ae e4       	ldi	r26, 0x4E	; 78
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	ee e4       	ldi	r30, 0x4E	; 78
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	8f 7e       	andi	r24, 0xEF	; 239
    1878:	8c 93       	st	X, r24
    187a:	ca c0       	rjmp	.+404    	; 0x1a10 <TIMER_Timer1_Init+0x43e>
		break;
	case TIMER1_PWM_PHASE_AND_FREQUENCY_CORRECT_ICR1:
		CLEAR_BIT(TCCR1A, WGM10);
    187c:	af e4       	ldi	r26, 0x4F	; 79
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	ef e4       	ldi	r30, 0x4F	; 79
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	8e 7f       	andi	r24, 0xFE	; 254
    1888:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A, WGM11);
    188a:	af e4       	ldi	r26, 0x4F	; 79
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	ef e4       	ldi	r30, 0x4F	; 79
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	8d 7f       	andi	r24, 0xFD	; 253
    1896:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM12);
    1898:	ae e4       	ldi	r26, 0x4E	; 78
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	ee e4       	ldi	r30, 0x4E	; 78
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	87 7f       	andi	r24, 0xF7	; 247
    18a4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM13);
    18a6:	ae e4       	ldi	r26, 0x4E	; 78
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	ee e4       	ldi	r30, 0x4E	; 78
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	80 61       	ori	r24, 0x10	; 16
    18b2:	8c 93       	st	X, r24
    18b4:	ad c0       	rjmp	.+346    	; 0x1a10 <TIMER_Timer1_Init+0x43e>
		break;
	case TIMER1_PWM_PHASE_AND_FREQUENCY_CORRECT_OCR1:
		SET_BIT(TCCR1A, WGM10);
    18b6:	af e4       	ldi	r26, 0x4F	; 79
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	ef e4       	ldi	r30, 0x4F	; 79
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	81 60       	ori	r24, 0x01	; 1
    18c2:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A, WGM11);
    18c4:	af e4       	ldi	r26, 0x4F	; 79
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	ef e4       	ldi	r30, 0x4F	; 79
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	8d 7f       	andi	r24, 0xFD	; 253
    18d0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM12);
    18d2:	ae e4       	ldi	r26, 0x4E	; 78
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	ee e4       	ldi	r30, 0x4E	; 78
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	87 7f       	andi	r24, 0xF7	; 247
    18de:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM13);
    18e0:	ae e4       	ldi	r26, 0x4E	; 78
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	ee e4       	ldi	r30, 0x4E	; 78
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	80 61       	ori	r24, 0x10	; 16
    18ec:	8c 93       	st	X, r24
    18ee:	90 c0       	rjmp	.+288    	; 0x1a10 <TIMER_Timer1_Init+0x43e>
		break;
	case TIMER1_PWM_PHASE_CORRECT_ICR1:
		CLEAR_BIT(TCCR1A, WGM10);
    18f0:	af e4       	ldi	r26, 0x4F	; 79
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	ef e4       	ldi	r30, 0x4F	; 79
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	8e 7f       	andi	r24, 0xFE	; 254
    18fc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    18fe:	af e4       	ldi	r26, 0x4F	; 79
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	ef e4       	ldi	r30, 0x4F	; 79
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	82 60       	ori	r24, 0x02	; 2
    190a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM12);
    190c:	ae e4       	ldi	r26, 0x4E	; 78
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ee e4       	ldi	r30, 0x4E	; 78
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	87 7f       	andi	r24, 0xF7	; 247
    1918:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM13);
    191a:	ae e4       	ldi	r26, 0x4E	; 78
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	ee e4       	ldi	r30, 0x4E	; 78
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	80 61       	ori	r24, 0x10	; 16
    1926:	8c 93       	st	X, r24
    1928:	73 c0       	rjmp	.+230    	; 0x1a10 <TIMER_Timer1_Init+0x43e>
		break;
	case TIMER1_PWM_PHASE_CORRECT_OCR1:
		SET_BIT(TCCR1A, WGM10);
    192a:	af e4       	ldi	r26, 0x4F	; 79
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	ef e4       	ldi	r30, 0x4F	; 79
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	81 60       	ori	r24, 0x01	; 1
    1936:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    1938:	af e4       	ldi	r26, 0x4F	; 79
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	ef e4       	ldi	r30, 0x4F	; 79
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	82 60       	ori	r24, 0x02	; 2
    1944:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM12);
    1946:	ae e4       	ldi	r26, 0x4E	; 78
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	ee e4       	ldi	r30, 0x4E	; 78
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	87 7f       	andi	r24, 0xF7	; 247
    1952:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM13);
    1954:	ae e4       	ldi	r26, 0x4E	; 78
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	ee e4       	ldi	r30, 0x4E	; 78
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	80 61       	ori	r24, 0x10	; 16
    1960:	8c 93       	st	X, r24
    1962:	56 c0       	rjmp	.+172    	; 0x1a10 <TIMER_Timer1_Init+0x43e>
		break;
	case TIMER1_CTC_ICR1:
		CLEAR_BIT(TCCR1A, WGM10);
    1964:	af e4       	ldi	r26, 0x4F	; 79
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	ef e4       	ldi	r30, 0x4F	; 79
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	8e 7f       	andi	r24, 0xFE	; 254
    1970:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A, WGM11);
    1972:	af e4       	ldi	r26, 0x4F	; 79
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	ef e4       	ldi	r30, 0x4F	; 79
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	8d 7f       	andi	r24, 0xFD	; 253
    197e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    1980:	ae e4       	ldi	r26, 0x4E	; 78
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	ee e4       	ldi	r30, 0x4E	; 78
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	88 60       	ori	r24, 0x08	; 8
    198c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM13);
    198e:	ae e4       	ldi	r26, 0x4E	; 78
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	ee e4       	ldi	r30, 0x4E	; 78
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	80 61       	ori	r24, 0x10	; 16
    199a:	8c 93       	st	X, r24
    199c:	39 c0       	rjmp	.+114    	; 0x1a10 <TIMER_Timer1_Init+0x43e>
		break;
	case TIMER1_FAST_PWM_ICR1:
		CLEAR_BIT(TCCR1A, WGM10);
    199e:	af e4       	ldi	r26, 0x4F	; 79
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	ef e4       	ldi	r30, 0x4F	; 79
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	8e 7f       	andi	r24, 0xFE	; 254
    19aa:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    19ac:	af e4       	ldi	r26, 0x4F	; 79
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	ef e4       	ldi	r30, 0x4F	; 79
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	82 60       	ori	r24, 0x02	; 2
    19b8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    19ba:	ae e4       	ldi	r26, 0x4E	; 78
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	ee e4       	ldi	r30, 0x4E	; 78
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	88 60       	ori	r24, 0x08	; 8
    19c6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM13);
    19c8:	ae e4       	ldi	r26, 0x4E	; 78
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	ee e4       	ldi	r30, 0x4E	; 78
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	80 61       	ori	r24, 0x10	; 16
    19d4:	8c 93       	st	X, r24
    19d6:	1c c0       	rjmp	.+56     	; 0x1a10 <TIMER_Timer1_Init+0x43e>
		break;
	case TIMER1_FAST_PWM_OCR1:
		SET_BIT(TCCR1A, WGM10);
    19d8:	af e4       	ldi	r26, 0x4F	; 79
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	ef e4       	ldi	r30, 0x4F	; 79
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	81 60       	ori	r24, 0x01	; 1
    19e4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    19e6:	af e4       	ldi	r26, 0x4F	; 79
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	ef e4       	ldi	r30, 0x4F	; 79
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	82 60       	ori	r24, 0x02	; 2
    19f2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    19f4:	ae e4       	ldi	r26, 0x4E	; 78
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	ee e4       	ldi	r30, 0x4E	; 78
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	88 60       	ori	r24, 0x08	; 8
    1a00:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM13);
    1a02:	ae e4       	ldi	r26, 0x4E	; 78
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	ee e4       	ldi	r30, 0x4E	; 78
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	80 61       	ori	r24, 0x10	; 16
    1a0e:	8c 93       	st	X, r24
	 * 		Prescalers definitions are arranged from 0 (Stop) to 7.
	 * 		Therefore, It is easier to just make TCCR0 &= 0b11111000 then TCCR0 =| prescaler to set the chosen prescaler.
	 * 		However, it is often better to avoid using magic numbers or depend on the location of flags, so "SET_BIT" and "CLEAR_BIT" are used below.
	 *
	 */
	switch (prescaler){
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	3c 83       	std	Y+4, r19	; 0x04
    1a18:	2b 83       	std	Y+3, r18	; 0x03
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	83 30       	cpi	r24, 0x03	; 3
    1a20:	91 05       	cpc	r25, r1
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <TIMER_Timer1_Init+0x454>
    1a24:	70 c0       	rjmp	.+224    	; 0x1b06 <TIMER_Timer1_Init+0x534>
    1a26:	2b 81       	ldd	r18, Y+3	; 0x03
    1a28:	3c 81       	ldd	r19, Y+4	; 0x04
    1a2a:	24 30       	cpi	r18, 0x04	; 4
    1a2c:	31 05       	cpc	r19, r1
    1a2e:	84 f4       	brge	.+32     	; 0x1a50 <TIMER_Timer1_Init+0x47e>
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	9c 81       	ldd	r25, Y+4	; 0x04
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	91 05       	cpc	r25, r1
    1a38:	d1 f1       	breq	.+116    	; 0x1aae <TIMER_Timer1_Init+0x4dc>
    1a3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a3e:	22 30       	cpi	r18, 0x02	; 2
    1a40:	31 05       	cpc	r19, r1
    1a42:	0c f0       	brlt	.+2      	; 0x1a46 <TIMER_Timer1_Init+0x474>
    1a44:	4a c0       	rjmp	.+148    	; 0x1ada <TIMER_Timer1_Init+0x508>
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	d1 f0       	breq	.+52     	; 0x1a82 <TIMER_Timer1_Init+0x4b0>
    1a4e:	c8 c0       	rjmp	.+400    	; 0x1be0 <TIMER_Timer1_Init+0x60e>
    1a50:	2b 81       	ldd	r18, Y+3	; 0x03
    1a52:	3c 81       	ldd	r19, Y+4	; 0x04
    1a54:	25 30       	cpi	r18, 0x05	; 5
    1a56:	31 05       	cpc	r19, r1
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <TIMER_Timer1_Init+0x48a>
    1a5a:	81 c0       	rjmp	.+258    	; 0x1b5e <TIMER_Timer1_Init+0x58c>
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	85 30       	cpi	r24, 0x05	; 5
    1a62:	91 05       	cpc	r25, r1
    1a64:	0c f4       	brge	.+2      	; 0x1a68 <TIMER_Timer1_Init+0x496>
    1a66:	65 c0       	rjmp	.+202    	; 0x1b32 <TIMER_Timer1_Init+0x560>
    1a68:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6c:	26 30       	cpi	r18, 0x06	; 6
    1a6e:	31 05       	cpc	r19, r1
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <TIMER_Timer1_Init+0x4a2>
    1a72:	8b c0       	rjmp	.+278    	; 0x1b8a <TIMER_Timer1_Init+0x5b8>
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	87 30       	cpi	r24, 0x07	; 7
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <TIMER_Timer1_Init+0x4ae>
    1a7e:	9b c0       	rjmp	.+310    	; 0x1bb6 <TIMER_Timer1_Init+0x5e4>
    1a80:	af c0       	rjmp	.+350    	; 0x1be0 <TIMER_Timer1_Init+0x60e>
	case TIMER1_STOP:
		CLEAR_BIT(TCCR1B, CS10);
    1a82:	ae e4       	ldi	r26, 0x4E	; 78
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	ee e4       	ldi	r30, 0x4E	; 78
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	8e 7f       	andi	r24, 0xFE	; 254
    1a8e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, CS11);
    1a90:	ae e4       	ldi	r26, 0x4E	; 78
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	ee e4       	ldi	r30, 0x4E	; 78
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	8d 7f       	andi	r24, 0xFD	; 253
    1a9c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, CS12);
    1a9e:	ae e4       	ldi	r26, 0x4E	; 78
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	ee e4       	ldi	r30, 0x4E	; 78
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	8b 7f       	andi	r24, 0xFB	; 251
    1aaa:	8c 93       	st	X, r24
    1aac:	99 c0       	rjmp	.+306    	; 0x1be0 <TIMER_Timer1_Init+0x60e>
		break;
	case TIMER1_NO_PRESCALER:
		SET_BIT(TCCR1B, CS10);
    1aae:	ae e4       	ldi	r26, 0x4E	; 78
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	ee e4       	ldi	r30, 0x4E	; 78
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	81 60       	ori	r24, 0x01	; 1
    1aba:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, CS11);
    1abc:	ae e4       	ldi	r26, 0x4E	; 78
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	ee e4       	ldi	r30, 0x4E	; 78
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	8d 7f       	andi	r24, 0xFD	; 253
    1ac8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, CS12);
    1aca:	ae e4       	ldi	r26, 0x4E	; 78
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	ee e4       	ldi	r30, 0x4E	; 78
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8b 7f       	andi	r24, 0xFB	; 251
    1ad6:	8c 93       	st	X, r24
    1ad8:	83 c0       	rjmp	.+262    	; 0x1be0 <TIMER_Timer1_Init+0x60e>
		break;
	case TIMER1_PRESCALER_8:
		CLEAR_BIT(TCCR1B, CS10);
    1ada:	ae e4       	ldi	r26, 0x4E	; 78
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	ee e4       	ldi	r30, 0x4E	; 78
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	8e 7f       	andi	r24, 0xFE	; 254
    1ae6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, CS11);
    1ae8:	ae e4       	ldi	r26, 0x4E	; 78
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	ee e4       	ldi	r30, 0x4E	; 78
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	82 60       	ori	r24, 0x02	; 2
    1af4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, CS12);
    1af6:	ae e4       	ldi	r26, 0x4E	; 78
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	ee e4       	ldi	r30, 0x4E	; 78
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	8b 7f       	andi	r24, 0xFB	; 251
    1b02:	8c 93       	st	X, r24
    1b04:	6d c0       	rjmp	.+218    	; 0x1be0 <TIMER_Timer1_Init+0x60e>
		break;
	case TIMER1_PRESCALER_64:
		SET_BIT(TCCR1B, CS10);
    1b06:	ae e4       	ldi	r26, 0x4E	; 78
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	ee e4       	ldi	r30, 0x4E	; 78
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	81 60       	ori	r24, 0x01	; 1
    1b12:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, CS11);
    1b14:	ae e4       	ldi	r26, 0x4E	; 78
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	ee e4       	ldi	r30, 0x4E	; 78
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	82 60       	ori	r24, 0x02	; 2
    1b20:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, CS12);
    1b22:	ae e4       	ldi	r26, 0x4E	; 78
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	ee e4       	ldi	r30, 0x4E	; 78
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	8b 7f       	andi	r24, 0xFB	; 251
    1b2e:	8c 93       	st	X, r24
    1b30:	57 c0       	rjmp	.+174    	; 0x1be0 <TIMER_Timer1_Init+0x60e>
		break;
	case TIMER1_PRESCALER_256:
		CLEAR_BIT(TCCR1B, CS10);
    1b32:	ae e4       	ldi	r26, 0x4E	; 78
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	ee e4       	ldi	r30, 0x4E	; 78
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	8e 7f       	andi	r24, 0xFE	; 254
    1b3e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, CS11);
    1b40:	ae e4       	ldi	r26, 0x4E	; 78
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	ee e4       	ldi	r30, 0x4E	; 78
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	8d 7f       	andi	r24, 0xFD	; 253
    1b4c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, CS12);
    1b4e:	ae e4       	ldi	r26, 0x4E	; 78
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	ee e4       	ldi	r30, 0x4E	; 78
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	84 60       	ori	r24, 0x04	; 4
    1b5a:	8c 93       	st	X, r24
    1b5c:	41 c0       	rjmp	.+130    	; 0x1be0 <TIMER_Timer1_Init+0x60e>
		break;
	case TIMER1_PRESCALER_1024:
		SET_BIT(TCCR1B, CS10);
    1b5e:	ae e4       	ldi	r26, 0x4E	; 78
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	ee e4       	ldi	r30, 0x4E	; 78
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	81 60       	ori	r24, 0x01	; 1
    1b6a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, CS11);
    1b6c:	ae e4       	ldi	r26, 0x4E	; 78
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	ee e4       	ldi	r30, 0x4E	; 78
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	8d 7f       	andi	r24, 0xFD	; 253
    1b78:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, CS12);
    1b7a:	ae e4       	ldi	r26, 0x4E	; 78
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	ee e4       	ldi	r30, 0x4E	; 78
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	84 60       	ori	r24, 0x04	; 4
    1b86:	8c 93       	st	X, r24
    1b88:	2b c0       	rjmp	.+86     	; 0x1be0 <TIMER_Timer1_Init+0x60e>
		break;
	case TIMER1_FALLING_EDGE:
		CLEAR_BIT(TCCR1B, CS10);
    1b8a:	ae e4       	ldi	r26, 0x4E	; 78
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	ee e4       	ldi	r30, 0x4E	; 78
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	8e 7f       	andi	r24, 0xFE	; 254
    1b96:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, CS11);
    1b98:	ae e4       	ldi	r26, 0x4E	; 78
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	ee e4       	ldi	r30, 0x4E	; 78
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	82 60       	ori	r24, 0x02	; 2
    1ba4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, CS12);
    1ba6:	ae e4       	ldi	r26, 0x4E	; 78
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	ee e4       	ldi	r30, 0x4E	; 78
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	84 60       	ori	r24, 0x04	; 4
    1bb2:	8c 93       	st	X, r24
    1bb4:	15 c0       	rjmp	.+42     	; 0x1be0 <TIMER_Timer1_Init+0x60e>
		break;
	case TIMER1_RISING_EDGE:
		SET_BIT(TCCR1B, CS10);
    1bb6:	ae e4       	ldi	r26, 0x4E	; 78
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	ee e4       	ldi	r30, 0x4E	; 78
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	81 60       	ori	r24, 0x01	; 1
    1bc2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, CS11);
    1bc4:	ae e4       	ldi	r26, 0x4E	; 78
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	ee e4       	ldi	r30, 0x4E	; 78
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	82 60       	ori	r24, 0x02	; 2
    1bd0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, CS12);
    1bd2:	ae e4       	ldi	r26, 0x4E	; 78
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	ee e4       	ldi	r30, 0x4E	; 78
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	84 60       	ori	r24, 0x04	; 4
    1bde:	8c 93       	st	X, r24
		break;
	}
	TIMER_Timer1_TCNT1_Set(0);
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <TIMER_Timer1_TCNT1_Set>
}
    1be8:	26 96       	adiw	r28, 0x06	; 6
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	cd bf       	out	0x3d, r28	; 61
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <TIMER_Timer1_TCNT1_Set>:

void TIMER_Timer1_TCNT1_Set(u16_t value){
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <TIMER_Timer1_TCNT1_Set+0x6>
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
	// Setting TCNT1L as the least significant 8 bits of the 16 bits value by ANDing the value with only the right 8 bits high and assigning the result to TCNTL.
	TCNT1L = value & 0x00ff;
    1c08:	ec e4       	ldi	r30, 0x4C	; 76
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	80 83       	st	Z, r24
	// Setting TCNT1H as the most significant 8 bits of the 16 bits value by shifting it 8 bits to the right and assigning the result to TCNTH.
	TCNT1H = value >> 8;
    1c10:	ed e4       	ldi	r30, 0x4D	; 77
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	9a 81       	ldd	r25, Y+2	; 0x02
    1c18:	89 2f       	mov	r24, r25
    1c1a:	99 27       	eor	r25, r25
    1c1c:	80 83       	st	Z, r24
}
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <TIMER_Timer1_OCR1A_Set>:

void TIMER_Timer1_OCR1A_Set(u16_t value){
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <TIMER_Timer1_OCR1A_Set+0x6>
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	9a 83       	std	Y+2, r25	; 0x02
    1c34:	89 83       	std	Y+1, r24	; 0x01
	// Setting OCR1AL as the least significant 8 bits of the 16 bits value by ANDing the value with only the right 8 bits high and assigning the result to OCR1AL.
	OCR1AL = value & 0x00ff;
    1c36:	ea e4       	ldi	r30, 0x4A	; 74
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	80 83       	st	Z, r24
	// Setting OCR1AH as the most significant 8 bits of the 16 bits value by shifting it 8 bits to the right and assigning the result to OCR1AH.
	OCR1AH = value >> 8;
    1c3e:	eb e4       	ldi	r30, 0x4B	; 75
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	9a 81       	ldd	r25, Y+2	; 0x02
    1c46:	89 2f       	mov	r24, r25
    1c48:	99 27       	eor	r25, r25
    1c4a:	80 83       	st	Z, r24
}
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <TIMER_Timer1_OCR1B_Set>:
void TIMER_Timer1_OCR1B_Set(u16_t value){
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <TIMER_Timer1_OCR1B_Set+0x6>
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	9a 83       	std	Y+2, r25	; 0x02
    1c62:	89 83       	std	Y+1, r24	; 0x01
	// Setting OCR1BL as the least significant 8 bits of the 16 bits value by ANDing the value with only the right 8 bits high and assigning the result to OCR1BL.
	OCR1BL = value & 0x00ff;
    1c64:	e8 e4       	ldi	r30, 0x48	; 72
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	80 83       	st	Z, r24
	// Setting OCR1BH as the most significant 8 bits of the 16 bits value by shifting it 8 bits to the right and assigning the result to OCR1BH.
	OCR1BH = value >> 8;
    1c6c:	e9 e4       	ldi	r30, 0x49	; 73
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	9a 81       	ldd	r25, Y+2	; 0x02
    1c74:	89 2f       	mov	r24, r25
    1c76:	99 27       	eor	r25, r25
    1c78:	80 83       	st	Z, r24
}
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <TIMER_Timer1_ICR1_Set>:

void TIMER_Timer1_ICR1_Set(u16_t value){
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <TIMER_Timer1_ICR1_Set+0x6>
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	9a 83       	std	Y+2, r25	; 0x02
    1c90:	89 83       	std	Y+1, r24	; 0x01
	// Setting ICR1L as the least significant 8 bits of the 16 bits value by ANDing the value with only the right 8 bits high and assigning the result to ICR1L.
	ICR1L = value & 0x00ff;
    1c92:	e6 e4       	ldi	r30, 0x46	; 70
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	80 83       	st	Z, r24
	// Setting ICR1H as the most significant 8 bits of the 16 bits value by shifting it 8 bits to the right and assigning the result to ICR1H.
	ICR1H = value >> 8;
    1c9a:	e7 e4       	ldi	r30, 0x47	; 71
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca2:	89 2f       	mov	r24, r25
    1ca4:	99 27       	eor	r25, r25
    1ca6:	80 83       	st	Z, r24
}
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <TIMER_Timer1_OC1A_Init>:

void TIMER_Timer1_OC1A_Init(TIMER1_OC1_mode mode){
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <TIMER_Timer1_OC1A_Init+0x6>
    1cb8:	0f 92       	push	r0
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinDirection(OC1A_PORT, OC1A, PIN_OUTPUT);
    1cc0:	83 e0       	ldi	r24, 0x03	; 3
    1cc2:	65 e0       	ldi	r22, 0x05	; 5
    1cc4:	41 e0       	ldi	r20, 0x01	; 1
    1cc6:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
	switch (mode){
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	3b 83       	std	Y+3, r19	; 0x03
    1cd2:	2a 83       	std	Y+2, r18	; 0x02
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	91 05       	cpc	r25, r1
    1cdc:	21 f1       	breq	.+72     	; 0x1d26 <TIMER_Timer1_OC1A_Init+0x74>
    1cde:	2a 81       	ldd	r18, Y+2	; 0x02
    1ce0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ce2:	22 30       	cpi	r18, 0x02	; 2
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	2c f4       	brge	.+10     	; 0x1cf2 <TIMER_Timer1_OC1A_Init+0x40>
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	9b 81       	ldd	r25, Y+3	; 0x03
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	61 f0       	breq	.+24     	; 0x1d08 <TIMER_Timer1_OC1A_Init+0x56>
    1cf0:	46 c0       	rjmp	.+140    	; 0x1d7e <TIMER_Timer1_OC1A_Init+0xcc>
    1cf2:	2a 81       	ldd	r18, Y+2	; 0x02
    1cf4:	3b 81       	ldd	r19, Y+3	; 0x03
    1cf6:	22 30       	cpi	r18, 0x02	; 2
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	21 f1       	breq	.+72     	; 0x1d44 <TIMER_Timer1_OC1A_Init+0x92>
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1d00:	83 30       	cpi	r24, 0x03	; 3
    1d02:	91 05       	cpc	r25, r1
    1d04:	71 f1       	breq	.+92     	; 0x1d62 <TIMER_Timer1_OC1A_Init+0xb0>
    1d06:	3b c0       	rjmp	.+118    	; 0x1d7e <TIMER_Timer1_OC1A_Init+0xcc>
	case OC1_DISCONNECT:
		CLEAR_BIT(TCCR1A, COM1A0);
    1d08:	af e4       	ldi	r26, 0x4F	; 79
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	ef e4       	ldi	r30, 0x4F	; 79
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	8f 7b       	andi	r24, 0xBF	; 191
    1d14:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A, COM1A1);
    1d16:	af e4       	ldi	r26, 0x4F	; 79
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	ef e4       	ldi	r30, 0x4F	; 79
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	8f 77       	andi	r24, 0x7F	; 127
    1d22:	8c 93       	st	X, r24
    1d24:	2c c0       	rjmp	.+88     	; 0x1d7e <TIMER_Timer1_OC1A_Init+0xcc>
		break;
	case OC1_TOGGLE:
		SET_BIT(TCCR1A, COM1A0);
    1d26:	af e4       	ldi	r26, 0x4F	; 79
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	ef e4       	ldi	r30, 0x4F	; 79
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	80 64       	ori	r24, 0x40	; 64
    1d32:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A, COM1A1);
    1d34:	af e4       	ldi	r26, 0x4F	; 79
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	ef e4       	ldi	r30, 0x4F	; 79
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	8f 77       	andi	r24, 0x7F	; 127
    1d40:	8c 93       	st	X, r24
    1d42:	1d c0       	rjmp	.+58     	; 0x1d7e <TIMER_Timer1_OC1A_Init+0xcc>
		break;
	case OC1_NON_INVERTING:
		CLEAR_BIT(TCCR1A, COM1A0);
    1d44:	af e4       	ldi	r26, 0x4F	; 79
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	ef e4       	ldi	r30, 0x4F	; 79
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	8f 7b       	andi	r24, 0xBF	; 191
    1d50:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, COM1A1);
    1d52:	af e4       	ldi	r26, 0x4F	; 79
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	ef e4       	ldi	r30, 0x4F	; 79
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	80 68       	ori	r24, 0x80	; 128
    1d5e:	8c 93       	st	X, r24
    1d60:	0e c0       	rjmp	.+28     	; 0x1d7e <TIMER_Timer1_OC1A_Init+0xcc>
		break;
	case OC1_INVERTING:
		SET_BIT(TCCR1A, COM1A0);
    1d62:	af e4       	ldi	r26, 0x4F	; 79
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	ef e4       	ldi	r30, 0x4F	; 79
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	80 64       	ori	r24, 0x40	; 64
    1d6e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, COM1A1);
    1d70:	af e4       	ldi	r26, 0x4F	; 79
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	ef e4       	ldi	r30, 0x4F	; 79
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	80 68       	ori	r24, 0x80	; 128
    1d7c:	8c 93       	st	X, r24
		break;
	}
}
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <TIMER_Timer1_OC1B_Init>:

void TIMER_Timer1_OC1B_Init(TIMER1_OC1_mode mode){
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <TIMER_Timer1_OC1B_Init+0x6>
    1d90:	0f 92       	push	r0
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    1d96:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinDirection(OC1B_PORT, OC1B, PIN_OUTPUT);
    1d98:	83 e0       	ldi	r24, 0x03	; 3
    1d9a:	64 e0       	ldi	r22, 0x04	; 4
    1d9c:	41 e0       	ldi	r20, 0x01	; 1
    1d9e:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
	switch (mode){
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	3b 83       	std	Y+3, r19	; 0x03
    1daa:	2a 83       	std	Y+2, r18	; 0x02
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	9b 81       	ldd	r25, Y+3	; 0x03
    1db0:	81 30       	cpi	r24, 0x01	; 1
    1db2:	91 05       	cpc	r25, r1
    1db4:	21 f1       	breq	.+72     	; 0x1dfe <TIMER_Timer1_OC1B_Init+0x74>
    1db6:	2a 81       	ldd	r18, Y+2	; 0x02
    1db8:	3b 81       	ldd	r19, Y+3	; 0x03
    1dba:	22 30       	cpi	r18, 0x02	; 2
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	2c f4       	brge	.+10     	; 0x1dca <TIMER_Timer1_OC1B_Init+0x40>
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	61 f0       	breq	.+24     	; 0x1de0 <TIMER_Timer1_OC1B_Init+0x56>
    1dc8:	46 c0       	rjmp	.+140    	; 0x1e56 <TIMER_Timer1_OC1B_Init+0xcc>
    1dca:	2a 81       	ldd	r18, Y+2	; 0x02
    1dcc:	3b 81       	ldd	r19, Y+3	; 0x03
    1dce:	22 30       	cpi	r18, 0x02	; 2
    1dd0:	31 05       	cpc	r19, r1
    1dd2:	21 f1       	breq	.+72     	; 0x1e1c <TIMER_Timer1_OC1B_Init+0x92>
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd8:	83 30       	cpi	r24, 0x03	; 3
    1dda:	91 05       	cpc	r25, r1
    1ddc:	71 f1       	breq	.+92     	; 0x1e3a <TIMER_Timer1_OC1B_Init+0xb0>
    1dde:	3b c0       	rjmp	.+118    	; 0x1e56 <TIMER_Timer1_OC1B_Init+0xcc>
	case OC1_DISCONNECT:
		CLEAR_BIT(TCCR1A, COM1B0);
    1de0:	af e4       	ldi	r26, 0x4F	; 79
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	ef e4       	ldi	r30, 0x4F	; 79
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	8f 7e       	andi	r24, 0xEF	; 239
    1dec:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A, COM1B1);
    1dee:	af e4       	ldi	r26, 0x4F	; 79
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	ef e4       	ldi	r30, 0x4F	; 79
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	8f 7d       	andi	r24, 0xDF	; 223
    1dfa:	8c 93       	st	X, r24
    1dfc:	2c c0       	rjmp	.+88     	; 0x1e56 <TIMER_Timer1_OC1B_Init+0xcc>
		break;
	case OC1_TOGGLE:
		SET_BIT(TCCR1A, COM1B0);
    1dfe:	af e4       	ldi	r26, 0x4F	; 79
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	ef e4       	ldi	r30, 0x4F	; 79
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	80 61       	ori	r24, 0x10	; 16
    1e0a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A, COM1B1);
    1e0c:	af e4       	ldi	r26, 0x4F	; 79
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	ef e4       	ldi	r30, 0x4F	; 79
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	8f 7d       	andi	r24, 0xDF	; 223
    1e18:	8c 93       	st	X, r24
    1e1a:	1d c0       	rjmp	.+58     	; 0x1e56 <TIMER_Timer1_OC1B_Init+0xcc>
		break;
	case OC1_NON_INVERTING:
		CLEAR_BIT(TCCR1A, COM1B0);
    1e1c:	af e4       	ldi	r26, 0x4F	; 79
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	ef e4       	ldi	r30, 0x4F	; 79
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	8f 7e       	andi	r24, 0xEF	; 239
    1e28:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, COM1B1);
    1e2a:	af e4       	ldi	r26, 0x4F	; 79
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	ef e4       	ldi	r30, 0x4F	; 79
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	80 62       	ori	r24, 0x20	; 32
    1e36:	8c 93       	st	X, r24
    1e38:	0e c0       	rjmp	.+28     	; 0x1e56 <TIMER_Timer1_OC1B_Init+0xcc>
		break;
	case OC1_INVERTING:
		SET_BIT(TCCR1A, COM1B0);
    1e3a:	af e4       	ldi	r26, 0x4F	; 79
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	ef e4       	ldi	r30, 0x4F	; 79
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	80 61       	ori	r24, 0x10	; 16
    1e46:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, COM1B1);
    1e48:	af e4       	ldi	r26, 0x4F	; 79
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	ef e4       	ldi	r30, 0x4F	; 79
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	80 62       	ori	r24, 0x20	; 32
    1e54:	8c 93       	st	X, r24
		break;
	}
}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <TIMER_Timer1_OV_EnableInterrupt>:

void TIMER_Timer1_OV_EnableInterrupt(void){
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TOIE1);
    1e6a:	a9 e5       	ldi	r26, 0x59	; 89
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e9 e5       	ldi	r30, 0x59	; 89
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	84 60       	ori	r24, 0x04	; 4
    1e76:	8c 93       	st	X, r24
}
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <TIMER_Timer1_OV_DisableInterrupt>:

void TIMER_Timer1_OV_DisableInterrupt(void){
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, TOIE1);
    1e86:	a9 e5       	ldi	r26, 0x59	; 89
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e9 e5       	ldi	r30, 0x59	; 89
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	8b 7f       	andi	r24, 0xFB	; 251
    1e92:	8c 93       	st	X, r24
}
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <TIMER_Timer1_OCA_EnableInterrupt>:

void TIMER_Timer1_OCA_EnableInterrupt(void){
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE1A);
    1ea2:	a9 e5       	ldi	r26, 0x59	; 89
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e9 e5       	ldi	r30, 0x59	; 89
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	80 61       	ori	r24, 0x10	; 16
    1eae:	8c 93       	st	X, r24
}
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <TIMER_Timer1_OCA_DisableInterrupt>:

void TIMER_Timer1_OCA_DisableInterrupt(void){
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, OCIE1A);
    1ebe:	a9 e5       	ldi	r26, 0x59	; 89
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e9 e5       	ldi	r30, 0x59	; 89
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	8f 7e       	andi	r24, 0xEF	; 239
    1eca:	8c 93       	st	X, r24
}
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <TIMER_Timer1_OCB_EnableInterrupt>:

void TIMER_Timer1_OCB_EnableInterrupt(void){
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE1B);
    1eda:	a9 e5       	ldi	r26, 0x59	; 89
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e9 e5       	ldi	r30, 0x59	; 89
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	88 60       	ori	r24, 0x08	; 8
    1ee6:	8c 93       	st	X, r24
}
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <TIMER_Timer1_OCB_DisableInterrupt>:

void TIMER_Timer1_OCB_DisableInterrupt(void){
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, OCIE1B);
    1ef6:	a9 e5       	ldi	r26, 0x59	; 89
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e9 e5       	ldi	r30, 0x59	; 89
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	87 7f       	andi	r24, 0xF7	; 247
    1f02:	8c 93       	st	X, r24
}
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	08 95       	ret

00001f0a <TIMER_Timer1_IC_EnableInterrupt>:

void TIMER_Timer1_IC_EnableInterrupt(void){
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TICIE1);
    1f12:	a9 e5       	ldi	r26, 0x59	; 89
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e9 e5       	ldi	r30, 0x59	; 89
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	80 62       	ori	r24, 0x20	; 32
    1f1e:	8c 93       	st	X, r24
}
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <TIMER_Timer1_IC_DisableInterrupt>:

void TIMER_Timer1_IC_DisableInterrupt(void){
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, TICIE1);
    1f2e:	a9 e5       	ldi	r26, 0x59	; 89
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e9 e5       	ldi	r30, 0x59	; 89
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	8f 7d       	andi	r24, 0xDF	; 223
    1f3a:	8c 93       	st	X, r24
}
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <TIMER_Timer1_OV_SetCallBack>:

void TIMER_Timer1_OV_SetCallBack(void (*local_function_pointer) (void)){
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <TIMER_Timer1_OV_SetCallBack+0x6>
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	9a 83       	std	Y+2, r25	; 0x02
    1f4e:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OVF_function_pointer = local_function_pointer;
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	9a 81       	ldd	r25, Y+2	; 0x02
    1f54:	90 93 83 01 	sts	0x0183, r25
    1f58:	80 93 82 01 	sts	0x0182, r24
}
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <TIMER_Timer1_OCA_SetCallBack>:

void TIMER_Timer1_OCA_SetCallBack(void (*local_function_pointer) (void)){
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <TIMER_Timer1_OCA_SetCallBack+0x6>
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	9a 83       	std	Y+2, r25	; 0x02
    1f72:	89 83       	std	Y+1, r24	; 0x01
	Timer1_COMPA_function_pointer = local_function_pointer;
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	9a 81       	ldd	r25, Y+2	; 0x02
    1f78:	90 93 85 01 	sts	0x0185, r25
    1f7c:	80 93 84 01 	sts	0x0184, r24
}
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <TIMER_Timer1_OCB_SetCallBack>:

void TIMER_Timer1_OCB_SetCallBack(void (*local_function_pointer) (void)){
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	00 d0       	rcall	.+0      	; 0x1f90 <TIMER_Timer1_OCB_SetCallBack+0x6>
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	9a 83       	std	Y+2, r25	; 0x02
    1f96:	89 83       	std	Y+1, r24	; 0x01
	Timer1_COMPB_function_pointer = local_function_pointer;
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9c:	90 93 87 01 	sts	0x0187, r25
    1fa0:	80 93 86 01 	sts	0x0186, r24
}
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <TIMER_Timer1_IC_SetCallBack>:

void TIMER_Timer1_IC_SetCallBack(void (*local_function_pointer) (void)){
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <TIMER_Timer1_IC_SetCallBack+0x6>
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
    1fb8:	9a 83       	std	Y+2, r25	; 0x02
    1fba:	89 83       	std	Y+1, r24	; 0x01
	Timer1_CAPT_function_pointer = local_function_pointer;
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc0:	90 93 89 01 	sts	0x0189, r25
    1fc4:	80 93 88 01 	sts	0x0188, r24
}
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <TIMER_Timer1_OV_Polling_Wait>:

void TIMER_Timer1_OV_Polling_Wait(void){
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
	TIMER_TIFR_ClearFlag(TOV1);		// Clear TOV1 initially.
    1fda:	82 e0       	ldi	r24, 0x02	; 2
    1fdc:	0e 94 0a 14 	call	0x2814	; 0x2814 <TIMER_TIFR_ClearFlag>
	while(!GET_BIT(TIFR, TOV1));	// While TOV1 flag is 0 (Overflow hasn't been reached yet), stay here.
    1fe0:	e8 e5       	ldi	r30, 0x58	; 88
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	86 95       	lsr	r24
    1fe8:	86 95       	lsr	r24
    1fea:	88 2f       	mov	r24, r24
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	81 70       	andi	r24, 0x01	; 1
    1ff0:	90 70       	andi	r25, 0x00	; 0
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	a9 f3       	breq	.-22     	; 0x1fe0 <TIMER_Timer1_OV_Polling_Wait+0xe>
}
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <TIMER_Timer1_OCA_Polling_Wait>:

void TIMER_Timer1_OCA_Polling_Wait(void){
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
	TIMER_TIFR_ClearFlag(OCF1A);	// Clear OCF1A initially.
    2004:	84 e0       	ldi	r24, 0x04	; 4
    2006:	0e 94 0a 14 	call	0x2814	; 0x2814 <TIMER_TIFR_ClearFlag>
	while(!GET_BIT(TIFR, OCF1A));	// While OCF1A flag is 0 (TCNT1 has not matched OCR1A yet), stay here.
    200a:	e8 e5       	ldi	r30, 0x58	; 88
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	82 95       	swap	r24
    2012:	8f 70       	andi	r24, 0x0F	; 15
    2014:	88 2f       	mov	r24, r24
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	81 70       	andi	r24, 0x01	; 1
    201a:	90 70       	andi	r25, 0x00	; 0
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	a9 f3       	breq	.-22     	; 0x200a <TIMER_Timer1_OCA_Polling_Wait+0xe>
}
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <TIMER_Timer1_OCB_Polling_Wait>:

void TIMER_Timer1_OCB_Polling_Wait(void){
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
	TIMER_TIFR_ClearFlag(OCF1B);	// Clear OCF1B initially.
    202e:	83 e0       	ldi	r24, 0x03	; 3
    2030:	0e 94 0a 14 	call	0x2814	; 0x2814 <TIMER_TIFR_ClearFlag>
	while(!GET_BIT(TIFR, OCF1B));	// While OCF1B flag is 0 (TCNT1 has not matched OCR1B yet), stay here.
    2034:	e8 e5       	ldi	r30, 0x58	; 88
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	86 95       	lsr	r24
    203c:	86 95       	lsr	r24
    203e:	86 95       	lsr	r24
    2040:	88 2f       	mov	r24, r24
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	81 70       	andi	r24, 0x01	; 1
    2046:	90 70       	andi	r25, 0x00	; 0
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	a1 f3       	breq	.-24     	; 0x2034 <TIMER_Timer1_OCB_Polling_Wait+0xe>
}
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <TIMER_Timer1_IC_Polling_Wait>:

void TIMER_Timer1_IC_Polling_Wait(void){
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
	TIMER_TIFR_ClearFlag(ICF1);		// Clear ICF1 initially.
    205a:	85 e0       	ldi	r24, 0x05	; 5
    205c:	0e 94 0a 14 	call	0x2814	; 0x2814 <TIMER_TIFR_ClearFlag>
	while(!GET_BIT(TIFR, ICF1));	// While ICF1 flag is 0 (TCNT1 has not matched OCR1B yet), stay here.
    2060:	e8 e5       	ldi	r30, 0x58	; 88
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	82 95       	swap	r24
    2068:	86 95       	lsr	r24
    206a:	87 70       	andi	r24, 0x07	; 7
    206c:	88 2f       	mov	r24, r24
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	81 70       	andi	r24, 0x01	; 1
    2072:	90 70       	andi	r25, 0x00	; 0
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	a1 f3       	breq	.-24     	; 0x2060 <TIMER_Timer1_IC_Polling_Wait+0xe>
}
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <TIMER_Timer1_Stop>:

void TIMER_Timer1_Stop(void){
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1B, CS10);
    2086:	ae e4       	ldi	r26, 0x4E	; 78
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	ee e4       	ldi	r30, 0x4E	; 78
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	8e 7f       	andi	r24, 0xFE	; 254
    2092:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B, CS11);
    2094:	ae e4       	ldi	r26, 0x4E	; 78
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	ee e4       	ldi	r30, 0x4E	; 78
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	8d 7f       	andi	r24, 0xFD	; 253
    20a0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B, CS12);
    20a2:	ae e4       	ldi	r26, 0x4E	; 78
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	ee e4       	ldi	r30, 0x4E	; 78
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	8b 7f       	andi	r24, 0xFB	; 251
    20ae:	8c 93       	st	X, r24
}
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <__vector_6>:
 * __vector_9(void) -> Timer 1 Overflow Interrupt.
 *
 */

void __vector_6(void) __attribute__ ((signal, used, externally_visible));
void __vector_6 (void){
    20b6:	1f 92       	push	r1
    20b8:	0f 92       	push	r0
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	0f 92       	push	r0
    20be:	11 24       	eor	r1, r1
    20c0:	2f 93       	push	r18
    20c2:	3f 93       	push	r19
    20c4:	4f 93       	push	r20
    20c6:	5f 93       	push	r21
    20c8:	6f 93       	push	r22
    20ca:	7f 93       	push	r23
    20cc:	8f 93       	push	r24
    20ce:	9f 93       	push	r25
    20d0:	af 93       	push	r26
    20d2:	bf 93       	push	r27
    20d4:	ef 93       	push	r30
    20d6:	ff 93       	push	r31
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_CAPT_function_pointer){		// Check if the function pointer is not NULL
    20e0:	80 91 88 01 	lds	r24, 0x0188
    20e4:	90 91 89 01 	lds	r25, 0x0189
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	29 f0       	breq	.+10     	; 0x20f6 <__vector_6+0x40>
		Timer1_CAPT_function_pointer();		// Execute the function
    20ec:	e0 91 88 01 	lds	r30, 0x0188
    20f0:	f0 91 89 01 	lds	r31, 0x0189
    20f4:	09 95       	icall
	}
}
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	ff 91       	pop	r31
    20fc:	ef 91       	pop	r30
    20fe:	bf 91       	pop	r27
    2100:	af 91       	pop	r26
    2102:	9f 91       	pop	r25
    2104:	8f 91       	pop	r24
    2106:	7f 91       	pop	r23
    2108:	6f 91       	pop	r22
    210a:	5f 91       	pop	r21
    210c:	4f 91       	pop	r20
    210e:	3f 91       	pop	r19
    2110:	2f 91       	pop	r18
    2112:	0f 90       	pop	r0
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	0f 90       	pop	r0
    2118:	1f 90       	pop	r1
    211a:	18 95       	reti

0000211c <__vector_7>:

void __vector_7(void) __attribute__ ((signal, used, externally_visible));
void __vector_7 (void){
    211c:	1f 92       	push	r1
    211e:	0f 92       	push	r0
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	0f 92       	push	r0
    2124:	11 24       	eor	r1, r1
    2126:	2f 93       	push	r18
    2128:	3f 93       	push	r19
    212a:	4f 93       	push	r20
    212c:	5f 93       	push	r21
    212e:	6f 93       	push	r22
    2130:	7f 93       	push	r23
    2132:	8f 93       	push	r24
    2134:	9f 93       	push	r25
    2136:	af 93       	push	r26
    2138:	bf 93       	push	r27
    213a:	ef 93       	push	r30
    213c:	ff 93       	push	r31
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_COMPA_function_pointer){		// Check if the function pointer is not NULL
    2146:	80 91 84 01 	lds	r24, 0x0184
    214a:	90 91 85 01 	lds	r25, 0x0185
    214e:	00 97       	sbiw	r24, 0x00	; 0
    2150:	29 f0       	breq	.+10     	; 0x215c <__vector_7+0x40>
		Timer1_COMPA_function_pointer();	// Execute the function
    2152:	e0 91 84 01 	lds	r30, 0x0184
    2156:	f0 91 85 01 	lds	r31, 0x0185
    215a:	09 95       	icall
	}
}
    215c:	cf 91       	pop	r28
    215e:	df 91       	pop	r29
    2160:	ff 91       	pop	r31
    2162:	ef 91       	pop	r30
    2164:	bf 91       	pop	r27
    2166:	af 91       	pop	r26
    2168:	9f 91       	pop	r25
    216a:	8f 91       	pop	r24
    216c:	7f 91       	pop	r23
    216e:	6f 91       	pop	r22
    2170:	5f 91       	pop	r21
    2172:	4f 91       	pop	r20
    2174:	3f 91       	pop	r19
    2176:	2f 91       	pop	r18
    2178:	0f 90       	pop	r0
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	0f 90       	pop	r0
    217e:	1f 90       	pop	r1
    2180:	18 95       	reti

00002182 <__vector_8>:

void __vector_8(void) __attribute__ ((signal, used, externally_visible));
void __vector_8 (void){
    2182:	1f 92       	push	r1
    2184:	0f 92       	push	r0
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	0f 92       	push	r0
    218a:	11 24       	eor	r1, r1
    218c:	2f 93       	push	r18
    218e:	3f 93       	push	r19
    2190:	4f 93       	push	r20
    2192:	5f 93       	push	r21
    2194:	6f 93       	push	r22
    2196:	7f 93       	push	r23
    2198:	8f 93       	push	r24
    219a:	9f 93       	push	r25
    219c:	af 93       	push	r26
    219e:	bf 93       	push	r27
    21a0:	ef 93       	push	r30
    21a2:	ff 93       	push	r31
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_COMPB_function_pointer){		// Check if the function pointer is not NULL
    21ac:	80 91 86 01 	lds	r24, 0x0186
    21b0:	90 91 87 01 	lds	r25, 0x0187
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	29 f0       	breq	.+10     	; 0x21c2 <__vector_8+0x40>
		Timer1_COMPB_function_pointer();	// Execute the function
    21b8:	e0 91 86 01 	lds	r30, 0x0186
    21bc:	f0 91 87 01 	lds	r31, 0x0187
    21c0:	09 95       	icall
	}
}
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	ff 91       	pop	r31
    21c8:	ef 91       	pop	r30
    21ca:	bf 91       	pop	r27
    21cc:	af 91       	pop	r26
    21ce:	9f 91       	pop	r25
    21d0:	8f 91       	pop	r24
    21d2:	7f 91       	pop	r23
    21d4:	6f 91       	pop	r22
    21d6:	5f 91       	pop	r21
    21d8:	4f 91       	pop	r20
    21da:	3f 91       	pop	r19
    21dc:	2f 91       	pop	r18
    21de:	0f 90       	pop	r0
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	0f 90       	pop	r0
    21e4:	1f 90       	pop	r1
    21e6:	18 95       	reti

000021e8 <__vector_9>:

void __vector_9(void) __attribute__ ((signal, used, externally_visible));
void __vector_9 (void){
    21e8:	1f 92       	push	r1
    21ea:	0f 92       	push	r0
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	0f 92       	push	r0
    21f0:	11 24       	eor	r1, r1
    21f2:	2f 93       	push	r18
    21f4:	3f 93       	push	r19
    21f6:	4f 93       	push	r20
    21f8:	5f 93       	push	r21
    21fa:	6f 93       	push	r22
    21fc:	7f 93       	push	r23
    21fe:	8f 93       	push	r24
    2200:	9f 93       	push	r25
    2202:	af 93       	push	r26
    2204:	bf 93       	push	r27
    2206:	ef 93       	push	r30
    2208:	ff 93       	push	r31
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_OVF_function_pointer){		// Check if the function pointer is not NULL
    2212:	80 91 82 01 	lds	r24, 0x0182
    2216:	90 91 83 01 	lds	r25, 0x0183
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	29 f0       	breq	.+10     	; 0x2228 <__vector_9+0x40>
		Timer1_OVF_function_pointer();		// Execute the function
    221e:	e0 91 82 01 	lds	r30, 0x0182
    2222:	f0 91 83 01 	lds	r31, 0x0183
    2226:	09 95       	icall
	}
}
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	ff 91       	pop	r31
    222e:	ef 91       	pop	r30
    2230:	bf 91       	pop	r27
    2232:	af 91       	pop	r26
    2234:	9f 91       	pop	r25
    2236:	8f 91       	pop	r24
    2238:	7f 91       	pop	r23
    223a:	6f 91       	pop	r22
    223c:	5f 91       	pop	r21
    223e:	4f 91       	pop	r20
    2240:	3f 91       	pop	r19
    2242:	2f 91       	pop	r18
    2244:	0f 90       	pop	r0
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	0f 90       	pop	r0
    224a:	1f 90       	pop	r1
    224c:	18 95       	reti

0000224e <TIMER_Timer2_Init>:

/********************************\
*********** Functions ************
\********************************/

void TIMER_Timer2_Init(TIMER2_mode_of_operation mode, TIMER2_prescaler prescaler){
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	00 d0       	rcall	.+0      	; 0x2254 <TIMER_Timer2_Init+0x6>
    2254:	00 d0       	rcall	.+0      	; 0x2256 <TIMER_Timer2_Init+0x8>
    2256:	00 d0       	rcall	.+0      	; 0x2258 <TIMER_Timer2_Init+0xa>
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	6a 83       	std	Y+2, r22	; 0x02
	switch (mode){
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	3e 83       	std	Y+6, r19	; 0x06
    2268:	2d 83       	std	Y+5, r18	; 0x05
    226a:	8d 81       	ldd	r24, Y+5	; 0x05
    226c:	9e 81       	ldd	r25, Y+6	; 0x06
    226e:	81 30       	cpi	r24, 0x01	; 1
    2270:	91 05       	cpc	r25, r1
    2272:	21 f1       	breq	.+72     	; 0x22bc <TIMER_Timer2_Init+0x6e>
    2274:	2d 81       	ldd	r18, Y+5	; 0x05
    2276:	3e 81       	ldd	r19, Y+6	; 0x06
    2278:	22 30       	cpi	r18, 0x02	; 2
    227a:	31 05       	cpc	r19, r1
    227c:	2c f4       	brge	.+10     	; 0x2288 <TIMER_Timer2_Init+0x3a>
    227e:	8d 81       	ldd	r24, Y+5	; 0x05
    2280:	9e 81       	ldd	r25, Y+6	; 0x06
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	61 f0       	breq	.+24     	; 0x229e <TIMER_Timer2_Init+0x50>
    2286:	46 c0       	rjmp	.+140    	; 0x2314 <TIMER_Timer2_Init+0xc6>
    2288:	2d 81       	ldd	r18, Y+5	; 0x05
    228a:	3e 81       	ldd	r19, Y+6	; 0x06
    228c:	22 30       	cpi	r18, 0x02	; 2
    228e:	31 05       	cpc	r19, r1
    2290:	21 f1       	breq	.+72     	; 0x22da <TIMER_Timer2_Init+0x8c>
    2292:	8d 81       	ldd	r24, Y+5	; 0x05
    2294:	9e 81       	ldd	r25, Y+6	; 0x06
    2296:	83 30       	cpi	r24, 0x03	; 3
    2298:	91 05       	cpc	r25, r1
    229a:	71 f1       	breq	.+92     	; 0x22f8 <TIMER_Timer2_Init+0xaa>
    229c:	3b c0       	rjmp	.+118    	; 0x2314 <TIMER_Timer2_Init+0xc6>
	case TIMER2_NORMAL:
		CLEAR_BIT(TCCR2, WGM20);
    229e:	a5 e4       	ldi	r26, 0x45	; 69
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	e5 e4       	ldi	r30, 0x45	; 69
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	8f 7b       	andi	r24, 0xBF	; 191
    22aa:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, WGM21);
    22ac:	a5 e4       	ldi	r26, 0x45	; 69
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e5 e4       	ldi	r30, 0x45	; 69
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	87 7f       	andi	r24, 0xF7	; 247
    22b8:	8c 93       	st	X, r24
    22ba:	2c c0       	rjmp	.+88     	; 0x2314 <TIMER_Timer2_Init+0xc6>
		break;
	case TIMER2_PWM_PHASE_CORRECT:
		SET_BIT(TCCR2, WGM20);
    22bc:	a5 e4       	ldi	r26, 0x45	; 69
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e5 e4       	ldi	r30, 0x45	; 69
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	80 64       	ori	r24, 0x40	; 64
    22c8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, WGM21);
    22ca:	a5 e4       	ldi	r26, 0x45	; 69
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	e5 e4       	ldi	r30, 0x45	; 69
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	87 7f       	andi	r24, 0xF7	; 247
    22d6:	8c 93       	st	X, r24
    22d8:	1d c0       	rjmp	.+58     	; 0x2314 <TIMER_Timer2_Init+0xc6>
		break;
	case TIMER2_CTC:
		CLEAR_BIT(TCCR2, WGM20);
    22da:	a5 e4       	ldi	r26, 0x45	; 69
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e5 e4       	ldi	r30, 0x45	; 69
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	8f 7b       	andi	r24, 0xBF	; 191
    22e6:	8c 93       	st	X, r24
		SET_BIT(TCCR2, WGM21);
    22e8:	a5 e4       	ldi	r26, 0x45	; 69
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	e5 e4       	ldi	r30, 0x45	; 69
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	88 60       	ori	r24, 0x08	; 8
    22f4:	8c 93       	st	X, r24
    22f6:	0e c0       	rjmp	.+28     	; 0x2314 <TIMER_Timer2_Init+0xc6>
		break;
	case TIMER2_FAST_PWM:
		SET_BIT(TCCR2, WGM20);
    22f8:	a5 e4       	ldi	r26, 0x45	; 69
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	e5 e4       	ldi	r30, 0x45	; 69
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	80 64       	ori	r24, 0x40	; 64
    2304:	8c 93       	st	X, r24
		SET_BIT(TCCR2, WGM21);
    2306:	a5 e4       	ldi	r26, 0x45	; 69
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e5 e4       	ldi	r30, 0x45	; 69
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	88 60       	ori	r24, 0x08	; 8
    2312:	8c 93       	st	X, r24
	 * 		Prescalers definitions are arranged from 0 (Stop) to 7.
	 * 		Therefore, It is easier to just make TCCR2 &= 0b11111000 then TCCR2 =| prescaler to set the chosen prescaler.
	 * 		However, it is often better to avoid using magic numbers or depend on the location of flags, so "SET_BIT" and "CLEAR_BIT" are used below.
	 *
	 */
	switch (prescaler){
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	28 2f       	mov	r18, r24
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	3c 83       	std	Y+4, r19	; 0x04
    231c:	2b 83       	std	Y+3, r18	; 0x03
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	9c 81       	ldd	r25, Y+4	; 0x04
    2322:	83 30       	cpi	r24, 0x03	; 3
    2324:	91 05       	cpc	r25, r1
    2326:	09 f4       	brne	.+2      	; 0x232a <TIMER_Timer2_Init+0xdc>
    2328:	70 c0       	rjmp	.+224    	; 0x240a <TIMER_Timer2_Init+0x1bc>
    232a:	2b 81       	ldd	r18, Y+3	; 0x03
    232c:	3c 81       	ldd	r19, Y+4	; 0x04
    232e:	24 30       	cpi	r18, 0x04	; 4
    2330:	31 05       	cpc	r19, r1
    2332:	84 f4       	brge	.+32     	; 0x2354 <TIMER_Timer2_Init+0x106>
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	9c 81       	ldd	r25, Y+4	; 0x04
    2338:	81 30       	cpi	r24, 0x01	; 1
    233a:	91 05       	cpc	r25, r1
    233c:	d1 f1       	breq	.+116    	; 0x23b2 <TIMER_Timer2_Init+0x164>
    233e:	2b 81       	ldd	r18, Y+3	; 0x03
    2340:	3c 81       	ldd	r19, Y+4	; 0x04
    2342:	22 30       	cpi	r18, 0x02	; 2
    2344:	31 05       	cpc	r19, r1
    2346:	0c f0       	brlt	.+2      	; 0x234a <TIMER_Timer2_Init+0xfc>
    2348:	4a c0       	rjmp	.+148    	; 0x23de <TIMER_Timer2_Init+0x190>
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	d1 f0       	breq	.+52     	; 0x2386 <TIMER_Timer2_Init+0x138>
    2352:	c8 c0       	rjmp	.+400    	; 0x24e4 <TIMER_Timer2_Init+0x296>
    2354:	2b 81       	ldd	r18, Y+3	; 0x03
    2356:	3c 81       	ldd	r19, Y+4	; 0x04
    2358:	25 30       	cpi	r18, 0x05	; 5
    235a:	31 05       	cpc	r19, r1
    235c:	09 f4       	brne	.+2      	; 0x2360 <TIMER_Timer2_Init+0x112>
    235e:	81 c0       	rjmp	.+258    	; 0x2462 <TIMER_Timer2_Init+0x214>
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	9c 81       	ldd	r25, Y+4	; 0x04
    2364:	85 30       	cpi	r24, 0x05	; 5
    2366:	91 05       	cpc	r25, r1
    2368:	0c f4       	brge	.+2      	; 0x236c <TIMER_Timer2_Init+0x11e>
    236a:	65 c0       	rjmp	.+202    	; 0x2436 <TIMER_Timer2_Init+0x1e8>
    236c:	2b 81       	ldd	r18, Y+3	; 0x03
    236e:	3c 81       	ldd	r19, Y+4	; 0x04
    2370:	26 30       	cpi	r18, 0x06	; 6
    2372:	31 05       	cpc	r19, r1
    2374:	09 f4       	brne	.+2      	; 0x2378 <TIMER_Timer2_Init+0x12a>
    2376:	8b c0       	rjmp	.+278    	; 0x248e <TIMER_Timer2_Init+0x240>
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	9c 81       	ldd	r25, Y+4	; 0x04
    237c:	87 30       	cpi	r24, 0x07	; 7
    237e:	91 05       	cpc	r25, r1
    2380:	09 f4       	brne	.+2      	; 0x2384 <TIMER_Timer2_Init+0x136>
    2382:	9b c0       	rjmp	.+310    	; 0x24ba <TIMER_Timer2_Init+0x26c>
    2384:	af c0       	rjmp	.+350    	; 0x24e4 <TIMER_Timer2_Init+0x296>
	case TIMER2_STOP:
		CLEAR_BIT(TCCR2, CS20);
    2386:	a5 e4       	ldi	r26, 0x45	; 69
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e5 e4       	ldi	r30, 0x45	; 69
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	8e 7f       	andi	r24, 0xFE	; 254
    2392:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, CS21);
    2394:	a5 e4       	ldi	r26, 0x45	; 69
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	e5 e4       	ldi	r30, 0x45	; 69
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	8d 7f       	andi	r24, 0xFD	; 253
    23a0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, CS22);
    23a2:	a5 e4       	ldi	r26, 0x45	; 69
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	e5 e4       	ldi	r30, 0x45	; 69
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	8b 7f       	andi	r24, 0xFB	; 251
    23ae:	8c 93       	st	X, r24
    23b0:	99 c0       	rjmp	.+306    	; 0x24e4 <TIMER_Timer2_Init+0x296>
		break;
	case TIMER2_NO_PRESCALER:
		SET_BIT(TCCR2, CS20);
    23b2:	a5 e4       	ldi	r26, 0x45	; 69
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	e5 e4       	ldi	r30, 0x45	; 69
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	81 60       	ori	r24, 0x01	; 1
    23be:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, CS21);
    23c0:	a5 e4       	ldi	r26, 0x45	; 69
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e5 e4       	ldi	r30, 0x45	; 69
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	8d 7f       	andi	r24, 0xFD	; 253
    23cc:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, CS22);
    23ce:	a5 e4       	ldi	r26, 0x45	; 69
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	e5 e4       	ldi	r30, 0x45	; 69
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	8b 7f       	andi	r24, 0xFB	; 251
    23da:	8c 93       	st	X, r24
    23dc:	83 c0       	rjmp	.+262    	; 0x24e4 <TIMER_Timer2_Init+0x296>
		break;
	case TIMER2_PRESCALER_8:
		CLEAR_BIT(TCCR2, CS20);
    23de:	a5 e4       	ldi	r26, 0x45	; 69
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e5 e4       	ldi	r30, 0x45	; 69
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	8e 7f       	andi	r24, 0xFE	; 254
    23ea:	8c 93       	st	X, r24
		SET_BIT(TCCR2, CS21);
    23ec:	a5 e4       	ldi	r26, 0x45	; 69
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e5 e4       	ldi	r30, 0x45	; 69
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	82 60       	ori	r24, 0x02	; 2
    23f8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, CS22);
    23fa:	a5 e4       	ldi	r26, 0x45	; 69
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e5 e4       	ldi	r30, 0x45	; 69
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	8b 7f       	andi	r24, 0xFB	; 251
    2406:	8c 93       	st	X, r24
    2408:	6d c0       	rjmp	.+218    	; 0x24e4 <TIMER_Timer2_Init+0x296>
		break;
	case TIMER2_PRESCALER_32:
		SET_BIT(TCCR2, CS20);
    240a:	a5 e4       	ldi	r26, 0x45	; 69
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e5 e4       	ldi	r30, 0x45	; 69
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	81 60       	ori	r24, 0x01	; 1
    2416:	8c 93       	st	X, r24
		SET_BIT(TCCR2, CS21);
    2418:	a5 e4       	ldi	r26, 0x45	; 69
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	e5 e4       	ldi	r30, 0x45	; 69
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	82 60       	ori	r24, 0x02	; 2
    2424:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, CS22);
    2426:	a5 e4       	ldi	r26, 0x45	; 69
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e5 e4       	ldi	r30, 0x45	; 69
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	8b 7f       	andi	r24, 0xFB	; 251
    2432:	8c 93       	st	X, r24
    2434:	57 c0       	rjmp	.+174    	; 0x24e4 <TIMER_Timer2_Init+0x296>
		break;
	case TIMER2_PRESCALER_64:
		CLEAR_BIT(TCCR2, CS20);
    2436:	a5 e4       	ldi	r26, 0x45	; 69
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e5 e4       	ldi	r30, 0x45	; 69
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	8e 7f       	andi	r24, 0xFE	; 254
    2442:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, CS21);
    2444:	a5 e4       	ldi	r26, 0x45	; 69
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e5 e4       	ldi	r30, 0x45	; 69
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	8d 7f       	andi	r24, 0xFD	; 253
    2450:	8c 93       	st	X, r24
		SET_BIT(TCCR2, CS22);
    2452:	a5 e4       	ldi	r26, 0x45	; 69
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	e5 e4       	ldi	r30, 0x45	; 69
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	84 60       	ori	r24, 0x04	; 4
    245e:	8c 93       	st	X, r24
    2460:	41 c0       	rjmp	.+130    	; 0x24e4 <TIMER_Timer2_Init+0x296>
		break;
	case TIMER2_PRESCALER_128:
		SET_BIT(TCCR2, CS20);
    2462:	a5 e4       	ldi	r26, 0x45	; 69
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e5 e4       	ldi	r30, 0x45	; 69
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	81 60       	ori	r24, 0x01	; 1
    246e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, CS21);
    2470:	a5 e4       	ldi	r26, 0x45	; 69
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	e5 e4       	ldi	r30, 0x45	; 69
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	8d 7f       	andi	r24, 0xFD	; 253
    247c:	8c 93       	st	X, r24
		SET_BIT(TCCR2, CS22);
    247e:	a5 e4       	ldi	r26, 0x45	; 69
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	e5 e4       	ldi	r30, 0x45	; 69
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	84 60       	ori	r24, 0x04	; 4
    248a:	8c 93       	st	X, r24
    248c:	2b c0       	rjmp	.+86     	; 0x24e4 <TIMER_Timer2_Init+0x296>
		break;
	case TIMER2_PRESCALER_256:
		CLEAR_BIT(TCCR2, CS20);
    248e:	a5 e4       	ldi	r26, 0x45	; 69
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	e5 e4       	ldi	r30, 0x45	; 69
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	8e 7f       	andi	r24, 0xFE	; 254
    249a:	8c 93       	st	X, r24
		SET_BIT(TCCR2, CS21);
    249c:	a5 e4       	ldi	r26, 0x45	; 69
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e5 e4       	ldi	r30, 0x45	; 69
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	82 60       	ori	r24, 0x02	; 2
    24a8:	8c 93       	st	X, r24
		SET_BIT(TCCR2, CS22);
    24aa:	a5 e4       	ldi	r26, 0x45	; 69
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e5 e4       	ldi	r30, 0x45	; 69
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	84 60       	ori	r24, 0x04	; 4
    24b6:	8c 93       	st	X, r24
    24b8:	15 c0       	rjmp	.+42     	; 0x24e4 <TIMER_Timer2_Init+0x296>
		break;
	case TIMER2_PRESCALER_1024:
		SET_BIT(TCCR2, CS20);
    24ba:	a5 e4       	ldi	r26, 0x45	; 69
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e5 e4       	ldi	r30, 0x45	; 69
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	81 60       	ori	r24, 0x01	; 1
    24c6:	8c 93       	st	X, r24
		SET_BIT(TCCR2, CS21);
    24c8:	a5 e4       	ldi	r26, 0x45	; 69
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	e5 e4       	ldi	r30, 0x45	; 69
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	82 60       	ori	r24, 0x02	; 2
    24d4:	8c 93       	st	X, r24
		SET_BIT(TCCR2, CS22);
    24d6:	a5 e4       	ldi	r26, 0x45	; 69
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e5 e4       	ldi	r30, 0x45	; 69
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	84 60       	ori	r24, 0x04	; 4
    24e2:	8c 93       	st	X, r24
		break;
	}
	TCNT2 = 0;
    24e4:	e4 e4       	ldi	r30, 0x44	; 68
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	10 82       	st	Z, r1
}
    24ea:	26 96       	adiw	r28, 0x06	; 6
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <TIMER_Timer2_TCNT2_Set>:


void TIMER_Timer2_TCNT2_Set(u8_t value){
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	0f 92       	push	r0
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = value;
    2508:	e4 e4       	ldi	r30, 0x44	; 68
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	80 83       	st	Z, r24
}
    2510:	0f 90       	pop	r0
    2512:	cf 91       	pop	r28
    2514:	df 91       	pop	r29
    2516:	08 95       	ret

00002518 <TIMER_Timer2_OCR2_Set>:

void TIMER_Timer2_OCR2_Set(u8_t value){
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	0f 92       	push	r0
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = value;
    2524:	e3 e4       	ldi	r30, 0x43	; 67
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	80 83       	st	Z, r24
}
    252c:	0f 90       	pop	r0
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <TIMER_Timer2_OC2_Init>:

void TIMER_Timer2_OC2_Init(TIMER2_OC2_mode mode){
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	00 d0       	rcall	.+0      	; 0x253a <TIMER_Timer2_OC2_Init+0x6>
    253a:	0f 92       	push	r0
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinDirection(OC2_PORT, OC2, PIN_OUTPUT);
    2542:	83 e0       	ldi	r24, 0x03	; 3
    2544:	67 e0       	ldi	r22, 0x07	; 7
    2546:	41 e0       	ldi	r20, 0x01	; 1
    2548:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
	switch (mode){
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	28 2f       	mov	r18, r24
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	3b 83       	std	Y+3, r19	; 0x03
    2554:	2a 83       	std	Y+2, r18	; 0x02
    2556:	8a 81       	ldd	r24, Y+2	; 0x02
    2558:	9b 81       	ldd	r25, Y+3	; 0x03
    255a:	81 30       	cpi	r24, 0x01	; 1
    255c:	91 05       	cpc	r25, r1
    255e:	21 f1       	breq	.+72     	; 0x25a8 <TIMER_Timer2_OC2_Init+0x74>
    2560:	2a 81       	ldd	r18, Y+2	; 0x02
    2562:	3b 81       	ldd	r19, Y+3	; 0x03
    2564:	22 30       	cpi	r18, 0x02	; 2
    2566:	31 05       	cpc	r19, r1
    2568:	2c f4       	brge	.+10     	; 0x2574 <TIMER_Timer2_OC2_Init+0x40>
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	9b 81       	ldd	r25, Y+3	; 0x03
    256e:	00 97       	sbiw	r24, 0x00	; 0
    2570:	61 f0       	breq	.+24     	; 0x258a <TIMER_Timer2_OC2_Init+0x56>
    2572:	46 c0       	rjmp	.+140    	; 0x2600 <TIMER_Timer2_OC2_Init+0xcc>
    2574:	2a 81       	ldd	r18, Y+2	; 0x02
    2576:	3b 81       	ldd	r19, Y+3	; 0x03
    2578:	22 30       	cpi	r18, 0x02	; 2
    257a:	31 05       	cpc	r19, r1
    257c:	21 f1       	breq	.+72     	; 0x25c6 <TIMER_Timer2_OC2_Init+0x92>
    257e:	8a 81       	ldd	r24, Y+2	; 0x02
    2580:	9b 81       	ldd	r25, Y+3	; 0x03
    2582:	83 30       	cpi	r24, 0x03	; 3
    2584:	91 05       	cpc	r25, r1
    2586:	71 f1       	breq	.+92     	; 0x25e4 <TIMER_Timer2_OC2_Init+0xb0>
    2588:	3b c0       	rjmp	.+118    	; 0x2600 <TIMER_Timer2_OC2_Init+0xcc>
	case OC2_DISCONNECT:
		CLEAR_BIT(TCCR2, COM20);
    258a:	a5 e4       	ldi	r26, 0x45	; 69
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	e5 e4       	ldi	r30, 0x45	; 69
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	8f 7e       	andi	r24, 0xEF	; 239
    2596:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, COM21);
    2598:	a5 e4       	ldi	r26, 0x45	; 69
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e5 e4       	ldi	r30, 0x45	; 69
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	8f 7d       	andi	r24, 0xDF	; 223
    25a4:	8c 93       	st	X, r24
    25a6:	2c c0       	rjmp	.+88     	; 0x2600 <TIMER_Timer2_OC2_Init+0xcc>
		break;
	case OC2_TOGGLE:
		SET_BIT(TCCR2, COM20);
    25a8:	a5 e4       	ldi	r26, 0x45	; 69
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	e5 e4       	ldi	r30, 0x45	; 69
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	80 81       	ld	r24, Z
    25b2:	80 61       	ori	r24, 0x10	; 16
    25b4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, COM21);
    25b6:	a5 e4       	ldi	r26, 0x45	; 69
    25b8:	b0 e0       	ldi	r27, 0x00	; 0
    25ba:	e5 e4       	ldi	r30, 0x45	; 69
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 81       	ld	r24, Z
    25c0:	8f 7d       	andi	r24, 0xDF	; 223
    25c2:	8c 93       	st	X, r24
    25c4:	1d c0       	rjmp	.+58     	; 0x2600 <TIMER_Timer2_OC2_Init+0xcc>
		break;
	case OC2_NON_INVERTING:
		CLEAR_BIT(TCCR2, COM20);
    25c6:	a5 e4       	ldi	r26, 0x45	; 69
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	e5 e4       	ldi	r30, 0x45	; 69
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	8f 7e       	andi	r24, 0xEF	; 239
    25d2:	8c 93       	st	X, r24
		SET_BIT(TCCR2, COM21);
    25d4:	a5 e4       	ldi	r26, 0x45	; 69
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	e5 e4       	ldi	r30, 0x45	; 69
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	80 62       	ori	r24, 0x20	; 32
    25e0:	8c 93       	st	X, r24
    25e2:	0e c0       	rjmp	.+28     	; 0x2600 <TIMER_Timer2_OC2_Init+0xcc>
		break;
	case OC2_INVERTING:
		SET_BIT(TCCR2, COM20);
    25e4:	a5 e4       	ldi	r26, 0x45	; 69
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e5 e4       	ldi	r30, 0x45	; 69
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	80 61       	ori	r24, 0x10	; 16
    25f0:	8c 93       	st	X, r24
		SET_BIT(TCCR2, COM21);
    25f2:	a5 e4       	ldi	r26, 0x45	; 69
    25f4:	b0 e0       	ldi	r27, 0x00	; 0
    25f6:	e5 e4       	ldi	r30, 0x45	; 69
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	80 62       	ori	r24, 0x20	; 32
    25fe:	8c 93       	st	X, r24
		break;
	}
}
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	08 95       	ret

0000260c <TIMER_Timer2_OV_EnableInterrupt>:

void TIMER_Timer2_OV_EnableInterrupt(void){
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TOIE2);
    2614:	a9 e5       	ldi	r26, 0x59	; 89
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	e9 e5       	ldi	r30, 0x59	; 89
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	80 64       	ori	r24, 0x40	; 64
    2620:	8c 93       	st	X, r24
}
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	08 95       	ret

00002628 <TIMER_Timer2_OV_DisableInterrupt>:

void TIMER_Timer2_OV_DisableInterrupt(void){
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, TOIE2);
    2630:	a9 e5       	ldi	r26, 0x59	; 89
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	e9 e5       	ldi	r30, 0x59	; 89
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	8f 7b       	andi	r24, 0xBF	; 191
    263c:	8c 93       	st	X, r24
}
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <TIMER_Timer2_OC_EnableInterrupt>:

void TIMER_Timer2_OC_EnableInterrupt(void){
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE2);
    264c:	a9 e5       	ldi	r26, 0x59	; 89
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	e9 e5       	ldi	r30, 0x59	; 89
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	80 68       	ori	r24, 0x80	; 128
    2658:	8c 93       	st	X, r24
}
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <TIMER_Timer2_OC_DisableInterrupt>:

void TIMER_Timer2_OC_DisableInterrupt(void){
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, OCIE2);
    2668:	a9 e5       	ldi	r26, 0x59	; 89
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	e9 e5       	ldi	r30, 0x59	; 89
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	8f 77       	andi	r24, 0x7F	; 127
    2674:	8c 93       	st	X, r24
}
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	08 95       	ret

0000267c <TIMER_Timer2_OV_SetCallBack>:

void TIMER_Timer2_OV_SetCallBack(void (*local_function_pointer) (void)){
    267c:	df 93       	push	r29
    267e:	cf 93       	push	r28
    2680:	00 d0       	rcall	.+0      	; 0x2682 <TIMER_Timer2_OV_SetCallBack+0x6>
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	9a 83       	std	Y+2, r25	; 0x02
    2688:	89 83       	std	Y+1, r24	; 0x01
	Timer2_OVF_function_pointer = local_function_pointer;
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	90 93 8b 01 	sts	0x018B, r25
    2692:	80 93 8a 01 	sts	0x018A, r24
}
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	cf 91       	pop	r28
    269c:	df 91       	pop	r29
    269e:	08 95       	ret

000026a0 <TIMER_Timer2_OC_SetCallBack>:
void TIMER_Timer2_OC_SetCallBack(void (*local_function_pointer) (void)){
    26a0:	df 93       	push	r29
    26a2:	cf 93       	push	r28
    26a4:	00 d0       	rcall	.+0      	; 0x26a6 <TIMER_Timer2_OC_SetCallBack+0x6>
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    26aa:	9a 83       	std	Y+2, r25	; 0x02
    26ac:	89 83       	std	Y+1, r24	; 0x01
	Timer2_COMP_function_pointer = local_function_pointer;
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	90 93 8d 01 	sts	0x018D, r25
    26b6:	80 93 8c 01 	sts	0x018C, r24
}
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <TIMER_Timer2_OV_Polling_Wait>:

void TIMER_Timer2_OV_Polling_Wait(void){
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
	TIMER_TIFR_ClearFlag(TOV2);		// Clear TOV2 initially.
    26cc:	86 e0       	ldi	r24, 0x06	; 6
    26ce:	0e 94 0a 14 	call	0x2814	; 0x2814 <TIMER_TIFR_ClearFlag>
	while(!GET_BIT(TIFR, TOV2));	// While TOV2 flag is 0 (Overflow hasn't been reached yet), stay here.=
    26d2:	e8 e5       	ldi	r30, 0x58	; 88
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	82 95       	swap	r24
    26da:	86 95       	lsr	r24
    26dc:	86 95       	lsr	r24
    26de:	83 70       	andi	r24, 0x03	; 3
    26e0:	88 2f       	mov	r24, r24
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	81 70       	andi	r24, 0x01	; 1
    26e6:	90 70       	andi	r25, 0x00	; 0
    26e8:	00 97       	sbiw	r24, 0x00	; 0
    26ea:	99 f3       	breq	.-26     	; 0x26d2 <TIMER_Timer2_OV_Polling_Wait+0xe>
}
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <TIMER_Timer2_OC_Polling_Wait>:

void TIMER_Timer2_OC_Polling_Wait(void){
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
	TIMER_TIFR_ClearFlag(OCF2);		// Clear OCF2 initially.
    26fa:	87 e0       	ldi	r24, 0x07	; 7
    26fc:	0e 94 0a 14 	call	0x2814	; 0x2814 <TIMER_TIFR_ClearFlag>
	while(!GET_BIT(TIFR, OCF2));	// While OCF2 flag is 0 (TCNT2 has not matched OCR2 yet), stay here.
    2700:	e8 e5       	ldi	r30, 0x58	; 88
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
    2706:	88 23       	and	r24, r24
    2708:	dc f7       	brge	.-10     	; 0x2700 <TIMER_Timer2_OC_Polling_Wait+0xe>
}
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <TIMER_Timer2_Stop>:

void TIMER_Timer2_Stop(void){
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR2, CS20);
    2718:	a5 e4       	ldi	r26, 0x45	; 69
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	e5 e4       	ldi	r30, 0x45	; 69
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	8e 7f       	andi	r24, 0xFE	; 254
    2724:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2, CS21);
    2726:	a5 e4       	ldi	r26, 0x45	; 69
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	e5 e4       	ldi	r30, 0x45	; 69
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	8d 7f       	andi	r24, 0xFD	; 253
    2732:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2, CS22);
    2734:	a5 e4       	ldi	r26, 0x45	; 69
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e5 e4       	ldi	r30, 0x45	; 69
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	8b 7f       	andi	r24, 0xFB	; 251
    2740:	8c 93       	st	X, r24
}
    2742:	cf 91       	pop	r28
    2744:	df 91       	pop	r29
    2746:	08 95       	ret

00002748 <__vector_4>:
 * __vector_5(void) -> Timer 2 Overflow Interrupt.
 *
 */

void __vector_4(void) __attribute__ ((signal, used, externally_visible));
void __vector_4 (void){
    2748:	1f 92       	push	r1
    274a:	0f 92       	push	r0
    274c:	0f b6       	in	r0, 0x3f	; 63
    274e:	0f 92       	push	r0
    2750:	11 24       	eor	r1, r1
    2752:	2f 93       	push	r18
    2754:	3f 93       	push	r19
    2756:	4f 93       	push	r20
    2758:	5f 93       	push	r21
    275a:	6f 93       	push	r22
    275c:	7f 93       	push	r23
    275e:	8f 93       	push	r24
    2760:	9f 93       	push	r25
    2762:	af 93       	push	r26
    2764:	bf 93       	push	r27
    2766:	ef 93       	push	r30
    2768:	ff 93       	push	r31
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
	if (Timer2_COMP_function_pointer){		// Check if the function pointer is not NULL
    2772:	80 91 8c 01 	lds	r24, 0x018C
    2776:	90 91 8d 01 	lds	r25, 0x018D
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	29 f0       	breq	.+10     	; 0x2788 <__vector_4+0x40>
		Timer2_COMP_function_pointer();		// Execute the function
    277e:	e0 91 8c 01 	lds	r30, 0x018C
    2782:	f0 91 8d 01 	lds	r31, 0x018D
    2786:	09 95       	icall
	}
}
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	ff 91       	pop	r31
    278e:	ef 91       	pop	r30
    2790:	bf 91       	pop	r27
    2792:	af 91       	pop	r26
    2794:	9f 91       	pop	r25
    2796:	8f 91       	pop	r24
    2798:	7f 91       	pop	r23
    279a:	6f 91       	pop	r22
    279c:	5f 91       	pop	r21
    279e:	4f 91       	pop	r20
    27a0:	3f 91       	pop	r19
    27a2:	2f 91       	pop	r18
    27a4:	0f 90       	pop	r0
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	0f 90       	pop	r0
    27aa:	1f 90       	pop	r1
    27ac:	18 95       	reti

000027ae <__vector_5>:

void __vector_5(void) __attribute__ ((signal, used, externally_visible));
void __vector_5 (void){
    27ae:	1f 92       	push	r1
    27b0:	0f 92       	push	r0
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	0f 92       	push	r0
    27b6:	11 24       	eor	r1, r1
    27b8:	2f 93       	push	r18
    27ba:	3f 93       	push	r19
    27bc:	4f 93       	push	r20
    27be:	5f 93       	push	r21
    27c0:	6f 93       	push	r22
    27c2:	7f 93       	push	r23
    27c4:	8f 93       	push	r24
    27c6:	9f 93       	push	r25
    27c8:	af 93       	push	r26
    27ca:	bf 93       	push	r27
    27cc:	ef 93       	push	r30
    27ce:	ff 93       	push	r31
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
	if (Timer2_OVF_function_pointer){		// Check if the function pointer is not NULL
    27d8:	80 91 8a 01 	lds	r24, 0x018A
    27dc:	90 91 8b 01 	lds	r25, 0x018B
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	29 f0       	breq	.+10     	; 0x27ee <__vector_5+0x40>
		Timer2_OVF_function_pointer();		// Execute the function
    27e4:	e0 91 8a 01 	lds	r30, 0x018A
    27e8:	f0 91 8b 01 	lds	r31, 0x018B
    27ec:	09 95       	icall
	}
}
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	ff 91       	pop	r31
    27f4:	ef 91       	pop	r30
    27f6:	bf 91       	pop	r27
    27f8:	af 91       	pop	r26
    27fa:	9f 91       	pop	r25
    27fc:	8f 91       	pop	r24
    27fe:	7f 91       	pop	r23
    2800:	6f 91       	pop	r22
    2802:	5f 91       	pop	r21
    2804:	4f 91       	pop	r20
    2806:	3f 91       	pop	r19
    2808:	2f 91       	pop	r18
    280a:	0f 90       	pop	r0
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	0f 90       	pop	r0
    2810:	1f 90       	pop	r1
    2812:	18 95       	reti

00002814 <TIMER_TIFR_ClearFlag>:

/********************************\
*********** Functions ************
\********************************/

void TIMER_TIFR_ClearFlag(u8_t flag){
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	0f 92       	push	r0
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TIFR, flag);			// According to the datasheet, to clear any flag in TIFR, write a logic one to it.
    2820:	a8 e5       	ldi	r26, 0x58	; 88
    2822:	b0 e0       	ldi	r27, 0x00	; 0
    2824:	e8 e5       	ldi	r30, 0x58	; 88
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	80 81       	ld	r24, Z
    282a:	48 2f       	mov	r20, r24
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	28 2f       	mov	r18, r24
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	02 2e       	mov	r0, r18
    2838:	02 c0       	rjmp	.+4      	; 0x283e <TIMER_TIFR_ClearFlag+0x2a>
    283a:	88 0f       	add	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	0a 94       	dec	r0
    2840:	e2 f7       	brpl	.-8      	; 0x283a <TIMER_TIFR_ClearFlag+0x26>
    2842:	84 2b       	or	r24, r20
    2844:	8c 93       	st	X, r24
}
    2846:	0f 90       	pop	r0
    2848:	cf 91       	pop	r28
    284a:	df 91       	pop	r29
    284c:	08 95       	ret

0000284e <SPI_Init>:

u8_t SPI_mode;
u8_t SPI_CE_port;
u8_t SPI_CE_pin;

void SPI_Init(SPI_MASTER_SLAVE mode) {
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	0f 92       	push	r0
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(SPCR, SPE);  // Enable SPI
    285a:	ad e2       	ldi	r26, 0x2D	; 45
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	ed e2       	ldi	r30, 0x2D	; 45
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	80 64       	ori	r24, 0x40	; 64
    2866:	8c 93       	st	X, r24
    SPI_mode = mode;
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	80 93 a8 01 	sts	0x01A8, r24
    if (mode == SLAVE) {
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	88 23       	and	r24, r24
    2872:	e1 f4       	brne	.+56     	; 0x28ac <SPI_Init+0x5e>
        CLEAR_BIT(SPCR, MSTR);  // Set as Slave
    2874:	ad e2       	ldi	r26, 0x2D	; 45
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	ed e2       	ldi	r30, 0x2D	; 45
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	8f 7e       	andi	r24, 0xEF	; 239
    2880:	8c 93       	st	X, r24
        DIO_SetPinDirection(SCK_PORT, SCK, PIN_INPUT);   // SCK: Input
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	67 e0       	ldi	r22, 0x07	; 7
    2886:	40 e0       	ldi	r20, 0x00	; 0
    2888:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
        DIO_SetPinDirection(MOSI_PORT, MOSI, PIN_INPUT); // MOSI: Input
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	65 e0       	ldi	r22, 0x05	; 5
    2890:	40 e0       	ldi	r20, 0x00	; 0
    2892:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
        DIO_SetPinDirection(MISO_PORT, MISO, PIN_OUTPUT); // MISO: Output
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	66 e0       	ldi	r22, 0x06	; 6
    289a:	41 e0       	ldi	r20, 0x01	; 1
    289c:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
        DIO_SetPinDirection(SS_PORT, SS, PIN_INPUT);     // SS: Input
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	64 e0       	ldi	r22, 0x04	; 4
    28a4:	40 e0       	ldi	r20, 0x00	; 0
    28a6:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
    28aa:	23 c0       	rjmp	.+70     	; 0x28f2 <SPI_Init+0xa4>
    } else if (mode == MASTER) {
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	81 30       	cpi	r24, 0x01	; 1
    28b0:	01 f5       	brne	.+64     	; 0x28f2 <SPI_Init+0xa4>
        SET_BIT(SPCR, MSTR);  // Set as Master
    28b2:	ad e2       	ldi	r26, 0x2D	; 45
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	ed e2       	ldi	r30, 0x2D	; 45
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	80 61       	ori	r24, 0x10	; 16
    28be:	8c 93       	st	X, r24
        DIO_SetPinDirection(SCK_PORT, SCK, PIN_OUTPUT);  // SCK: Output
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	67 e0       	ldi	r22, 0x07	; 7
    28c4:	41 e0       	ldi	r20, 0x01	; 1
    28c6:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
        DIO_SetPinDirection(MOSI_PORT, MOSI, PIN_OUTPUT); // MOSI: Output
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	65 e0       	ldi	r22, 0x05	; 5
    28ce:	41 e0       	ldi	r20, 0x01	; 1
    28d0:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
        DIO_SetPinDirection(MISO_PORT, MISO, PIN_INPUT); // MISO: Input
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	66 e0       	ldi	r22, 0x06	; 6
    28d8:	40 e0       	ldi	r20, 0x00	; 0
    28da:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
        DIO_SetPinDirection(SS_PORT, SS, PIN_OUTPUT);    // SS: Output
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	64 e0       	ldi	r22, 0x04	; 4
    28e2:	41 e0       	ldi	r20, 0x01	; 1
    28e4:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
        DIO_SetPinValue(SS_PORT, SS, PIN_HIGH);         // Ensure SS is high initially
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	64 e0       	ldi	r22, 0x04	; 4
    28ec:	41 e0       	ldi	r20, 0x01	; 1
    28ee:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
    }
}
    28f2:	0f 90       	pop	r0
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	08 95       	ret

000028fa <SPI_Transmit>:

void SPI_Transmit(u8_t data) {
    28fa:	df 93       	push	r29
    28fc:	cf 93       	push	r28
    28fe:	0f 92       	push	r0
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
    2904:	89 83       	std	Y+1, r24	; 0x01
    if (SPI_mode == MASTER) {
    2906:	80 91 a8 01 	lds	r24, 0x01A8
    290a:	81 30       	cpi	r24, 0x01	; 1
    290c:	29 f4       	brne	.+10     	; 0x2918 <SPI_Transmit+0x1e>
        DIO_SetPinValue(SS_PORT, SS, PIN_LOW);  // Pull SS low
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	64 e0       	ldi	r22, 0x04	; 4
    2912:	40 e0       	ldi	r20, 0x00	; 0
    2914:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
    }

    SPDR = data;  // Load data into SPI data register
    2918:	ef e2       	ldi	r30, 0x2F	; 47
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	89 81       	ldd	r24, Y+1	; 0x01
    291e:	80 83       	st	Z, r24
    while (!(GET_BIT(SPSR, SPIF)));  // Wait for transmission to complete
    2920:	ee e2       	ldi	r30, 0x2E	; 46
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	88 23       	and	r24, r24
    2928:	dc f7       	brge	.-10     	; 0x2920 <SPI_Transmit+0x26>

    if (SPI_mode == MASTER) {
    292a:	80 91 a8 01 	lds	r24, 0x01A8
    292e:	81 30       	cpi	r24, 0x01	; 1
    2930:	29 f4       	brne	.+10     	; 0x293c <SPI_Transmit+0x42>
        DIO_SetPinValue(SS_PORT, SS, PIN_HIGH);  // Release SS
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	64 e0       	ldi	r22, 0x04	; 4
    2936:	41 e0       	ldi	r20, 0x01	; 1
    2938:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
    }
}
    293c:	0f 90       	pop	r0
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	08 95       	ret

00002944 <SPI_Receive>:

u8_t SPI_Receive(void) {
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	0f 92       	push	r0
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    if (SPI_mode == MASTER) {
    294e:	80 91 a8 01 	lds	r24, 0x01A8
    2952:	81 30       	cpi	r24, 0x01	; 1
    2954:	49 f4       	brne	.+18     	; 0x2968 <SPI_Receive+0x24>
        DIO_SetPinValue(SS_PORT, SS, PIN_LOW);  // Pull SS low
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	64 e0       	ldi	r22, 0x04	; 4
    295a:	40 e0       	ldi	r20, 0x00	; 0
    295c:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
        SPDR = 0xFF;  // Send dummy data to generate clock
    2960:	ef e2       	ldi	r30, 0x2F	; 47
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	8f ef       	ldi	r24, 0xFF	; 255
    2966:	80 83       	st	Z, r24
    }

    while (!(GET_BIT(SPSR, SPIF)));  // Wait for reception to complete
    2968:	ee e2       	ldi	r30, 0x2E	; 46
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	88 23       	and	r24, r24
    2970:	dc f7       	brge	.-10     	; 0x2968 <SPI_Receive+0x24>
    u8_t received_data = SPDR;      // Read received data
    2972:	ef e2       	ldi	r30, 0x2F	; 47
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	89 83       	std	Y+1, r24	; 0x01

    if (SPI_mode == MASTER) {
    297a:	80 91 a8 01 	lds	r24, 0x01A8
    297e:	81 30       	cpi	r24, 0x01	; 1
    2980:	29 f4       	brne	.+10     	; 0x298c <SPI_Receive+0x48>
        DIO_SetPinValue(SS_PORT, SS, PIN_HIGH);  // Release SS
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	64 e0       	ldi	r22, 0x04	; 4
    2986:	41 e0       	ldi	r20, 0x01	; 1
    2988:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
    }

    return received_data;
    298c:	89 81       	ldd	r24, Y+1	; 0x01
}
    298e:	0f 90       	pop	r0
    2990:	cf 91       	pop	r28
    2992:	df 91       	pop	r29
    2994:	08 95       	ret

00002996 <SPI_Slave_CE_SelectPin>:


void SPI_Slave_CE_SelectPin(u8_t port, u8_t pin) {
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	00 d0       	rcall	.+0      	; 0x299c <SPI_Slave_CE_SelectPin+0x6>
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
    29a0:	89 83       	std	Y+1, r24	; 0x01
    29a2:	6a 83       	std	Y+2, r22	; 0x02
    SPI_CE_port = port;
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	80 93 a9 01 	sts	0x01A9, r24
    SPI_CE_pin = pin;
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	80 93 a7 01 	sts	0x01A7, r24
    DIO_SetPinDirection(SPI_CE_port, SPI_CE_pin, PIN_OUTPUT);  // Set CE as output
    29b0:	80 91 a9 01 	lds	r24, 0x01A9
    29b4:	90 91 a7 01 	lds	r25, 0x01A7
    29b8:	69 2f       	mov	r22, r25
    29ba:	41 e0       	ldi	r20, 0x01	; 1
    29bc:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
}
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	cf 91       	pop	r28
    29c6:	df 91       	pop	r29
    29c8:	08 95       	ret

000029ca <INTERRUPT_EXTERNAL_INT0_EnableInterrupt>:

/********************************\
*********** Functions ************
\********************************/

void INTERRUPT_EXTERNAL_INT0_EnableInterrupt(void){
    29ca:	df 93       	push	r29
    29cc:	cf 93       	push	r28
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR, INT0_FLAG);
    29d2:	ab e5       	ldi	r26, 0x5B	; 91
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	eb e5       	ldi	r30, 0x5B	; 91
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	80 64       	ori	r24, 0x40	; 64
    29de:	8c 93       	st	X, r24
}
    29e0:	cf 91       	pop	r28
    29e2:	df 91       	pop	r29
    29e4:	08 95       	ret

000029e6 <INTERRUPT_EXTERNAL_INT0_DisableInterrupt>:

void INTERRUPT_EXTERNAL_INT0_DisableInterrupt(void){
    29e6:	df 93       	push	r29
    29e8:	cf 93       	push	r28
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR, INT0_FLAG);
    29ee:	ab e5       	ldi	r26, 0x5B	; 91
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	eb e5       	ldi	r30, 0x5B	; 91
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	8f 7b       	andi	r24, 0xBF	; 191
    29fa:	8c 93       	st	X, r24
}
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <INTERRUPT_EXTERNAL_INT1_EnableInterrupt>:

void INTERRUPT_EXTERNAL_INT1_EnableInterrupt(void){
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR, INT1_FLAG);
    2a0a:	ab e5       	ldi	r26, 0x5B	; 91
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	eb e5       	ldi	r30, 0x5B	; 91
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	80 68       	ori	r24, 0x80	; 128
    2a16:	8c 93       	st	X, r24
}
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	08 95       	ret

00002a1e <INTERRUPT_EXTERNAL_INT1_DisableInterrupt>:

void INTERRUPT_EXTERNAL_INT1_DisableInterrupt(void){
    2a1e:	df 93       	push	r29
    2a20:	cf 93       	push	r28
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR, INT1_FLAG);
    2a26:	ab e5       	ldi	r26, 0x5B	; 91
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	eb e5       	ldi	r30, 0x5B	; 91
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	8f 77       	andi	r24, 0x7F	; 127
    2a32:	8c 93       	st	X, r24
}
    2a34:	cf 91       	pop	r28
    2a36:	df 91       	pop	r29
    2a38:	08 95       	ret

00002a3a <INTERRUPT_EXTERNAL_INT2_EnableInterrupt>:

void INTERRUPT_EXTERNAL_INT2_EnableInterrupt(void){
    2a3a:	df 93       	push	r29
    2a3c:	cf 93       	push	r28
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR, INT2_FLAG);
    2a42:	ab e5       	ldi	r26, 0x5B	; 91
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	eb e5       	ldi	r30, 0x5B	; 91
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	80 62       	ori	r24, 0x20	; 32
    2a4e:	8c 93       	st	X, r24
}
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	08 95       	ret

00002a56 <INTERRUPT_EXTERNAL_INT2_DisableInterrupt>:

void INTERRUPT_EXTERNAL_INT2_DisableInterrupt(void){
    2a56:	df 93       	push	r29
    2a58:	cf 93       	push	r28
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR, INT2_FLAG);
    2a5e:	ab e5       	ldi	r26, 0x5B	; 91
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	eb e5       	ldi	r30, 0x5B	; 91
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	8f 7d       	andi	r24, 0xDF	; 223
    2a6a:	8c 93       	st	X, r24
}
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	08 95       	ret

00002a72 <INTERRUPT_EXTERNAL_INT0_ControlSense>:

void INTERRUPT_EXTERNAL_INT0_ControlSense(INT0_or_INT1_sense_control event){
    2a72:	df 93       	push	r29
    2a74:	cf 93       	push	r28
    2a76:	00 d0       	rcall	.+0      	; 0x2a78 <INTERRUPT_EXTERNAL_INT0_ControlSense+0x6>
    2a78:	0f 92       	push	r0
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
    2a7e:	89 83       	std	Y+1, r24	; 0x01
	switch (event){
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	28 2f       	mov	r18, r24
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	3b 83       	std	Y+3, r19	; 0x03
    2a88:	2a 83       	std	Y+2, r18	; 0x02
    2a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8e:	81 30       	cpi	r24, 0x01	; 1
    2a90:	91 05       	cpc	r25, r1
    2a92:	21 f1       	breq	.+72     	; 0x2adc <INTERRUPT_EXTERNAL_INT0_ControlSense+0x6a>
    2a94:	2a 81       	ldd	r18, Y+2	; 0x02
    2a96:	3b 81       	ldd	r19, Y+3	; 0x03
    2a98:	22 30       	cpi	r18, 0x02	; 2
    2a9a:	31 05       	cpc	r19, r1
    2a9c:	2c f4       	brge	.+10     	; 0x2aa8 <INTERRUPT_EXTERNAL_INT0_ControlSense+0x36>
    2a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa2:	00 97       	sbiw	r24, 0x00	; 0
    2aa4:	61 f0       	breq	.+24     	; 0x2abe <INTERRUPT_EXTERNAL_INT0_ControlSense+0x4c>
    2aa6:	46 c0       	rjmp	.+140    	; 0x2b34 <INTERRUPT_EXTERNAL_INT0_ControlSense+0xc2>
    2aa8:	2a 81       	ldd	r18, Y+2	; 0x02
    2aaa:	3b 81       	ldd	r19, Y+3	; 0x03
    2aac:	22 30       	cpi	r18, 0x02	; 2
    2aae:	31 05       	cpc	r19, r1
    2ab0:	21 f1       	breq	.+72     	; 0x2afa <INTERRUPT_EXTERNAL_INT0_ControlSense+0x88>
    2ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab6:	83 30       	cpi	r24, 0x03	; 3
    2ab8:	91 05       	cpc	r25, r1
    2aba:	71 f1       	breq	.+92     	; 0x2b18 <INTERRUPT_EXTERNAL_INT0_ControlSense+0xa6>
    2abc:	3b c0       	rjmp	.+118    	; 0x2b34 <INTERRUPT_EXTERNAL_INT0_ControlSense+0xc2>
	case INT0_INT1_LOW_LEVEL:
		CLEAR_BIT(MCUCR, ISC00);
    2abe:	a5 e5       	ldi	r26, 0x55	; 85
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	e5 e5       	ldi	r30, 0x55	; 85
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	8e 7f       	andi	r24, 0xFE	; 254
    2aca:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR, ISC01);
    2acc:	a5 e5       	ldi	r26, 0x55	; 85
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	e5 e5       	ldi	r30, 0x55	; 85
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	8d 7f       	andi	r24, 0xFD	; 253
    2ad8:	8c 93       	st	X, r24
    2ada:	2c c0       	rjmp	.+88     	; 0x2b34 <INTERRUPT_EXTERNAL_INT0_ControlSense+0xc2>
		break;
	case INT0_INT1_ANY_CHANGE:
		SET_BIT(MCUCR, ISC00);
    2adc:	a5 e5       	ldi	r26, 0x55	; 85
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	e5 e5       	ldi	r30, 0x55	; 85
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	81 60       	ori	r24, 0x01	; 1
    2ae8:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR, ISC01);
    2aea:	a5 e5       	ldi	r26, 0x55	; 85
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	e5 e5       	ldi	r30, 0x55	; 85
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	80 81       	ld	r24, Z
    2af4:	8d 7f       	andi	r24, 0xFD	; 253
    2af6:	8c 93       	st	X, r24
    2af8:	1d c0       	rjmp	.+58     	; 0x2b34 <INTERRUPT_EXTERNAL_INT0_ControlSense+0xc2>
		break;
	case INT0_INT1_FALLING_EDGE:
		CLEAR_BIT(MCUCR, ISC00);
    2afa:	a5 e5       	ldi	r26, 0x55	; 85
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	e5 e5       	ldi	r30, 0x55	; 85
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	80 81       	ld	r24, Z
    2b04:	8e 7f       	andi	r24, 0xFE	; 254
    2b06:	8c 93       	st	X, r24
		SET_BIT(MCUCR, ISC01);
    2b08:	a5 e5       	ldi	r26, 0x55	; 85
    2b0a:	b0 e0       	ldi	r27, 0x00	; 0
    2b0c:	e5 e5       	ldi	r30, 0x55	; 85
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	80 81       	ld	r24, Z
    2b12:	82 60       	ori	r24, 0x02	; 2
    2b14:	8c 93       	st	X, r24
    2b16:	0e c0       	rjmp	.+28     	; 0x2b34 <INTERRUPT_EXTERNAL_INT0_ControlSense+0xc2>
		break;
	case INT0_INT1_RISING_EDGE:
		SET_BIT(MCUCR, ISC00);
    2b18:	a5 e5       	ldi	r26, 0x55	; 85
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	e5 e5       	ldi	r30, 0x55	; 85
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	81 60       	ori	r24, 0x01	; 1
    2b24:	8c 93       	st	X, r24
		SET_BIT(MCUCR, ISC01);
    2b26:	a5 e5       	ldi	r26, 0x55	; 85
    2b28:	b0 e0       	ldi	r27, 0x00	; 0
    2b2a:	e5 e5       	ldi	r30, 0x55	; 85
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	80 81       	ld	r24, Z
    2b30:	82 60       	ori	r24, 0x02	; 2
    2b32:	8c 93       	st	X, r24
		break;
	}
}
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	cf 91       	pop	r28
    2b3c:	df 91       	pop	r29
    2b3e:	08 95       	ret

00002b40 <INTERRUPT_EXTERNAL_INT1_ControlSense>:
void INTERRUPT_EXTERNAL_INT1_ControlSense(INT0_or_INT1_sense_control event){
    2b40:	df 93       	push	r29
    2b42:	cf 93       	push	r28
    2b44:	00 d0       	rcall	.+0      	; 0x2b46 <INTERRUPT_EXTERNAL_INT1_ControlSense+0x6>
    2b46:	0f 92       	push	r0
    2b48:	cd b7       	in	r28, 0x3d	; 61
    2b4a:	de b7       	in	r29, 0x3e	; 62
    2b4c:	89 83       	std	Y+1, r24	; 0x01
	switch (event){
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	28 2f       	mov	r18, r24
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	3b 83       	std	Y+3, r19	; 0x03
    2b56:	2a 83       	std	Y+2, r18	; 0x02
    2b58:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b5c:	81 30       	cpi	r24, 0x01	; 1
    2b5e:	91 05       	cpc	r25, r1
    2b60:	21 f1       	breq	.+72     	; 0x2baa <INTERRUPT_EXTERNAL_INT1_ControlSense+0x6a>
    2b62:	2a 81       	ldd	r18, Y+2	; 0x02
    2b64:	3b 81       	ldd	r19, Y+3	; 0x03
    2b66:	22 30       	cpi	r18, 0x02	; 2
    2b68:	31 05       	cpc	r19, r1
    2b6a:	2c f4       	brge	.+10     	; 0x2b76 <INTERRUPT_EXTERNAL_INT1_ControlSense+0x36>
    2b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b70:	00 97       	sbiw	r24, 0x00	; 0
    2b72:	61 f0       	breq	.+24     	; 0x2b8c <INTERRUPT_EXTERNAL_INT1_ControlSense+0x4c>
    2b74:	46 c0       	rjmp	.+140    	; 0x2c02 <INTERRUPT_EXTERNAL_INT1_ControlSense+0xc2>
    2b76:	2a 81       	ldd	r18, Y+2	; 0x02
    2b78:	3b 81       	ldd	r19, Y+3	; 0x03
    2b7a:	22 30       	cpi	r18, 0x02	; 2
    2b7c:	31 05       	cpc	r19, r1
    2b7e:	21 f1       	breq	.+72     	; 0x2bc8 <INTERRUPT_EXTERNAL_INT1_ControlSense+0x88>
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	9b 81       	ldd	r25, Y+3	; 0x03
    2b84:	83 30       	cpi	r24, 0x03	; 3
    2b86:	91 05       	cpc	r25, r1
    2b88:	71 f1       	breq	.+92     	; 0x2be6 <INTERRUPT_EXTERNAL_INT1_ControlSense+0xa6>
    2b8a:	3b c0       	rjmp	.+118    	; 0x2c02 <INTERRUPT_EXTERNAL_INT1_ControlSense+0xc2>
	case INT0_INT1_LOW_LEVEL:
		CLEAR_BIT(MCUCR, ISC10);
    2b8c:	a5 e5       	ldi	r26, 0x55	; 85
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	e5 e5       	ldi	r30, 0x55	; 85
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	8b 7f       	andi	r24, 0xFB	; 251
    2b98:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR, ISC11);
    2b9a:	a5 e5       	ldi	r26, 0x55	; 85
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	e5 e5       	ldi	r30, 0x55	; 85
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	87 7f       	andi	r24, 0xF7	; 247
    2ba6:	8c 93       	st	X, r24
    2ba8:	2c c0       	rjmp	.+88     	; 0x2c02 <INTERRUPT_EXTERNAL_INT1_ControlSense+0xc2>
		break;
	case INT0_INT1_ANY_CHANGE:
		SET_BIT(MCUCR, ISC10);
    2baa:	a5 e5       	ldi	r26, 0x55	; 85
    2bac:	b0 e0       	ldi	r27, 0x00	; 0
    2bae:	e5 e5       	ldi	r30, 0x55	; 85
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	84 60       	ori	r24, 0x04	; 4
    2bb6:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR, ISC11);
    2bb8:	a5 e5       	ldi	r26, 0x55	; 85
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	e5 e5       	ldi	r30, 0x55	; 85
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	87 7f       	andi	r24, 0xF7	; 247
    2bc4:	8c 93       	st	X, r24
    2bc6:	1d c0       	rjmp	.+58     	; 0x2c02 <INTERRUPT_EXTERNAL_INT1_ControlSense+0xc2>
		break;
	case INT0_INT1_FALLING_EDGE:
		CLEAR_BIT(MCUCR, ISC10);
    2bc8:	a5 e5       	ldi	r26, 0x55	; 85
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	e5 e5       	ldi	r30, 0x55	; 85
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	8b 7f       	andi	r24, 0xFB	; 251
    2bd4:	8c 93       	st	X, r24
		SET_BIT(MCUCR, ISC11);
    2bd6:	a5 e5       	ldi	r26, 0x55	; 85
    2bd8:	b0 e0       	ldi	r27, 0x00	; 0
    2bda:	e5 e5       	ldi	r30, 0x55	; 85
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	80 81       	ld	r24, Z
    2be0:	88 60       	ori	r24, 0x08	; 8
    2be2:	8c 93       	st	X, r24
    2be4:	0e c0       	rjmp	.+28     	; 0x2c02 <INTERRUPT_EXTERNAL_INT1_ControlSense+0xc2>
		break;
	case INT0_INT1_RISING_EDGE:
		SET_BIT(MCUCR, ISC10);
    2be6:	a5 e5       	ldi	r26, 0x55	; 85
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	e5 e5       	ldi	r30, 0x55	; 85
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	80 81       	ld	r24, Z
    2bf0:	84 60       	ori	r24, 0x04	; 4
    2bf2:	8c 93       	st	X, r24
		SET_BIT(MCUCR, ISC11);
    2bf4:	a5 e5       	ldi	r26, 0x55	; 85
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	e5 e5       	ldi	r30, 0x55	; 85
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	88 60       	ori	r24, 0x08	; 8
    2c00:	8c 93       	st	X, r24
		break;
	}
}
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	cf 91       	pop	r28
    2c0a:	df 91       	pop	r29
    2c0c:	08 95       	ret

00002c0e <INTERRUPT_EXTERNAL_INT2_ControlSense>:
void INTERRUPT_EXTERNAL_INT2_ControlSense(INT2_sense_control mode){
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <INTERRUPT_EXTERNAL_INT2_ControlSense+0x6>
    2c14:	0f 92       	push	r0
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    2c1a:	89 83       	std	Y+1, r24	; 0x01
	switch (mode){
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	28 2f       	mov	r18, r24
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	3b 83       	std	Y+3, r19	; 0x03
    2c24:	2a 83       	std	Y+2, r18	; 0x02
    2c26:	8a 81       	ldd	r24, Y+2	; 0x02
    2c28:	9b 81       	ldd	r25, Y+3	; 0x03
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	31 f0       	breq	.+12     	; 0x2c3a <INTERRUPT_EXTERNAL_INT2_ControlSense+0x2c>
    2c2e:	2a 81       	ldd	r18, Y+2	; 0x02
    2c30:	3b 81       	ldd	r19, Y+3	; 0x03
    2c32:	21 30       	cpi	r18, 0x01	; 1
    2c34:	31 05       	cpc	r19, r1
    2c36:	49 f0       	breq	.+18     	; 0x2c4a <INTERRUPT_EXTERNAL_INT2_ControlSense+0x3c>
    2c38:	0f c0       	rjmp	.+30     	; 0x2c58 <INTERRUPT_EXTERNAL_INT2_ControlSense+0x4a>
	case INT2_FALLING_EDGE:
		CLEAR_BIT(MCUCSR, ISC2);
    2c3a:	a4 e5       	ldi	r26, 0x54	; 84
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	e4 e5       	ldi	r30, 0x54	; 84
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	80 81       	ld	r24, Z
    2c44:	8f 7b       	andi	r24, 0xBF	; 191
    2c46:	8c 93       	st	X, r24
    2c48:	07 c0       	rjmp	.+14     	; 0x2c58 <INTERRUPT_EXTERNAL_INT2_ControlSense+0x4a>
		break;
	case INT2_RISING_EDGE:
		SET_BIT(MCUCSR, ISC2);
    2c4a:	a4 e5       	ldi	r26, 0x54	; 84
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	e4 e5       	ldi	r30, 0x54	; 84
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	80 64       	ori	r24, 0x40	; 64
    2c56:	8c 93       	st	X, r24
		break;
	}
}
    2c58:	0f 90       	pop	r0
    2c5a:	0f 90       	pop	r0
    2c5c:	0f 90       	pop	r0
    2c5e:	cf 91       	pop	r28
    2c60:	df 91       	pop	r29
    2c62:	08 95       	ret

00002c64 <INTERRUPT_EXTERNAL_INT0_SetCallBack>:

void INTERRUPT_EXTERNAL_INT0_SetCallBack(void (*local_function_pointer) (void)){
    2c64:	df 93       	push	r29
    2c66:	cf 93       	push	r28
    2c68:	00 d0       	rcall	.+0      	; 0x2c6a <INTERRUPT_EXTERNAL_INT0_SetCallBack+0x6>
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
    2c6e:	9a 83       	std	Y+2, r25	; 0x02
    2c70:	89 83       	std	Y+1, r24	; 0x01
	INT0_function_pointer = local_function_pointer;
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	9a 81       	ldd	r25, Y+2	; 0x02
    2c76:	90 93 8f 01 	sts	0x018F, r25
    2c7a:	80 93 8e 01 	sts	0x018E, r24
}
    2c7e:	0f 90       	pop	r0
    2c80:	0f 90       	pop	r0
    2c82:	cf 91       	pop	r28
    2c84:	df 91       	pop	r29
    2c86:	08 95       	ret

00002c88 <INTERRUPT_EXTERNAL_INT1_SetCallBack>:

void INTERRUPT_EXTERNAL_INT1_SetCallBack(void (*local_function_pointer) (void)){
    2c88:	df 93       	push	r29
    2c8a:	cf 93       	push	r28
    2c8c:	00 d0       	rcall	.+0      	; 0x2c8e <INTERRUPT_EXTERNAL_INT1_SetCallBack+0x6>
    2c8e:	cd b7       	in	r28, 0x3d	; 61
    2c90:	de b7       	in	r29, 0x3e	; 62
    2c92:	9a 83       	std	Y+2, r25	; 0x02
    2c94:	89 83       	std	Y+1, r24	; 0x01
	INT1_function_pointer = local_function_pointer;
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9a:	90 93 91 01 	sts	0x0191, r25
    2c9e:	80 93 90 01 	sts	0x0190, r24
}
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	08 95       	ret

00002cac <INTERRUPT_EXTERNAL_INT2_SetCallBack>:

void INTERRUPT_EXTERNAL_INT2_SetCallBack(void (*local_function_pointer) (void)){
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	00 d0       	rcall	.+0      	; 0x2cb2 <INTERRUPT_EXTERNAL_INT2_SetCallBack+0x6>
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
    2cb6:	9a 83       	std	Y+2, r25	; 0x02
    2cb8:	89 83       	std	Y+1, r24	; 0x01
	INT2_function_pointer = local_function_pointer;
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cbe:	90 93 93 01 	sts	0x0193, r25
    2cc2:	80 93 92 01 	sts	0x0192, r24
}
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
    2cca:	cf 91       	pop	r28
    2ccc:	df 91       	pop	r29
    2cce:	08 95       	ret

00002cd0 <__vector_1>:
 * __vector_3(void) -> External Interrupt Request 2.
 *
 */

void __vector_1(void) __attribute__ ((signal, used, externally_visible));
void __vector_1 (void){
    2cd0:	1f 92       	push	r1
    2cd2:	0f 92       	push	r0
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	0f 92       	push	r0
    2cd8:	11 24       	eor	r1, r1
    2cda:	2f 93       	push	r18
    2cdc:	3f 93       	push	r19
    2cde:	4f 93       	push	r20
    2ce0:	5f 93       	push	r21
    2ce2:	6f 93       	push	r22
    2ce4:	7f 93       	push	r23
    2ce6:	8f 93       	push	r24
    2ce8:	9f 93       	push	r25
    2cea:	af 93       	push	r26
    2cec:	bf 93       	push	r27
    2cee:	ef 93       	push	r30
    2cf0:	ff 93       	push	r31
    2cf2:	df 93       	push	r29
    2cf4:	cf 93       	push	r28
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
	INTERRUPT_DisableGlobalInterrupt();
    2cfa:	0e 94 13 17 	call	0x2e26	; 0x2e26 <INTERRUPT_DisableGlobalInterrupt>
	if (INT0_function_pointer){			// Check if the function pointer is not NULL
    2cfe:	80 91 8e 01 	lds	r24, 0x018E
    2d02:	90 91 8f 01 	lds	r25, 0x018F
    2d06:	00 97       	sbiw	r24, 0x00	; 0
    2d08:	29 f0       	breq	.+10     	; 0x2d14 <__vector_1+0x44>
		INT0_function_pointer();		// Execute the function
    2d0a:	e0 91 8e 01 	lds	r30, 0x018E
    2d0e:	f0 91 8f 01 	lds	r31, 0x018F
    2d12:	09 95       	icall
	}
	INTERRUPT_EnableGlobalInterrupt();
    2d14:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <INTERRUPT_EnableGlobalInterrupt>
}
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	ff 91       	pop	r31
    2d1e:	ef 91       	pop	r30
    2d20:	bf 91       	pop	r27
    2d22:	af 91       	pop	r26
    2d24:	9f 91       	pop	r25
    2d26:	8f 91       	pop	r24
    2d28:	7f 91       	pop	r23
    2d2a:	6f 91       	pop	r22
    2d2c:	5f 91       	pop	r21
    2d2e:	4f 91       	pop	r20
    2d30:	3f 91       	pop	r19
    2d32:	2f 91       	pop	r18
    2d34:	0f 90       	pop	r0
    2d36:	0f be       	out	0x3f, r0	; 63
    2d38:	0f 90       	pop	r0
    2d3a:	1f 90       	pop	r1
    2d3c:	18 95       	reti

00002d3e <__vector_2>:

void __vector_2(void) __attribute__ ((signal, used, externally_visible));
void __vector_2 (void){
    2d3e:	1f 92       	push	r1
    2d40:	0f 92       	push	r0
    2d42:	0f b6       	in	r0, 0x3f	; 63
    2d44:	0f 92       	push	r0
    2d46:	11 24       	eor	r1, r1
    2d48:	2f 93       	push	r18
    2d4a:	3f 93       	push	r19
    2d4c:	4f 93       	push	r20
    2d4e:	5f 93       	push	r21
    2d50:	6f 93       	push	r22
    2d52:	7f 93       	push	r23
    2d54:	8f 93       	push	r24
    2d56:	9f 93       	push	r25
    2d58:	af 93       	push	r26
    2d5a:	bf 93       	push	r27
    2d5c:	ef 93       	push	r30
    2d5e:	ff 93       	push	r31
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
	if (INT1_function_pointer){	// Check if the function pointer is not NULL
    2d68:	80 91 90 01 	lds	r24, 0x0190
    2d6c:	90 91 91 01 	lds	r25, 0x0191
    2d70:	00 97       	sbiw	r24, 0x00	; 0
    2d72:	29 f0       	breq	.+10     	; 0x2d7e <__vector_2+0x40>
		INT1_function_pointer();		// Execute the function
    2d74:	e0 91 90 01 	lds	r30, 0x0190
    2d78:	f0 91 91 01 	lds	r31, 0x0191
    2d7c:	09 95       	icall
	}
}
    2d7e:	cf 91       	pop	r28
    2d80:	df 91       	pop	r29
    2d82:	ff 91       	pop	r31
    2d84:	ef 91       	pop	r30
    2d86:	bf 91       	pop	r27
    2d88:	af 91       	pop	r26
    2d8a:	9f 91       	pop	r25
    2d8c:	8f 91       	pop	r24
    2d8e:	7f 91       	pop	r23
    2d90:	6f 91       	pop	r22
    2d92:	5f 91       	pop	r21
    2d94:	4f 91       	pop	r20
    2d96:	3f 91       	pop	r19
    2d98:	2f 91       	pop	r18
    2d9a:	0f 90       	pop	r0
    2d9c:	0f be       	out	0x3f, r0	; 63
    2d9e:	0f 90       	pop	r0
    2da0:	1f 90       	pop	r1
    2da2:	18 95       	reti

00002da4 <__vector_3>:

void __vector_3(void) __attribute__ ((signal, used, externally_visible));
void __vector_3 (void){
    2da4:	1f 92       	push	r1
    2da6:	0f 92       	push	r0
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	0f 92       	push	r0
    2dac:	11 24       	eor	r1, r1
    2dae:	2f 93       	push	r18
    2db0:	3f 93       	push	r19
    2db2:	4f 93       	push	r20
    2db4:	5f 93       	push	r21
    2db6:	6f 93       	push	r22
    2db8:	7f 93       	push	r23
    2dba:	8f 93       	push	r24
    2dbc:	9f 93       	push	r25
    2dbe:	af 93       	push	r26
    2dc0:	bf 93       	push	r27
    2dc2:	ef 93       	push	r30
    2dc4:	ff 93       	push	r31
    2dc6:	df 93       	push	r29
    2dc8:	cf 93       	push	r28
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
	if (INT2_function_pointer){	// Check if the function pointer is not NULL
    2dce:	80 91 92 01 	lds	r24, 0x0192
    2dd2:	90 91 93 01 	lds	r25, 0x0193
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	29 f0       	breq	.+10     	; 0x2de4 <__vector_3+0x40>
		INT2_function_pointer();		// Execute the function
    2dda:	e0 91 92 01 	lds	r30, 0x0192
    2dde:	f0 91 93 01 	lds	r31, 0x0193
    2de2:	09 95       	icall
	}
}
    2de4:	cf 91       	pop	r28
    2de6:	df 91       	pop	r29
    2de8:	ff 91       	pop	r31
    2dea:	ef 91       	pop	r30
    2dec:	bf 91       	pop	r27
    2dee:	af 91       	pop	r26
    2df0:	9f 91       	pop	r25
    2df2:	8f 91       	pop	r24
    2df4:	7f 91       	pop	r23
    2df6:	6f 91       	pop	r22
    2df8:	5f 91       	pop	r21
    2dfa:	4f 91       	pop	r20
    2dfc:	3f 91       	pop	r19
    2dfe:	2f 91       	pop	r18
    2e00:	0f 90       	pop	r0
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	0f 90       	pop	r0
    2e06:	1f 90       	pop	r1
    2e08:	18 95       	reti

00002e0a <INTERRUPT_EnableGlobalInterrupt>:

/********************************\
*********** Functions ************
\********************************/

void INTERRUPT_EnableGlobalInterrupt(){
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, I);
    2e12:	af e5       	ldi	r26, 0x5F	; 95
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	ef e5       	ldi	r30, 0x5F	; 95
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	80 68       	ori	r24, 0x80	; 128
    2e1e:	8c 93       	st	X, r24
}
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	08 95       	ret

00002e26 <INTERRUPT_DisableGlobalInterrupt>:

void INTERRUPT_DisableGlobalInterrupt(){
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	cd b7       	in	r28, 0x3d	; 61
    2e2c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG, I);
    2e2e:	af e5       	ldi	r26, 0x5F	; 95
    2e30:	b0 e0       	ldi	r27, 0x00	; 0
    2e32:	ef e5       	ldi	r30, 0x5F	; 95
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	8f 77       	andi	r24, 0x7F	; 127
    2e3a:	8c 93       	st	X, r24
}
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	08 95       	ret

00002e42 <EEPROM_Enable>:
volatile EEPROM_WRITE_BUSY_OR_NOT EEPROM_write_busy = NOT_BUSY;

/* Function Pointer */
void (*EEPROM_function_pointer)(void) = NULL;

void EEPROM_Enable(void) {
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(EECR, EERIE);
    2e4a:	ac e3       	ldi	r26, 0x3C	; 60
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	ec e3       	ldi	r30, 0x3C	; 60
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	80 81       	ld	r24, Z
    2e54:	88 60       	ori	r24, 0x08	; 8
    2e56:	8c 93       	st	X, r24
}
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	08 95       	ret

00002e5e <EEPROM_Write>:

void EEPROM_Write(u16_t address, u8_t data) {
    2e5e:	df 93       	push	r29
    2e60:	cf 93       	push	r28
    2e62:	00 d0       	rcall	.+0      	; 0x2e64 <EEPROM_Write+0x6>
    2e64:	0f 92       	push	r0
    2e66:	cd b7       	in	r28, 0x3d	; 61
    2e68:	de b7       	in	r29, 0x3e	; 62
    2e6a:	9a 83       	std	Y+2, r25	; 0x02
    2e6c:	89 83       	std	Y+1, r24	; 0x01
    2e6e:	6b 83       	std	Y+3, r22	; 0x03
    /* Wait for completion of previous write */
    while (EECR & (1 << EEWE))
    2e70:	ec e3       	ldi	r30, 0x3C	; 60
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	88 2f       	mov	r24, r24
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	82 70       	andi	r24, 0x02	; 2
    2e7c:	90 70       	andi	r25, 0x00	; 0
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	b9 f7       	brne	.-18     	; 0x2e70 <EEPROM_Write+0x12>
        ;
    /* Set up address and data registers */
    EEPROM_EEAR_Set(address);
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	9a 81       	ldd	r25, Y+2	; 0x02
    2e86:	0e 94 80 17 	call	0x2f00	; 0x2f00 <EEPROM_EEAR_Set>
    EEDR = data;
    2e8a:	ed e3       	ldi	r30, 0x3D	; 61
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e90:	80 83       	st	Z, r24
    /* Write logical one to EEMWE */
    EECR |= (1 << EEMWE);
    2e92:	ac e3       	ldi	r26, 0x3C	; 60
    2e94:	b0 e0       	ldi	r27, 0x00	; 0
    2e96:	ec e3       	ldi	r30, 0x3C	; 60
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	80 81       	ld	r24, Z
    2e9c:	84 60       	ori	r24, 0x04	; 4
    2e9e:	8c 93       	st	X, r24
    /* Start eeprom write by setting EEWE */
    EECR |= (1 << EEWE);
    2ea0:	ac e3       	ldi	r26, 0x3C	; 60
    2ea2:	b0 e0       	ldi	r27, 0x00	; 0
    2ea4:	ec e3       	ldi	r30, 0x3C	; 60
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	80 81       	ld	r24, Z
    2eaa:	82 60       	ori	r24, 0x02	; 2
    2eac:	8c 93       	st	X, r24
}
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	cf 91       	pop	r28
    2eb6:	df 91       	pop	r29
    2eb8:	08 95       	ret

00002eba <EEPROM_Read>:

u8_t EEPROM_Read(u16_t address) {
    2eba:	df 93       	push	r29
    2ebc:	cf 93       	push	r28
    2ebe:	00 d0       	rcall	.+0      	; 0x2ec0 <EEPROM_Read+0x6>
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
    2ec4:	9a 83       	std	Y+2, r25	; 0x02
    2ec6:	89 83       	std	Y+1, r24	; 0x01
    /* Wait for completion of previous write */
    while (EECR & (1 << EEWE))
    2ec8:	ec e3       	ldi	r30, 0x3C	; 60
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	80 81       	ld	r24, Z
    2ece:	88 2f       	mov	r24, r24
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	82 70       	andi	r24, 0x02	; 2
    2ed4:	90 70       	andi	r25, 0x00	; 0
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	b9 f7       	brne	.-18     	; 0x2ec8 <EEPROM_Read+0xe>
        ;
    /* Set up address register */
    EEPROM_EEAR_Set(address);
    2eda:	89 81       	ldd	r24, Y+1	; 0x01
    2edc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ede:	0e 94 80 17 	call	0x2f00	; 0x2f00 <EEPROM_EEAR_Set>
    /* Start eeprom read by writing EERE */
    EECR |= (1 << EERE);
    2ee2:	ac e3       	ldi	r26, 0x3C	; 60
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	ec e3       	ldi	r30, 0x3C	; 60
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	80 81       	ld	r24, Z
    2eec:	81 60       	ori	r24, 0x01	; 1
    2eee:	8c 93       	st	X, r24
    /* Return data from data register */
    return EEDR;
    2ef0:	ed e3       	ldi	r30, 0x3D	; 61
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	80 81       	ld	r24, Z
}
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
    2efa:	cf 91       	pop	r28
    2efc:	df 91       	pop	r29
    2efe:	08 95       	ret

00002f00 <EEPROM_EEAR_Set>:

void EEPROM_EEAR_Set(u16_t address) {
    2f00:	df 93       	push	r29
    2f02:	cf 93       	push	r28
    2f04:	00 d0       	rcall	.+0      	; 0x2f06 <EEPROM_EEAR_Set+0x6>
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
    2f0a:	9a 83       	std	Y+2, r25	; 0x02
    2f0c:	89 83       	std	Y+1, r24	; 0x01
    EEARL = (u8_t)(address & 0xFF);  // Set low byte of address
    2f0e:	ee e3       	ldi	r30, 0x3E	; 62
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	80 83       	st	Z, r24
    EEARH = (u8_t)(address >> 8);    // Set high byte of address
    2f16:	ef e3       	ldi	r30, 0x3F	; 63
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	89 81       	ldd	r24, Y+1	; 0x01
    2f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1e:	89 2f       	mov	r24, r25
    2f20:	99 27       	eor	r25, r25
    2f22:	80 83       	st	Z, r24
}
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	cf 91       	pop	r28
    2f2a:	df 91       	pop	r29
    2f2c:	08 95       	ret

00002f2e <EEPROM_WriteArray>:

void EEPROM_WriteArray(u16_t start_address, u8_t *data, u16_t length) {
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
    2f36:	28 97       	sbiw	r28, 0x08	; 8
    2f38:	0f b6       	in	r0, 0x3f	; 63
    2f3a:	f8 94       	cli
    2f3c:	de bf       	out	0x3e, r29	; 62
    2f3e:	0f be       	out	0x3f, r0	; 63
    2f40:	cd bf       	out	0x3d, r28	; 61
    2f42:	9c 83       	std	Y+4, r25	; 0x04
    2f44:	8b 83       	std	Y+3, r24	; 0x03
    2f46:	7e 83       	std	Y+6, r23	; 0x06
    2f48:	6d 83       	std	Y+5, r22	; 0x05
    2f4a:	58 87       	std	Y+8, r21	; 0x08
    2f4c:	4f 83       	std	Y+7, r20	; 0x07
    for (u16_t i = 0; i < length; i++) {
    2f4e:	1a 82       	std	Y+2, r1	; 0x02
    2f50:	19 82       	std	Y+1, r1	; 0x01
    2f52:	18 c0       	rjmp	.+48     	; 0x2f84 <EEPROM_WriteArray+0x56>
        /* Write each byte to the EEPROM */
        EEPROM_Write(start_address + i, data[i]);
    2f54:	2b 81       	ldd	r18, Y+3	; 0x03
    2f56:	3c 81       	ldd	r19, Y+4	; 0x04
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f5c:	a9 01       	movw	r20, r18
    2f5e:	48 0f       	add	r20, r24
    2f60:	59 1f       	adc	r21, r25
    2f62:	2d 81       	ldd	r18, Y+5	; 0x05
    2f64:	3e 81       	ldd	r19, Y+6	; 0x06
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6a:	f9 01       	movw	r30, r18
    2f6c:	e8 0f       	add	r30, r24
    2f6e:	f9 1f       	adc	r31, r25
    2f70:	20 81       	ld	r18, Z
    2f72:	ca 01       	movw	r24, r20
    2f74:	62 2f       	mov	r22, r18
    2f76:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <EEPROM_Write>
    EEARL = (u8_t)(address & 0xFF);  // Set low byte of address
    EEARH = (u8_t)(address >> 8);    // Set high byte of address
}

void EEPROM_WriteArray(u16_t start_address, u8_t *data, u16_t length) {
    for (u16_t i = 0; i < length; i++) {
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7e:	01 96       	adiw	r24, 0x01	; 1
    2f80:	9a 83       	std	Y+2, r25	; 0x02
    2f82:	89 83       	std	Y+1, r24	; 0x01
    2f84:	29 81       	ldd	r18, Y+1	; 0x01
    2f86:	3a 81       	ldd	r19, Y+2	; 0x02
    2f88:	8f 81       	ldd	r24, Y+7	; 0x07
    2f8a:	98 85       	ldd	r25, Y+8	; 0x08
    2f8c:	28 17       	cp	r18, r24
    2f8e:	39 07       	cpc	r19, r25
    2f90:	08 f3       	brcs	.-62     	; 0x2f54 <EEPROM_WriteArray+0x26>
        /* Write each byte to the EEPROM */
        EEPROM_Write(start_address + i, data[i]);

    }
}
    2f92:	28 96       	adiw	r28, 0x08	; 8
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	f8 94       	cli
    2f98:	de bf       	out	0x3e, r29	; 62
    2f9a:	0f be       	out	0x3f, r0	; 63
    2f9c:	cd bf       	out	0x3d, r28	; 61
    2f9e:	cf 91       	pop	r28
    2fa0:	df 91       	pop	r29
    2fa2:	08 95       	ret

00002fa4 <EEPROM_ReadArray>:

void EEPROM_ReadArray(u16_t start_address, u8_t* array, u16_t length) {
    2fa4:	0f 93       	push	r16
    2fa6:	1f 93       	push	r17
    2fa8:	df 93       	push	r29
    2faa:	cf 93       	push	r28
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
    2fb0:	28 97       	sbiw	r28, 0x08	; 8
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	de bf       	out	0x3e, r29	; 62
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	cd bf       	out	0x3d, r28	; 61
    2fbc:	9c 83       	std	Y+4, r25	; 0x04
    2fbe:	8b 83       	std	Y+3, r24	; 0x03
    2fc0:	7e 83       	std	Y+6, r23	; 0x06
    2fc2:	6d 83       	std	Y+5, r22	; 0x05
    2fc4:	58 87       	std	Y+8, r21	; 0x08
    2fc6:	4f 83       	std	Y+7, r20	; 0x07
    for (u16_t i = 0; i < length; i++) {
    2fc8:	1a 82       	std	Y+2, r1	; 0x02
    2fca:	19 82       	std	Y+1, r1	; 0x01
    2fcc:	16 c0       	rjmp	.+44     	; 0x2ffa <EEPROM_ReadArray+0x56>
        array[i] = EEPROM_Read(start_address+i);                     // Store the data
    2fce:	2d 81       	ldd	r18, Y+5	; 0x05
    2fd0:	3e 81       	ldd	r19, Y+6	; 0x06
    2fd2:	89 81       	ldd	r24, Y+1	; 0x01
    2fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd6:	89 01       	movw	r16, r18
    2fd8:	08 0f       	add	r16, r24
    2fda:	19 1f       	adc	r17, r25
    2fdc:	2b 81       	ldd	r18, Y+3	; 0x03
    2fde:	3c 81       	ldd	r19, Y+4	; 0x04
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe4:	82 0f       	add	r24, r18
    2fe6:	93 1f       	adc	r25, r19
    2fe8:	0e 94 5d 17 	call	0x2eba	; 0x2eba <EEPROM_Read>
    2fec:	f8 01       	movw	r30, r16
    2fee:	80 83       	st	Z, r24

    }
}

void EEPROM_ReadArray(u16_t start_address, u8_t* array, u16_t length) {
    for (u16_t i = 0; i < length; i++) {
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff4:	01 96       	adiw	r24, 0x01	; 1
    2ff6:	9a 83       	std	Y+2, r25	; 0x02
    2ff8:	89 83       	std	Y+1, r24	; 0x01
    2ffa:	29 81       	ldd	r18, Y+1	; 0x01
    2ffc:	3a 81       	ldd	r19, Y+2	; 0x02
    2ffe:	8f 81       	ldd	r24, Y+7	; 0x07
    3000:	98 85       	ldd	r25, Y+8	; 0x08
    3002:	28 17       	cp	r18, r24
    3004:	39 07       	cpc	r19, r25
    3006:	18 f3       	brcs	.-58     	; 0x2fce <EEPROM_ReadArray+0x2a>
    }
//    LCD_SendChar(array[2]);
//    LCD_SendChar(array[2]);
//    LCD_SendChar(array[3]);
//    LCD_SendString(array);
    array[length] = '\0';
    3008:	8d 81       	ldd	r24, Y+5	; 0x05
    300a:	9e 81       	ldd	r25, Y+6	; 0x06
    300c:	2f 81       	ldd	r18, Y+7	; 0x07
    300e:	38 85       	ldd	r19, Y+8	; 0x08
    3010:	fc 01       	movw	r30, r24
    3012:	e2 0f       	add	r30, r18
    3014:	f3 1f       	adc	r31, r19
    3016:	10 82       	st	Z, r1
    //LCD_SendString(array);

}
    3018:	28 96       	adiw	r28, 0x08	; 8
    301a:	0f b6       	in	r0, 0x3f	; 63
    301c:	f8 94       	cli
    301e:	de bf       	out	0x3e, r29	; 62
    3020:	0f be       	out	0x3f, r0	; 63
    3022:	cd bf       	out	0x3d, r28	; 61
    3024:	cf 91       	pop	r28
    3026:	df 91       	pop	r29
    3028:	1f 91       	pop	r17
    302a:	0f 91       	pop	r16
    302c:	08 95       	ret

0000302e <__vector_17>:


void __vector_17(void) __attribute__((signal, used, externally_visible));
void __vector_17(void) {
    302e:	1f 92       	push	r1
    3030:	0f 92       	push	r0
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	0f 92       	push	r0
    3036:	11 24       	eor	r1, r1
    3038:	2f 93       	push	r18
    303a:	3f 93       	push	r19
    303c:	4f 93       	push	r20
    303e:	5f 93       	push	r21
    3040:	6f 93       	push	r22
    3042:	7f 93       	push	r23
    3044:	8f 93       	push	r24
    3046:	9f 93       	push	r25
    3048:	af 93       	push	r26
    304a:	bf 93       	push	r27
    304c:	ef 93       	push	r30
    304e:	ff 93       	push	r31
    3050:	df 93       	push	r29
    3052:	cf 93       	push	r28
    3054:	cd b7       	in	r28, 0x3d	; 61
    3056:	de b7       	in	r29, 0x3e	; 62
    /* Check if there is data to write */
    if (EEPROM_write_size > 0) {
    3058:	80 91 96 01 	lds	r24, 0x0196
    305c:	90 91 97 01 	lds	r25, 0x0197
    3060:	00 97       	sbiw	r24, 0x00	; 0
    3062:	d1 f1       	breq	.+116    	; 0x30d8 <__vector_17+0xaa>
        /* Set EEAR to the current address */
        EEPROM_EEAR_Set(EEPROM_write_index);
    3064:	80 91 94 01 	lds	r24, 0x0194
    3068:	90 91 95 01 	lds	r25, 0x0195
    306c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <EEPROM_EEAR_Set>

        /* Set EEDR to the data to be written */
        EEDR = EEPROM_buffer[EEPROM_write_index];
    3070:	ad e3       	ldi	r26, 0x3D	; 61
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	80 91 94 01 	lds	r24, 0x0194
    3078:	90 91 95 01 	lds	r25, 0x0195
    307c:	fc 01       	movw	r30, r24
    307e:	e6 55       	subi	r30, 0x56	; 86
    3080:	fe 4f       	sbci	r31, 0xFE	; 254
    3082:	80 81       	ld	r24, Z
    3084:	8c 93       	st	X, r24

        /* Start EEPROM Write: Set EEMWE and then EEWE */
        EECR |= (1 << EEMWE);  // Master write enable
    3086:	ac e3       	ldi	r26, 0x3C	; 60
    3088:	b0 e0       	ldi	r27, 0x00	; 0
    308a:	ec e3       	ldi	r30, 0x3C	; 60
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	84 60       	ori	r24, 0x04	; 4
    3092:	8c 93       	st	X, r24
        EECR |= (1 << EEWE);   // Start the write operation
    3094:	ac e3       	ldi	r26, 0x3C	; 60
    3096:	b0 e0       	ldi	r27, 0x00	; 0
    3098:	ec e3       	ldi	r30, 0x3C	; 60
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	80 81       	ld	r24, Z
    309e:	82 60       	ori	r24, 0x02	; 2
    30a0:	8c 93       	st	X, r24

        /* Update buffer index */
        EEPROM_write_index++;
    30a2:	80 91 94 01 	lds	r24, 0x0194
    30a6:	90 91 95 01 	lds	r25, 0x0195
    30aa:	01 96       	adiw	r24, 0x01	; 1
    30ac:	90 93 95 01 	sts	0x0195, r25
    30b0:	80 93 94 01 	sts	0x0194, r24
        EEPROM_write_size--;
    30b4:	80 91 96 01 	lds	r24, 0x0196
    30b8:	90 91 97 01 	lds	r25, 0x0197
    30bc:	01 97       	sbiw	r24, 0x01	; 1
    30be:	90 93 97 01 	sts	0x0197, r25
    30c2:	80 93 96 01 	sts	0x0196, r24

        /* If all writes are complete, mark as not busy */
        if (EEPROM_write_size == 0) {
    30c6:	80 91 96 01 	lds	r24, 0x0196
    30ca:	90 91 97 01 	lds	r25, 0x0197
    30ce:	00 97       	sbiw	r24, 0x00	; 0
    30d0:	51 f4       	brne	.+20     	; 0x30e6 <__vector_17+0xb8>
            EEPROM_write_busy = NOT_BUSY;  // Writing done
    30d2:	10 92 98 01 	sts	0x0198, r1
    30d6:	07 c0       	rjmp	.+14     	; 0x30e6 <__vector_17+0xb8>
        }
    } else {
        /* No pending write operation, disable interrupt */
        EECR &= ~(1 << EERIE);  // Disable EEPROM Ready Interrupt
    30d8:	ac e3       	ldi	r26, 0x3C	; 60
    30da:	b0 e0       	ldi	r27, 0x00	; 0
    30dc:	ec e3       	ldi	r30, 0x3C	; 60
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	87 7f       	andi	r24, 0xF7	; 247
    30e4:	8c 93       	st	X, r24
    }
}
    30e6:	cf 91       	pop	r28
    30e8:	df 91       	pop	r29
    30ea:	ff 91       	pop	r31
    30ec:	ef 91       	pop	r30
    30ee:	bf 91       	pop	r27
    30f0:	af 91       	pop	r26
    30f2:	9f 91       	pop	r25
    30f4:	8f 91       	pop	r24
    30f6:	7f 91       	pop	r23
    30f8:	6f 91       	pop	r22
    30fa:	5f 91       	pop	r21
    30fc:	4f 91       	pop	r20
    30fe:	3f 91       	pop	r19
    3100:	2f 91       	pop	r18
    3102:	0f 90       	pop	r0
    3104:	0f be       	out	0x3f, r0	; 63
    3106:	0f 90       	pop	r0
    3108:	1f 90       	pop	r1
    310a:	18 95       	reti

0000310c <DIO_SetPortDirection>:
  /******************************************************************/
 /***************************** Ports ******************************/
/******************************************************************/

/* Dealing with the whole port */
void DIO_SetPortDirection(u8_t port, u8_t direction){
    310c:	df 93       	push	r29
    310e:	cf 93       	push	r28
    3110:	00 d0       	rcall	.+0      	; 0x3112 <DIO_SetPortDirection+0x6>
    3112:	00 d0       	rcall	.+0      	; 0x3114 <DIO_SetPortDirection+0x8>
    3114:	cd b7       	in	r28, 0x3d	; 61
    3116:	de b7       	in	r29, 0x3e	; 62
    3118:	89 83       	std	Y+1, r24	; 0x01
    311a:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
    311c:	89 81       	ldd	r24, Y+1	; 0x01
    311e:	28 2f       	mov	r18, r24
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	3c 83       	std	Y+4, r19	; 0x04
    3124:	2b 83       	std	Y+3, r18	; 0x03
    3126:	8b 81       	ldd	r24, Y+3	; 0x03
    3128:	9c 81       	ldd	r25, Y+4	; 0x04
    312a:	81 30       	cpi	r24, 0x01	; 1
    312c:	91 05       	cpc	r25, r1
    312e:	d1 f0       	breq	.+52     	; 0x3164 <DIO_SetPortDirection+0x58>
    3130:	2b 81       	ldd	r18, Y+3	; 0x03
    3132:	3c 81       	ldd	r19, Y+4	; 0x04
    3134:	22 30       	cpi	r18, 0x02	; 2
    3136:	31 05       	cpc	r19, r1
    3138:	2c f4       	brge	.+10     	; 0x3144 <DIO_SetPortDirection+0x38>
    313a:	8b 81       	ldd	r24, Y+3	; 0x03
    313c:	9c 81       	ldd	r25, Y+4	; 0x04
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	61 f0       	breq	.+24     	; 0x315a <DIO_SetPortDirection+0x4e>
    3142:	1e c0       	rjmp	.+60     	; 0x3180 <DIO_SetPortDirection+0x74>
    3144:	2b 81       	ldd	r18, Y+3	; 0x03
    3146:	3c 81       	ldd	r19, Y+4	; 0x04
    3148:	22 30       	cpi	r18, 0x02	; 2
    314a:	31 05       	cpc	r19, r1
    314c:	81 f0       	breq	.+32     	; 0x316e <DIO_SetPortDirection+0x62>
    314e:	8b 81       	ldd	r24, Y+3	; 0x03
    3150:	9c 81       	ldd	r25, Y+4	; 0x04
    3152:	83 30       	cpi	r24, 0x03	; 3
    3154:	91 05       	cpc	r25, r1
    3156:	81 f0       	breq	.+32     	; 0x3178 <DIO_SetPortDirection+0x6c>
    3158:	13 c0       	rjmp	.+38     	; 0x3180 <DIO_SetPortDirection+0x74>
	case PORT_A:
		DDRA = direction;
    315a:	ea e3       	ldi	r30, 0x3A	; 58
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	8a 81       	ldd	r24, Y+2	; 0x02
    3160:	80 83       	st	Z, r24
    3162:	0e c0       	rjmp	.+28     	; 0x3180 <DIO_SetPortDirection+0x74>
		break;
	case PORT_B:
		DDRB = direction;
    3164:	e7 e3       	ldi	r30, 0x37	; 55
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	8a 81       	ldd	r24, Y+2	; 0x02
    316a:	80 83       	st	Z, r24
    316c:	09 c0       	rjmp	.+18     	; 0x3180 <DIO_SetPortDirection+0x74>
		break;
	case PORT_C:
		DDRC = direction;
    316e:	e4 e3       	ldi	r30, 0x34	; 52
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	8a 81       	ldd	r24, Y+2	; 0x02
    3174:	80 83       	st	Z, r24
    3176:	04 c0       	rjmp	.+8      	; 0x3180 <DIO_SetPortDirection+0x74>
		break;
	case PORT_D:
		DDRD = direction;
    3178:	e1 e3       	ldi	r30, 0x31	; 49
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	8a 81       	ldd	r24, Y+2	; 0x02
    317e:	80 83       	st	Z, r24
		break;
	}
}
    3180:	0f 90       	pop	r0
    3182:	0f 90       	pop	r0
    3184:	0f 90       	pop	r0
    3186:	0f 90       	pop	r0
    3188:	cf 91       	pop	r28
    318a:	df 91       	pop	r29
    318c:	08 95       	ret

0000318e <DIO_SetPortValue>:

void DIO_SetPortValue(u8_t port, u8_t value){
    318e:	df 93       	push	r29
    3190:	cf 93       	push	r28
    3192:	00 d0       	rcall	.+0      	; 0x3194 <DIO_SetPortValue+0x6>
    3194:	00 d0       	rcall	.+0      	; 0x3196 <DIO_SetPortValue+0x8>
    3196:	cd b7       	in	r28, 0x3d	; 61
    3198:	de b7       	in	r29, 0x3e	; 62
    319a:	89 83       	std	Y+1, r24	; 0x01
    319c:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
    319e:	89 81       	ldd	r24, Y+1	; 0x01
    31a0:	28 2f       	mov	r18, r24
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	3c 83       	std	Y+4, r19	; 0x04
    31a6:	2b 83       	std	Y+3, r18	; 0x03
    31a8:	8b 81       	ldd	r24, Y+3	; 0x03
    31aa:	9c 81       	ldd	r25, Y+4	; 0x04
    31ac:	81 30       	cpi	r24, 0x01	; 1
    31ae:	91 05       	cpc	r25, r1
    31b0:	d1 f0       	breq	.+52     	; 0x31e6 <DIO_SetPortValue+0x58>
    31b2:	2b 81       	ldd	r18, Y+3	; 0x03
    31b4:	3c 81       	ldd	r19, Y+4	; 0x04
    31b6:	22 30       	cpi	r18, 0x02	; 2
    31b8:	31 05       	cpc	r19, r1
    31ba:	2c f4       	brge	.+10     	; 0x31c6 <DIO_SetPortValue+0x38>
    31bc:	8b 81       	ldd	r24, Y+3	; 0x03
    31be:	9c 81       	ldd	r25, Y+4	; 0x04
    31c0:	00 97       	sbiw	r24, 0x00	; 0
    31c2:	61 f0       	breq	.+24     	; 0x31dc <DIO_SetPortValue+0x4e>
    31c4:	1e c0       	rjmp	.+60     	; 0x3202 <DIO_SetPortValue+0x74>
    31c6:	2b 81       	ldd	r18, Y+3	; 0x03
    31c8:	3c 81       	ldd	r19, Y+4	; 0x04
    31ca:	22 30       	cpi	r18, 0x02	; 2
    31cc:	31 05       	cpc	r19, r1
    31ce:	81 f0       	breq	.+32     	; 0x31f0 <DIO_SetPortValue+0x62>
    31d0:	8b 81       	ldd	r24, Y+3	; 0x03
    31d2:	9c 81       	ldd	r25, Y+4	; 0x04
    31d4:	83 30       	cpi	r24, 0x03	; 3
    31d6:	91 05       	cpc	r25, r1
    31d8:	81 f0       	breq	.+32     	; 0x31fa <DIO_SetPortValue+0x6c>
    31da:	13 c0       	rjmp	.+38     	; 0x3202 <DIO_SetPortValue+0x74>
	case PORT_A:
		PORTA = value;
    31dc:	eb e3       	ldi	r30, 0x3B	; 59
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	8a 81       	ldd	r24, Y+2	; 0x02
    31e2:	80 83       	st	Z, r24
    31e4:	0e c0       	rjmp	.+28     	; 0x3202 <DIO_SetPortValue+0x74>
		break;
	case PORT_B:
		PORTB = value;
    31e6:	e8 e3       	ldi	r30, 0x38	; 56
    31e8:	f0 e0       	ldi	r31, 0x00	; 0
    31ea:	8a 81       	ldd	r24, Y+2	; 0x02
    31ec:	80 83       	st	Z, r24
    31ee:	09 c0       	rjmp	.+18     	; 0x3202 <DIO_SetPortValue+0x74>
		break;
	case PORT_C:
		PORTC = value;
    31f0:	e5 e3       	ldi	r30, 0x35	; 53
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	8a 81       	ldd	r24, Y+2	; 0x02
    31f6:	80 83       	st	Z, r24
    31f8:	04 c0       	rjmp	.+8      	; 0x3202 <DIO_SetPortValue+0x74>
		break;
	case PORT_D:
		PORTD = value;
    31fa:	e2 e3       	ldi	r30, 0x32	; 50
    31fc:	f0 e0       	ldi	r31, 0x00	; 0
    31fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3200:	80 83       	st	Z, r24
		break;
	}
}
    3202:	0f 90       	pop	r0
    3204:	0f 90       	pop	r0
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	cf 91       	pop	r28
    320c:	df 91       	pop	r29
    320e:	08 95       	ret

00003210 <DIO_TogglePort>:

void DIO_TogglePort(u8_t port){
    3210:	df 93       	push	r29
    3212:	cf 93       	push	r28
    3214:	00 d0       	rcall	.+0      	; 0x3216 <DIO_TogglePort+0x6>
    3216:	0f 92       	push	r0
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
    321c:	89 83       	std	Y+1, r24	; 0x01
	switch (port){
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	28 2f       	mov	r18, r24
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	3b 83       	std	Y+3, r19	; 0x03
    3226:	2a 83       	std	Y+2, r18	; 0x02
    3228:	8a 81       	ldd	r24, Y+2	; 0x02
    322a:	9b 81       	ldd	r25, Y+3	; 0x03
    322c:	81 30       	cpi	r24, 0x01	; 1
    322e:	91 05       	cpc	r25, r1
    3230:	e9 f0       	breq	.+58     	; 0x326c <DIO_TogglePort+0x5c>
    3232:	2a 81       	ldd	r18, Y+2	; 0x02
    3234:	3b 81       	ldd	r19, Y+3	; 0x03
    3236:	22 30       	cpi	r18, 0x02	; 2
    3238:	31 05       	cpc	r19, r1
    323a:	2c f4       	brge	.+10     	; 0x3246 <DIO_TogglePort+0x36>
    323c:	8a 81       	ldd	r24, Y+2	; 0x02
    323e:	9b 81       	ldd	r25, Y+3	; 0x03
    3240:	00 97       	sbiw	r24, 0x00	; 0
    3242:	61 f0       	breq	.+24     	; 0x325c <DIO_TogglePort+0x4c>
    3244:	2a c0       	rjmp	.+84     	; 0x329a <DIO_TogglePort+0x8a>
    3246:	2a 81       	ldd	r18, Y+2	; 0x02
    3248:	3b 81       	ldd	r19, Y+3	; 0x03
    324a:	22 30       	cpi	r18, 0x02	; 2
    324c:	31 05       	cpc	r19, r1
    324e:	b1 f0       	breq	.+44     	; 0x327c <DIO_TogglePort+0x6c>
    3250:	8a 81       	ldd	r24, Y+2	; 0x02
    3252:	9b 81       	ldd	r25, Y+3	; 0x03
    3254:	83 30       	cpi	r24, 0x03	; 3
    3256:	91 05       	cpc	r25, r1
    3258:	c9 f0       	breq	.+50     	; 0x328c <DIO_TogglePort+0x7c>
    325a:	1f c0       	rjmp	.+62     	; 0x329a <DIO_TogglePort+0x8a>
	case PORT_A:
		PORTA ^= PORT_HIGH;
    325c:	ab e3       	ldi	r26, 0x3B	; 59
    325e:	b0 e0       	ldi	r27, 0x00	; 0
    3260:	eb e3       	ldi	r30, 0x3B	; 59
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	80 81       	ld	r24, Z
    3266:	80 95       	com	r24
    3268:	8c 93       	st	X, r24
    326a:	17 c0       	rjmp	.+46     	; 0x329a <DIO_TogglePort+0x8a>
		break;
	case PORT_B:
		PORTB ^= PORT_HIGH;
    326c:	a8 e3       	ldi	r26, 0x38	; 56
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	e8 e3       	ldi	r30, 0x38	; 56
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	80 81       	ld	r24, Z
    3276:	80 95       	com	r24
    3278:	8c 93       	st	X, r24
    327a:	0f c0       	rjmp	.+30     	; 0x329a <DIO_TogglePort+0x8a>
		break;
	case PORT_C:
		PORTC ^= PORT_HIGH;
    327c:	a5 e3       	ldi	r26, 0x35	; 53
    327e:	b0 e0       	ldi	r27, 0x00	; 0
    3280:	e5 e3       	ldi	r30, 0x35	; 53
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	80 81       	ld	r24, Z
    3286:	80 95       	com	r24
    3288:	8c 93       	st	X, r24
    328a:	07 c0       	rjmp	.+14     	; 0x329a <DIO_TogglePort+0x8a>
		break;
	case PORT_D:
		PORTD ^= PORT_HIGH;
    328c:	a2 e3       	ldi	r26, 0x32	; 50
    328e:	b0 e0       	ldi	r27, 0x00	; 0
    3290:	e2 e3       	ldi	r30, 0x32	; 50
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	80 81       	ld	r24, Z
    3296:	80 95       	com	r24
    3298:	8c 93       	st	X, r24
		break;
	}
}
    329a:	0f 90       	pop	r0
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	cf 91       	pop	r28
    32a2:	df 91       	pop	r29
    32a4:	08 95       	ret

000032a6 <DIO_GetPortValue>:

u8_t DIO_GetPortValue(u8_t port){
    32a6:	df 93       	push	r29
    32a8:	cf 93       	push	r28
    32aa:	00 d0       	rcall	.+0      	; 0x32ac <DIO_GetPortValue+0x6>
    32ac:	00 d0       	rcall	.+0      	; 0x32ae <DIO_GetPortValue+0x8>
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
    32b2:	8a 83       	std	Y+2, r24	; 0x02
	u8_t get_port;
	switch(port){
    32b4:	8a 81       	ldd	r24, Y+2	; 0x02
    32b6:	28 2f       	mov	r18, r24
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	3c 83       	std	Y+4, r19	; 0x04
    32bc:	2b 83       	std	Y+3, r18	; 0x03
    32be:	8b 81       	ldd	r24, Y+3	; 0x03
    32c0:	9c 81       	ldd	r25, Y+4	; 0x04
    32c2:	81 30       	cpi	r24, 0x01	; 1
    32c4:	91 05       	cpc	r25, r1
    32c6:	d1 f0       	breq	.+52     	; 0x32fc <DIO_GetPortValue+0x56>
    32c8:	2b 81       	ldd	r18, Y+3	; 0x03
    32ca:	3c 81       	ldd	r19, Y+4	; 0x04
    32cc:	22 30       	cpi	r18, 0x02	; 2
    32ce:	31 05       	cpc	r19, r1
    32d0:	2c f4       	brge	.+10     	; 0x32dc <DIO_GetPortValue+0x36>
    32d2:	8b 81       	ldd	r24, Y+3	; 0x03
    32d4:	9c 81       	ldd	r25, Y+4	; 0x04
    32d6:	00 97       	sbiw	r24, 0x00	; 0
    32d8:	61 f0       	breq	.+24     	; 0x32f2 <DIO_GetPortValue+0x4c>
    32da:	1e c0       	rjmp	.+60     	; 0x3318 <DIO_GetPortValue+0x72>
    32dc:	2b 81       	ldd	r18, Y+3	; 0x03
    32de:	3c 81       	ldd	r19, Y+4	; 0x04
    32e0:	22 30       	cpi	r18, 0x02	; 2
    32e2:	31 05       	cpc	r19, r1
    32e4:	81 f0       	breq	.+32     	; 0x3306 <DIO_GetPortValue+0x60>
    32e6:	8b 81       	ldd	r24, Y+3	; 0x03
    32e8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ea:	83 30       	cpi	r24, 0x03	; 3
    32ec:	91 05       	cpc	r25, r1
    32ee:	81 f0       	breq	.+32     	; 0x3310 <DIO_GetPortValue+0x6a>
    32f0:	13 c0       	rjmp	.+38     	; 0x3318 <DIO_GetPortValue+0x72>
	case PORT_A:
		get_port = PORTA;
    32f2:	eb e3       	ldi	r30, 0x3B	; 59
    32f4:	f0 e0       	ldi	r31, 0x00	; 0
    32f6:	80 81       	ld	r24, Z
    32f8:	89 83       	std	Y+1, r24	; 0x01
    32fa:	0e c0       	rjmp	.+28     	; 0x3318 <DIO_GetPortValue+0x72>
		break;
	case PORT_B:
		get_port = PORTB;
    32fc:	e8 e3       	ldi	r30, 0x38	; 56
    32fe:	f0 e0       	ldi	r31, 0x00	; 0
    3300:	80 81       	ld	r24, Z
    3302:	89 83       	std	Y+1, r24	; 0x01
    3304:	09 c0       	rjmp	.+18     	; 0x3318 <DIO_GetPortValue+0x72>
		break;
	case PORT_C:
		get_port = PORTC;
    3306:	e5 e3       	ldi	r30, 0x35	; 53
    3308:	f0 e0       	ldi	r31, 0x00	; 0
    330a:	80 81       	ld	r24, Z
    330c:	89 83       	std	Y+1, r24	; 0x01
    330e:	04 c0       	rjmp	.+8      	; 0x3318 <DIO_GetPortValue+0x72>
		break;
	case PORT_D:
		get_port = PORTD;
    3310:	e2 e3       	ldi	r30, 0x32	; 50
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	80 81       	ld	r24, Z
    3316:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return get_port;
    3318:	89 81       	ldd	r24, Y+1	; 0x01
}
    331a:	0f 90       	pop	r0
    331c:	0f 90       	pop	r0
    331e:	0f 90       	pop	r0
    3320:	0f 90       	pop	r0
    3322:	cf 91       	pop	r28
    3324:	df 91       	pop	r29
    3326:	08 95       	ret

00003328 <DIO_SetPinDirection>:
/******************************************************************/
/****************************** Pins ******************************/
/******************************************************************/

/* Dealing with pins */
void DIO_SetPinDirection(u8_t port, u8_t pin, u8_t direction){
    3328:	df 93       	push	r29
    332a:	cf 93       	push	r28
    332c:	cd b7       	in	r28, 0x3d	; 61
    332e:	de b7       	in	r29, 0x3e	; 62
    3330:	29 97       	sbiw	r28, 0x09	; 9
    3332:	0f b6       	in	r0, 0x3f	; 63
    3334:	f8 94       	cli
    3336:	de bf       	out	0x3e, r29	; 62
    3338:	0f be       	out	0x3f, r0	; 63
    333a:	cd bf       	out	0x3d, r28	; 61
    333c:	89 83       	std	Y+1, r24	; 0x01
    333e:	6a 83       	std	Y+2, r22	; 0x02
    3340:	4b 83       	std	Y+3, r20	; 0x03
	switch (direction){
    3342:	8b 81       	ldd	r24, Y+3	; 0x03
    3344:	28 2f       	mov	r18, r24
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	39 87       	std	Y+9, r19	; 0x09
    334a:	28 87       	std	Y+8, r18	; 0x08
    334c:	88 85       	ldd	r24, Y+8	; 0x08
    334e:	99 85       	ldd	r25, Y+9	; 0x09
    3350:	00 97       	sbiw	r24, 0x00	; 0
    3352:	39 f0       	breq	.+14     	; 0x3362 <DIO_SetPinDirection+0x3a>
    3354:	28 85       	ldd	r18, Y+8	; 0x08
    3356:	39 85       	ldd	r19, Y+9	; 0x09
    3358:	21 30       	cpi	r18, 0x01	; 1
    335a:	31 05       	cpc	r19, r1
    335c:	09 f4       	brne	.+2      	; 0x3360 <DIO_SetPinDirection+0x38>
    335e:	75 c0       	rjmp	.+234    	; 0x344a <DIO_SetPinDirection+0x122>
    3360:	e2 c0       	rjmp	.+452    	; 0x3526 <DIO_SetPinDirection+0x1fe>
	case PIN_INPUT:
		switch (port){
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	28 2f       	mov	r18, r24
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	3f 83       	std	Y+7, r19	; 0x07
    336a:	2e 83       	std	Y+6, r18	; 0x06
    336c:	8e 81       	ldd	r24, Y+6	; 0x06
    336e:	9f 81       	ldd	r25, Y+7	; 0x07
    3370:	81 30       	cpi	r24, 0x01	; 1
    3372:	91 05       	cpc	r25, r1
    3374:	59 f1       	breq	.+86     	; 0x33cc <DIO_SetPinDirection+0xa4>
    3376:	2e 81       	ldd	r18, Y+6	; 0x06
    3378:	3f 81       	ldd	r19, Y+7	; 0x07
    337a:	22 30       	cpi	r18, 0x02	; 2
    337c:	31 05       	cpc	r19, r1
    337e:	2c f4       	brge	.+10     	; 0x338a <DIO_SetPinDirection+0x62>
    3380:	8e 81       	ldd	r24, Y+6	; 0x06
    3382:	9f 81       	ldd	r25, Y+7	; 0x07
    3384:	00 97       	sbiw	r24, 0x00	; 0
    3386:	69 f0       	breq	.+26     	; 0x33a2 <DIO_SetPinDirection+0x7a>
    3388:	ce c0       	rjmp	.+412    	; 0x3526 <DIO_SetPinDirection+0x1fe>
    338a:	2e 81       	ldd	r18, Y+6	; 0x06
    338c:	3f 81       	ldd	r19, Y+7	; 0x07
    338e:	22 30       	cpi	r18, 0x02	; 2
    3390:	31 05       	cpc	r19, r1
    3392:	89 f1       	breq	.+98     	; 0x33f6 <DIO_SetPinDirection+0xce>
    3394:	8e 81       	ldd	r24, Y+6	; 0x06
    3396:	9f 81       	ldd	r25, Y+7	; 0x07
    3398:	83 30       	cpi	r24, 0x03	; 3
    339a:	91 05       	cpc	r25, r1
    339c:	09 f4       	brne	.+2      	; 0x33a0 <DIO_SetPinDirection+0x78>
    339e:	40 c0       	rjmp	.+128    	; 0x3420 <DIO_SetPinDirection+0xf8>
    33a0:	c2 c0       	rjmp	.+388    	; 0x3526 <DIO_SetPinDirection+0x1fe>
		case PORT_A:
			CLEAR_BIT(DDRA, pin);
    33a2:	aa e3       	ldi	r26, 0x3A	; 58
    33a4:	b0 e0       	ldi	r27, 0x00	; 0
    33a6:	ea e3       	ldi	r30, 0x3A	; 58
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	80 81       	ld	r24, Z
    33ac:	48 2f       	mov	r20, r24
    33ae:	8a 81       	ldd	r24, Y+2	; 0x02
    33b0:	28 2f       	mov	r18, r24
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	02 2e       	mov	r0, r18
    33ba:	02 c0       	rjmp	.+4      	; 0x33c0 <DIO_SetPinDirection+0x98>
    33bc:	88 0f       	add	r24, r24
    33be:	99 1f       	adc	r25, r25
    33c0:	0a 94       	dec	r0
    33c2:	e2 f7       	brpl	.-8      	; 0x33bc <DIO_SetPinDirection+0x94>
    33c4:	80 95       	com	r24
    33c6:	84 23       	and	r24, r20
    33c8:	8c 93       	st	X, r24
    33ca:	ad c0       	rjmp	.+346    	; 0x3526 <DIO_SetPinDirection+0x1fe>
			break;
		case PORT_B:
			CLEAR_BIT(DDRB, pin);
    33cc:	a7 e3       	ldi	r26, 0x37	; 55
    33ce:	b0 e0       	ldi	r27, 0x00	; 0
    33d0:	e7 e3       	ldi	r30, 0x37	; 55
    33d2:	f0 e0       	ldi	r31, 0x00	; 0
    33d4:	80 81       	ld	r24, Z
    33d6:	48 2f       	mov	r20, r24
    33d8:	8a 81       	ldd	r24, Y+2	; 0x02
    33da:	28 2f       	mov	r18, r24
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	02 2e       	mov	r0, r18
    33e4:	02 c0       	rjmp	.+4      	; 0x33ea <DIO_SetPinDirection+0xc2>
    33e6:	88 0f       	add	r24, r24
    33e8:	99 1f       	adc	r25, r25
    33ea:	0a 94       	dec	r0
    33ec:	e2 f7       	brpl	.-8      	; 0x33e6 <DIO_SetPinDirection+0xbe>
    33ee:	80 95       	com	r24
    33f0:	84 23       	and	r24, r20
    33f2:	8c 93       	st	X, r24
    33f4:	98 c0       	rjmp	.+304    	; 0x3526 <DIO_SetPinDirection+0x1fe>
			break;
		case PORT_C:
			CLEAR_BIT(DDRC, pin);
    33f6:	a4 e3       	ldi	r26, 0x34	; 52
    33f8:	b0 e0       	ldi	r27, 0x00	; 0
    33fa:	e4 e3       	ldi	r30, 0x34	; 52
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	80 81       	ld	r24, Z
    3400:	48 2f       	mov	r20, r24
    3402:	8a 81       	ldd	r24, Y+2	; 0x02
    3404:	28 2f       	mov	r18, r24
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	02 2e       	mov	r0, r18
    340e:	02 c0       	rjmp	.+4      	; 0x3414 <DIO_SetPinDirection+0xec>
    3410:	88 0f       	add	r24, r24
    3412:	99 1f       	adc	r25, r25
    3414:	0a 94       	dec	r0
    3416:	e2 f7       	brpl	.-8      	; 0x3410 <DIO_SetPinDirection+0xe8>
    3418:	80 95       	com	r24
    341a:	84 23       	and	r24, r20
    341c:	8c 93       	st	X, r24
    341e:	83 c0       	rjmp	.+262    	; 0x3526 <DIO_SetPinDirection+0x1fe>
			break;
		case PORT_D:
			CLEAR_BIT(DDRD, pin);
    3420:	a1 e3       	ldi	r26, 0x31	; 49
    3422:	b0 e0       	ldi	r27, 0x00	; 0
    3424:	e1 e3       	ldi	r30, 0x31	; 49
    3426:	f0 e0       	ldi	r31, 0x00	; 0
    3428:	80 81       	ld	r24, Z
    342a:	48 2f       	mov	r20, r24
    342c:	8a 81       	ldd	r24, Y+2	; 0x02
    342e:	28 2f       	mov	r18, r24
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	02 2e       	mov	r0, r18
    3438:	02 c0       	rjmp	.+4      	; 0x343e <DIO_SetPinDirection+0x116>
    343a:	88 0f       	add	r24, r24
    343c:	99 1f       	adc	r25, r25
    343e:	0a 94       	dec	r0
    3440:	e2 f7       	brpl	.-8      	; 0x343a <DIO_SetPinDirection+0x112>
    3442:	80 95       	com	r24
    3444:	84 23       	and	r24, r20
    3446:	8c 93       	st	X, r24
    3448:	6e c0       	rjmp	.+220    	; 0x3526 <DIO_SetPinDirection+0x1fe>
			break;
		}
		break;
		case PIN_OUTPUT:
			switch (port){
    344a:	89 81       	ldd	r24, Y+1	; 0x01
    344c:	28 2f       	mov	r18, r24
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	3d 83       	std	Y+5, r19	; 0x05
    3452:	2c 83       	std	Y+4, r18	; 0x04
    3454:	8c 81       	ldd	r24, Y+4	; 0x04
    3456:	9d 81       	ldd	r25, Y+5	; 0x05
    3458:	81 30       	cpi	r24, 0x01	; 1
    345a:	91 05       	cpc	r25, r1
    345c:	49 f1       	breq	.+82     	; 0x34b0 <DIO_SetPinDirection+0x188>
    345e:	2c 81       	ldd	r18, Y+4	; 0x04
    3460:	3d 81       	ldd	r19, Y+5	; 0x05
    3462:	22 30       	cpi	r18, 0x02	; 2
    3464:	31 05       	cpc	r19, r1
    3466:	2c f4       	brge	.+10     	; 0x3472 <DIO_SetPinDirection+0x14a>
    3468:	8c 81       	ldd	r24, Y+4	; 0x04
    346a:	9d 81       	ldd	r25, Y+5	; 0x05
    346c:	00 97       	sbiw	r24, 0x00	; 0
    346e:	61 f0       	breq	.+24     	; 0x3488 <DIO_SetPinDirection+0x160>
    3470:	5a c0       	rjmp	.+180    	; 0x3526 <DIO_SetPinDirection+0x1fe>
    3472:	2c 81       	ldd	r18, Y+4	; 0x04
    3474:	3d 81       	ldd	r19, Y+5	; 0x05
    3476:	22 30       	cpi	r18, 0x02	; 2
    3478:	31 05       	cpc	r19, r1
    347a:	71 f1       	breq	.+92     	; 0x34d8 <DIO_SetPinDirection+0x1b0>
    347c:	8c 81       	ldd	r24, Y+4	; 0x04
    347e:	9d 81       	ldd	r25, Y+5	; 0x05
    3480:	83 30       	cpi	r24, 0x03	; 3
    3482:	91 05       	cpc	r25, r1
    3484:	e9 f1       	breq	.+122    	; 0x3500 <DIO_SetPinDirection+0x1d8>
    3486:	4f c0       	rjmp	.+158    	; 0x3526 <DIO_SetPinDirection+0x1fe>
			case PORT_A:
				SET_BIT(DDRA, pin);
    3488:	aa e3       	ldi	r26, 0x3A	; 58
    348a:	b0 e0       	ldi	r27, 0x00	; 0
    348c:	ea e3       	ldi	r30, 0x3A	; 58
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	80 81       	ld	r24, Z
    3492:	48 2f       	mov	r20, r24
    3494:	8a 81       	ldd	r24, Y+2	; 0x02
    3496:	28 2f       	mov	r18, r24
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	02 2e       	mov	r0, r18
    34a0:	02 c0       	rjmp	.+4      	; 0x34a6 <DIO_SetPinDirection+0x17e>
    34a2:	88 0f       	add	r24, r24
    34a4:	99 1f       	adc	r25, r25
    34a6:	0a 94       	dec	r0
    34a8:	e2 f7       	brpl	.-8      	; 0x34a2 <DIO_SetPinDirection+0x17a>
    34aa:	84 2b       	or	r24, r20
    34ac:	8c 93       	st	X, r24
    34ae:	3b c0       	rjmp	.+118    	; 0x3526 <DIO_SetPinDirection+0x1fe>
				break;
			case PORT_B:
				SET_BIT(DDRB, pin);
    34b0:	a7 e3       	ldi	r26, 0x37	; 55
    34b2:	b0 e0       	ldi	r27, 0x00	; 0
    34b4:	e7 e3       	ldi	r30, 0x37	; 55
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	80 81       	ld	r24, Z
    34ba:	48 2f       	mov	r20, r24
    34bc:	8a 81       	ldd	r24, Y+2	; 0x02
    34be:	28 2f       	mov	r18, r24
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	02 2e       	mov	r0, r18
    34c8:	02 c0       	rjmp	.+4      	; 0x34ce <DIO_SetPinDirection+0x1a6>
    34ca:	88 0f       	add	r24, r24
    34cc:	99 1f       	adc	r25, r25
    34ce:	0a 94       	dec	r0
    34d0:	e2 f7       	brpl	.-8      	; 0x34ca <DIO_SetPinDirection+0x1a2>
    34d2:	84 2b       	or	r24, r20
    34d4:	8c 93       	st	X, r24
    34d6:	27 c0       	rjmp	.+78     	; 0x3526 <DIO_SetPinDirection+0x1fe>
				break;
			case PORT_C:
				SET_BIT(DDRC, pin);
    34d8:	a4 e3       	ldi	r26, 0x34	; 52
    34da:	b0 e0       	ldi	r27, 0x00	; 0
    34dc:	e4 e3       	ldi	r30, 0x34	; 52
    34de:	f0 e0       	ldi	r31, 0x00	; 0
    34e0:	80 81       	ld	r24, Z
    34e2:	48 2f       	mov	r20, r24
    34e4:	8a 81       	ldd	r24, Y+2	; 0x02
    34e6:	28 2f       	mov	r18, r24
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	02 2e       	mov	r0, r18
    34f0:	02 c0       	rjmp	.+4      	; 0x34f6 <DIO_SetPinDirection+0x1ce>
    34f2:	88 0f       	add	r24, r24
    34f4:	99 1f       	adc	r25, r25
    34f6:	0a 94       	dec	r0
    34f8:	e2 f7       	brpl	.-8      	; 0x34f2 <DIO_SetPinDirection+0x1ca>
    34fa:	84 2b       	or	r24, r20
    34fc:	8c 93       	st	X, r24
    34fe:	13 c0       	rjmp	.+38     	; 0x3526 <DIO_SetPinDirection+0x1fe>
				break;
			case PORT_D:
				SET_BIT(DDRD, pin);
    3500:	a1 e3       	ldi	r26, 0x31	; 49
    3502:	b0 e0       	ldi	r27, 0x00	; 0
    3504:	e1 e3       	ldi	r30, 0x31	; 49
    3506:	f0 e0       	ldi	r31, 0x00	; 0
    3508:	80 81       	ld	r24, Z
    350a:	48 2f       	mov	r20, r24
    350c:	8a 81       	ldd	r24, Y+2	; 0x02
    350e:	28 2f       	mov	r18, r24
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	02 2e       	mov	r0, r18
    3518:	02 c0       	rjmp	.+4      	; 0x351e <DIO_SetPinDirection+0x1f6>
    351a:	88 0f       	add	r24, r24
    351c:	99 1f       	adc	r25, r25
    351e:	0a 94       	dec	r0
    3520:	e2 f7       	brpl	.-8      	; 0x351a <DIO_SetPinDirection+0x1f2>
    3522:	84 2b       	or	r24, r20
    3524:	8c 93       	st	X, r24
				break;
			}
	}
}
    3526:	29 96       	adiw	r28, 0x09	; 9
    3528:	0f b6       	in	r0, 0x3f	; 63
    352a:	f8 94       	cli
    352c:	de bf       	out	0x3e, r29	; 62
    352e:	0f be       	out	0x3f, r0	; 63
    3530:	cd bf       	out	0x3d, r28	; 61
    3532:	cf 91       	pop	r28
    3534:	df 91       	pop	r29
    3536:	08 95       	ret

00003538 <DIO_SetPinValue>:

void DIO_SetPinValue(u8_t port, u8_t pin, u8_t value){
    3538:	df 93       	push	r29
    353a:	cf 93       	push	r28
    353c:	cd b7       	in	r28, 0x3d	; 61
    353e:	de b7       	in	r29, 0x3e	; 62
    3540:	2b 97       	sbiw	r28, 0x0b	; 11
    3542:	0f b6       	in	r0, 0x3f	; 63
    3544:	f8 94       	cli
    3546:	de bf       	out	0x3e, r29	; 62
    3548:	0f be       	out	0x3f, r0	; 63
    354a:	cd bf       	out	0x3d, r28	; 61
    354c:	89 83       	std	Y+1, r24	; 0x01
    354e:	6a 83       	std	Y+2, r22	; 0x02
    3550:	4b 83       	std	Y+3, r20	; 0x03
	switch (value){
    3552:	8b 81       	ldd	r24, Y+3	; 0x03
    3554:	28 2f       	mov	r18, r24
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	3b 87       	std	Y+11, r19	; 0x0b
    355a:	2a 87       	std	Y+10, r18	; 0x0a
    355c:	8a 85       	ldd	r24, Y+10	; 0x0a
    355e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3560:	81 30       	cpi	r24, 0x01	; 1
    3562:	91 05       	cpc	r25, r1
    3564:	09 f4       	brne	.+2      	; 0x3568 <DIO_SetPinValue+0x30>
    3566:	7f c0       	rjmp	.+254    	; 0x3666 <DIO_SetPinValue+0x12e>
    3568:	2a 85       	ldd	r18, Y+10	; 0x0a
    356a:	3b 85       	ldd	r19, Y+11	; 0x0b
    356c:	22 30       	cpi	r18, 0x02	; 2
    356e:	31 05       	cpc	r19, r1
    3570:	09 f4       	brne	.+2      	; 0x3574 <DIO_SetPinValue+0x3c>
    3572:	e8 c0       	rjmp	.+464    	; 0x3744 <DIO_SetPinValue+0x20c>
    3574:	8a 85       	ldd	r24, Y+10	; 0x0a
    3576:	9b 85       	ldd	r25, Y+11	; 0x0b
    3578:	00 97       	sbiw	r24, 0x00	; 0
    357a:	09 f0       	breq	.+2      	; 0x357e <DIO_SetPinValue+0x46>
    357c:	51 c1       	rjmp	.+674    	; 0x3820 <DIO_SetPinValue+0x2e8>
	case PIN_LOW:
		switch (port){
    357e:	89 81       	ldd	r24, Y+1	; 0x01
    3580:	28 2f       	mov	r18, r24
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	39 87       	std	Y+9, r19	; 0x09
    3586:	28 87       	std	Y+8, r18	; 0x08
    3588:	88 85       	ldd	r24, Y+8	; 0x08
    358a:	99 85       	ldd	r25, Y+9	; 0x09
    358c:	81 30       	cpi	r24, 0x01	; 1
    358e:	91 05       	cpc	r25, r1
    3590:	59 f1       	breq	.+86     	; 0x35e8 <DIO_SetPinValue+0xb0>
    3592:	28 85       	ldd	r18, Y+8	; 0x08
    3594:	39 85       	ldd	r19, Y+9	; 0x09
    3596:	22 30       	cpi	r18, 0x02	; 2
    3598:	31 05       	cpc	r19, r1
    359a:	2c f4       	brge	.+10     	; 0x35a6 <DIO_SetPinValue+0x6e>
    359c:	88 85       	ldd	r24, Y+8	; 0x08
    359e:	99 85       	ldd	r25, Y+9	; 0x09
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	69 f0       	breq	.+26     	; 0x35be <DIO_SetPinValue+0x86>
    35a4:	3d c1       	rjmp	.+634    	; 0x3820 <DIO_SetPinValue+0x2e8>
    35a6:	28 85       	ldd	r18, Y+8	; 0x08
    35a8:	39 85       	ldd	r19, Y+9	; 0x09
    35aa:	22 30       	cpi	r18, 0x02	; 2
    35ac:	31 05       	cpc	r19, r1
    35ae:	89 f1       	breq	.+98     	; 0x3612 <DIO_SetPinValue+0xda>
    35b0:	88 85       	ldd	r24, Y+8	; 0x08
    35b2:	99 85       	ldd	r25, Y+9	; 0x09
    35b4:	83 30       	cpi	r24, 0x03	; 3
    35b6:	91 05       	cpc	r25, r1
    35b8:	09 f4       	brne	.+2      	; 0x35bc <DIO_SetPinValue+0x84>
    35ba:	40 c0       	rjmp	.+128    	; 0x363c <DIO_SetPinValue+0x104>
    35bc:	31 c1       	rjmp	.+610    	; 0x3820 <DIO_SetPinValue+0x2e8>
		case PORT_A:
			CLEAR_BIT(PORTA, pin);
    35be:	ab e3       	ldi	r26, 0x3B	; 59
    35c0:	b0 e0       	ldi	r27, 0x00	; 0
    35c2:	eb e3       	ldi	r30, 0x3B	; 59
    35c4:	f0 e0       	ldi	r31, 0x00	; 0
    35c6:	80 81       	ld	r24, Z
    35c8:	48 2f       	mov	r20, r24
    35ca:	8a 81       	ldd	r24, Y+2	; 0x02
    35cc:	28 2f       	mov	r18, r24
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	02 2e       	mov	r0, r18
    35d6:	02 c0       	rjmp	.+4      	; 0x35dc <DIO_SetPinValue+0xa4>
    35d8:	88 0f       	add	r24, r24
    35da:	99 1f       	adc	r25, r25
    35dc:	0a 94       	dec	r0
    35de:	e2 f7       	brpl	.-8      	; 0x35d8 <DIO_SetPinValue+0xa0>
    35e0:	80 95       	com	r24
    35e2:	84 23       	and	r24, r20
    35e4:	8c 93       	st	X, r24
    35e6:	1c c1       	rjmp	.+568    	; 0x3820 <DIO_SetPinValue+0x2e8>
			break;
		case PORT_B:
			CLEAR_BIT(PORTB, pin);
    35e8:	a8 e3       	ldi	r26, 0x38	; 56
    35ea:	b0 e0       	ldi	r27, 0x00	; 0
    35ec:	e8 e3       	ldi	r30, 0x38	; 56
    35ee:	f0 e0       	ldi	r31, 0x00	; 0
    35f0:	80 81       	ld	r24, Z
    35f2:	48 2f       	mov	r20, r24
    35f4:	8a 81       	ldd	r24, Y+2	; 0x02
    35f6:	28 2f       	mov	r18, r24
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	02 2e       	mov	r0, r18
    3600:	02 c0       	rjmp	.+4      	; 0x3606 <DIO_SetPinValue+0xce>
    3602:	88 0f       	add	r24, r24
    3604:	99 1f       	adc	r25, r25
    3606:	0a 94       	dec	r0
    3608:	e2 f7       	brpl	.-8      	; 0x3602 <DIO_SetPinValue+0xca>
    360a:	80 95       	com	r24
    360c:	84 23       	and	r24, r20
    360e:	8c 93       	st	X, r24
    3610:	07 c1       	rjmp	.+526    	; 0x3820 <DIO_SetPinValue+0x2e8>
			break;
		case PORT_C:
			CLEAR_BIT(PORTC, pin);
    3612:	a5 e3       	ldi	r26, 0x35	; 53
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	e5 e3       	ldi	r30, 0x35	; 53
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	48 2f       	mov	r20, r24
    361e:	8a 81       	ldd	r24, Y+2	; 0x02
    3620:	28 2f       	mov	r18, r24
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	02 2e       	mov	r0, r18
    362a:	02 c0       	rjmp	.+4      	; 0x3630 <DIO_SetPinValue+0xf8>
    362c:	88 0f       	add	r24, r24
    362e:	99 1f       	adc	r25, r25
    3630:	0a 94       	dec	r0
    3632:	e2 f7       	brpl	.-8      	; 0x362c <DIO_SetPinValue+0xf4>
    3634:	80 95       	com	r24
    3636:	84 23       	and	r24, r20
    3638:	8c 93       	st	X, r24
    363a:	f2 c0       	rjmp	.+484    	; 0x3820 <DIO_SetPinValue+0x2e8>
			break;
		case PORT_D:
			CLEAR_BIT(PORTD, pin);
    363c:	a2 e3       	ldi	r26, 0x32	; 50
    363e:	b0 e0       	ldi	r27, 0x00	; 0
    3640:	e2 e3       	ldi	r30, 0x32	; 50
    3642:	f0 e0       	ldi	r31, 0x00	; 0
    3644:	80 81       	ld	r24, Z
    3646:	48 2f       	mov	r20, r24
    3648:	8a 81       	ldd	r24, Y+2	; 0x02
    364a:	28 2f       	mov	r18, r24
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	02 2e       	mov	r0, r18
    3654:	02 c0       	rjmp	.+4      	; 0x365a <DIO_SetPinValue+0x122>
    3656:	88 0f       	add	r24, r24
    3658:	99 1f       	adc	r25, r25
    365a:	0a 94       	dec	r0
    365c:	e2 f7       	brpl	.-8      	; 0x3656 <DIO_SetPinValue+0x11e>
    365e:	80 95       	com	r24
    3660:	84 23       	and	r24, r20
    3662:	8c 93       	st	X, r24
    3664:	dd c0       	rjmp	.+442    	; 0x3820 <DIO_SetPinValue+0x2e8>
			break;
		}
		break;
	case PIN_HIGH:
		switch (port){
    3666:	89 81       	ldd	r24, Y+1	; 0x01
    3668:	28 2f       	mov	r18, r24
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	3f 83       	std	Y+7, r19	; 0x07
    366e:	2e 83       	std	Y+6, r18	; 0x06
    3670:	8e 81       	ldd	r24, Y+6	; 0x06
    3672:	9f 81       	ldd	r25, Y+7	; 0x07
    3674:	81 30       	cpi	r24, 0x01	; 1
    3676:	91 05       	cpc	r25, r1
    3678:	49 f1       	breq	.+82     	; 0x36cc <DIO_SetPinValue+0x194>
    367a:	2e 81       	ldd	r18, Y+6	; 0x06
    367c:	3f 81       	ldd	r19, Y+7	; 0x07
    367e:	22 30       	cpi	r18, 0x02	; 2
    3680:	31 05       	cpc	r19, r1
    3682:	2c f4       	brge	.+10     	; 0x368e <DIO_SetPinValue+0x156>
    3684:	8e 81       	ldd	r24, Y+6	; 0x06
    3686:	9f 81       	ldd	r25, Y+7	; 0x07
    3688:	00 97       	sbiw	r24, 0x00	; 0
    368a:	61 f0       	breq	.+24     	; 0x36a4 <DIO_SetPinValue+0x16c>
    368c:	c9 c0       	rjmp	.+402    	; 0x3820 <DIO_SetPinValue+0x2e8>
    368e:	2e 81       	ldd	r18, Y+6	; 0x06
    3690:	3f 81       	ldd	r19, Y+7	; 0x07
    3692:	22 30       	cpi	r18, 0x02	; 2
    3694:	31 05       	cpc	r19, r1
    3696:	71 f1       	breq	.+92     	; 0x36f4 <DIO_SetPinValue+0x1bc>
    3698:	8e 81       	ldd	r24, Y+6	; 0x06
    369a:	9f 81       	ldd	r25, Y+7	; 0x07
    369c:	83 30       	cpi	r24, 0x03	; 3
    369e:	91 05       	cpc	r25, r1
    36a0:	e9 f1       	breq	.+122    	; 0x371c <DIO_SetPinValue+0x1e4>
    36a2:	be c0       	rjmp	.+380    	; 0x3820 <DIO_SetPinValue+0x2e8>
		case PORT_A:
			SET_BIT(PORTA, pin);
    36a4:	ab e3       	ldi	r26, 0x3B	; 59
    36a6:	b0 e0       	ldi	r27, 0x00	; 0
    36a8:	eb e3       	ldi	r30, 0x3B	; 59
    36aa:	f0 e0       	ldi	r31, 0x00	; 0
    36ac:	80 81       	ld	r24, Z
    36ae:	48 2f       	mov	r20, r24
    36b0:	8a 81       	ldd	r24, Y+2	; 0x02
    36b2:	28 2f       	mov	r18, r24
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	02 2e       	mov	r0, r18
    36bc:	02 c0       	rjmp	.+4      	; 0x36c2 <DIO_SetPinValue+0x18a>
    36be:	88 0f       	add	r24, r24
    36c0:	99 1f       	adc	r25, r25
    36c2:	0a 94       	dec	r0
    36c4:	e2 f7       	brpl	.-8      	; 0x36be <DIO_SetPinValue+0x186>
    36c6:	84 2b       	or	r24, r20
    36c8:	8c 93       	st	X, r24
    36ca:	aa c0       	rjmp	.+340    	; 0x3820 <DIO_SetPinValue+0x2e8>
			break;
		case PORT_B:
			SET_BIT(PORTB, pin);
    36cc:	a8 e3       	ldi	r26, 0x38	; 56
    36ce:	b0 e0       	ldi	r27, 0x00	; 0
    36d0:	e8 e3       	ldi	r30, 0x38	; 56
    36d2:	f0 e0       	ldi	r31, 0x00	; 0
    36d4:	80 81       	ld	r24, Z
    36d6:	48 2f       	mov	r20, r24
    36d8:	8a 81       	ldd	r24, Y+2	; 0x02
    36da:	28 2f       	mov	r18, r24
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	02 2e       	mov	r0, r18
    36e4:	02 c0       	rjmp	.+4      	; 0x36ea <DIO_SetPinValue+0x1b2>
    36e6:	88 0f       	add	r24, r24
    36e8:	99 1f       	adc	r25, r25
    36ea:	0a 94       	dec	r0
    36ec:	e2 f7       	brpl	.-8      	; 0x36e6 <DIO_SetPinValue+0x1ae>
    36ee:	84 2b       	or	r24, r20
    36f0:	8c 93       	st	X, r24
    36f2:	96 c0       	rjmp	.+300    	; 0x3820 <DIO_SetPinValue+0x2e8>
			break;
		case PORT_C:
			SET_BIT(PORTC, pin);
    36f4:	a5 e3       	ldi	r26, 0x35	; 53
    36f6:	b0 e0       	ldi	r27, 0x00	; 0
    36f8:	e5 e3       	ldi	r30, 0x35	; 53
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	80 81       	ld	r24, Z
    36fe:	48 2f       	mov	r20, r24
    3700:	8a 81       	ldd	r24, Y+2	; 0x02
    3702:	28 2f       	mov	r18, r24
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	02 2e       	mov	r0, r18
    370c:	02 c0       	rjmp	.+4      	; 0x3712 <DIO_SetPinValue+0x1da>
    370e:	88 0f       	add	r24, r24
    3710:	99 1f       	adc	r25, r25
    3712:	0a 94       	dec	r0
    3714:	e2 f7       	brpl	.-8      	; 0x370e <DIO_SetPinValue+0x1d6>
    3716:	84 2b       	or	r24, r20
    3718:	8c 93       	st	X, r24
    371a:	82 c0       	rjmp	.+260    	; 0x3820 <DIO_SetPinValue+0x2e8>
			break;
		case PORT_D:
			SET_BIT(PORTD, pin);
    371c:	a2 e3       	ldi	r26, 0x32	; 50
    371e:	b0 e0       	ldi	r27, 0x00	; 0
    3720:	e2 e3       	ldi	r30, 0x32	; 50
    3722:	f0 e0       	ldi	r31, 0x00	; 0
    3724:	80 81       	ld	r24, Z
    3726:	48 2f       	mov	r20, r24
    3728:	8a 81       	ldd	r24, Y+2	; 0x02
    372a:	28 2f       	mov	r18, r24
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	02 2e       	mov	r0, r18
    3734:	02 c0       	rjmp	.+4      	; 0x373a <DIO_SetPinValue+0x202>
    3736:	88 0f       	add	r24, r24
    3738:	99 1f       	adc	r25, r25
    373a:	0a 94       	dec	r0
    373c:	e2 f7       	brpl	.-8      	; 0x3736 <DIO_SetPinValue+0x1fe>
    373e:	84 2b       	or	r24, r20
    3740:	8c 93       	st	X, r24
    3742:	6e c0       	rjmp	.+220    	; 0x3820 <DIO_SetPinValue+0x2e8>
			break;
		}
		break;
	case PIN_TOGGLE:
		switch (port){
    3744:	89 81       	ldd	r24, Y+1	; 0x01
    3746:	28 2f       	mov	r18, r24
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	3d 83       	std	Y+5, r19	; 0x05
    374c:	2c 83       	std	Y+4, r18	; 0x04
    374e:	8c 81       	ldd	r24, Y+4	; 0x04
    3750:	9d 81       	ldd	r25, Y+5	; 0x05
    3752:	81 30       	cpi	r24, 0x01	; 1
    3754:	91 05       	cpc	r25, r1
    3756:	49 f1       	breq	.+82     	; 0x37aa <DIO_SetPinValue+0x272>
    3758:	2c 81       	ldd	r18, Y+4	; 0x04
    375a:	3d 81       	ldd	r19, Y+5	; 0x05
    375c:	22 30       	cpi	r18, 0x02	; 2
    375e:	31 05       	cpc	r19, r1
    3760:	2c f4       	brge	.+10     	; 0x376c <DIO_SetPinValue+0x234>
    3762:	8c 81       	ldd	r24, Y+4	; 0x04
    3764:	9d 81       	ldd	r25, Y+5	; 0x05
    3766:	00 97       	sbiw	r24, 0x00	; 0
    3768:	61 f0       	breq	.+24     	; 0x3782 <DIO_SetPinValue+0x24a>
    376a:	5a c0       	rjmp	.+180    	; 0x3820 <DIO_SetPinValue+0x2e8>
    376c:	2c 81       	ldd	r18, Y+4	; 0x04
    376e:	3d 81       	ldd	r19, Y+5	; 0x05
    3770:	22 30       	cpi	r18, 0x02	; 2
    3772:	31 05       	cpc	r19, r1
    3774:	71 f1       	breq	.+92     	; 0x37d2 <DIO_SetPinValue+0x29a>
    3776:	8c 81       	ldd	r24, Y+4	; 0x04
    3778:	9d 81       	ldd	r25, Y+5	; 0x05
    377a:	83 30       	cpi	r24, 0x03	; 3
    377c:	91 05       	cpc	r25, r1
    377e:	e9 f1       	breq	.+122    	; 0x37fa <DIO_SetPinValue+0x2c2>
    3780:	4f c0       	rjmp	.+158    	; 0x3820 <DIO_SetPinValue+0x2e8>
		case PORT_A:
			TOG_BIT(PORTA, pin);
    3782:	ab e3       	ldi	r26, 0x3B	; 59
    3784:	b0 e0       	ldi	r27, 0x00	; 0
    3786:	eb e3       	ldi	r30, 0x3B	; 59
    3788:	f0 e0       	ldi	r31, 0x00	; 0
    378a:	80 81       	ld	r24, Z
    378c:	48 2f       	mov	r20, r24
    378e:	8a 81       	ldd	r24, Y+2	; 0x02
    3790:	28 2f       	mov	r18, r24
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	81 e0       	ldi	r24, 0x01	; 1
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	02 2e       	mov	r0, r18
    379a:	02 c0       	rjmp	.+4      	; 0x37a0 <DIO_SetPinValue+0x268>
    379c:	88 0f       	add	r24, r24
    379e:	99 1f       	adc	r25, r25
    37a0:	0a 94       	dec	r0
    37a2:	e2 f7       	brpl	.-8      	; 0x379c <DIO_SetPinValue+0x264>
    37a4:	84 27       	eor	r24, r20
    37a6:	8c 93       	st	X, r24
    37a8:	3b c0       	rjmp	.+118    	; 0x3820 <DIO_SetPinValue+0x2e8>
			break;
		case PORT_B:
			TOG_BIT(PORTB, pin);
    37aa:	a8 e3       	ldi	r26, 0x38	; 56
    37ac:	b0 e0       	ldi	r27, 0x00	; 0
    37ae:	e8 e3       	ldi	r30, 0x38	; 56
    37b0:	f0 e0       	ldi	r31, 0x00	; 0
    37b2:	80 81       	ld	r24, Z
    37b4:	48 2f       	mov	r20, r24
    37b6:	8a 81       	ldd	r24, Y+2	; 0x02
    37b8:	28 2f       	mov	r18, r24
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	02 2e       	mov	r0, r18
    37c2:	02 c0       	rjmp	.+4      	; 0x37c8 <DIO_SetPinValue+0x290>
    37c4:	88 0f       	add	r24, r24
    37c6:	99 1f       	adc	r25, r25
    37c8:	0a 94       	dec	r0
    37ca:	e2 f7       	brpl	.-8      	; 0x37c4 <DIO_SetPinValue+0x28c>
    37cc:	84 27       	eor	r24, r20
    37ce:	8c 93       	st	X, r24
    37d0:	27 c0       	rjmp	.+78     	; 0x3820 <DIO_SetPinValue+0x2e8>
			break;
		case PORT_C:
			TOG_BIT(PORTC, pin);
    37d2:	a5 e3       	ldi	r26, 0x35	; 53
    37d4:	b0 e0       	ldi	r27, 0x00	; 0
    37d6:	e5 e3       	ldi	r30, 0x35	; 53
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	80 81       	ld	r24, Z
    37dc:	48 2f       	mov	r20, r24
    37de:	8a 81       	ldd	r24, Y+2	; 0x02
    37e0:	28 2f       	mov	r18, r24
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	02 2e       	mov	r0, r18
    37ea:	02 c0       	rjmp	.+4      	; 0x37f0 <DIO_SetPinValue+0x2b8>
    37ec:	88 0f       	add	r24, r24
    37ee:	99 1f       	adc	r25, r25
    37f0:	0a 94       	dec	r0
    37f2:	e2 f7       	brpl	.-8      	; 0x37ec <DIO_SetPinValue+0x2b4>
    37f4:	84 27       	eor	r24, r20
    37f6:	8c 93       	st	X, r24
    37f8:	13 c0       	rjmp	.+38     	; 0x3820 <DIO_SetPinValue+0x2e8>
			break;
		case PORT_D:
			TOG_BIT(PORTD, pin);
    37fa:	a2 e3       	ldi	r26, 0x32	; 50
    37fc:	b0 e0       	ldi	r27, 0x00	; 0
    37fe:	e2 e3       	ldi	r30, 0x32	; 50
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	48 2f       	mov	r20, r24
    3806:	8a 81       	ldd	r24, Y+2	; 0x02
    3808:	28 2f       	mov	r18, r24
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	02 2e       	mov	r0, r18
    3812:	02 c0       	rjmp	.+4      	; 0x3818 <DIO_SetPinValue+0x2e0>
    3814:	88 0f       	add	r24, r24
    3816:	99 1f       	adc	r25, r25
    3818:	0a 94       	dec	r0
    381a:	e2 f7       	brpl	.-8      	; 0x3814 <DIO_SetPinValue+0x2dc>
    381c:	84 27       	eor	r24, r20
    381e:	8c 93       	st	X, r24
			break;
		}
	}
}
    3820:	2b 96       	adiw	r28, 0x0b	; 11
    3822:	0f b6       	in	r0, 0x3f	; 63
    3824:	f8 94       	cli
    3826:	de bf       	out	0x3e, r29	; 62
    3828:	0f be       	out	0x3f, r0	; 63
    382a:	cd bf       	out	0x3d, r28	; 61
    382c:	cf 91       	pop	r28
    382e:	df 91       	pop	r29
    3830:	08 95       	ret

00003832 <DIO_GetPinValue>:

u8_t DIO_GetPinValue(u8_t port, u8_t pin){
    3832:	df 93       	push	r29
    3834:	cf 93       	push	r28
    3836:	00 d0       	rcall	.+0      	; 0x3838 <DIO_GetPinValue+0x6>
    3838:	00 d0       	rcall	.+0      	; 0x383a <DIO_GetPinValue+0x8>
    383a:	0f 92       	push	r0
    383c:	cd b7       	in	r28, 0x3d	; 61
    383e:	de b7       	in	r29, 0x3e	; 62
    3840:	8a 83       	std	Y+2, r24	; 0x02
    3842:	6b 83       	std	Y+3, r22	; 0x03
	u8_t get_pin;
	switch(port){
    3844:	8a 81       	ldd	r24, Y+2	; 0x02
    3846:	28 2f       	mov	r18, r24
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	3d 83       	std	Y+5, r19	; 0x05
    384c:	2c 83       	std	Y+4, r18	; 0x04
    384e:	4c 81       	ldd	r20, Y+4	; 0x04
    3850:	5d 81       	ldd	r21, Y+5	; 0x05
    3852:	41 30       	cpi	r20, 0x01	; 1
    3854:	51 05       	cpc	r21, r1
    3856:	41 f1       	breq	.+80     	; 0x38a8 <DIO_GetPinValue+0x76>
    3858:	8c 81       	ldd	r24, Y+4	; 0x04
    385a:	9d 81       	ldd	r25, Y+5	; 0x05
    385c:	82 30       	cpi	r24, 0x02	; 2
    385e:	91 05       	cpc	r25, r1
    3860:	34 f4       	brge	.+12     	; 0x386e <DIO_GetPinValue+0x3c>
    3862:	2c 81       	ldd	r18, Y+4	; 0x04
    3864:	3d 81       	ldd	r19, Y+5	; 0x05
    3866:	21 15       	cp	r18, r1
    3868:	31 05       	cpc	r19, r1
    386a:	61 f0       	breq	.+24     	; 0x3884 <DIO_GetPinValue+0x52>
    386c:	52 c0       	rjmp	.+164    	; 0x3912 <DIO_GetPinValue+0xe0>
    386e:	4c 81       	ldd	r20, Y+4	; 0x04
    3870:	5d 81       	ldd	r21, Y+5	; 0x05
    3872:	42 30       	cpi	r20, 0x02	; 2
    3874:	51 05       	cpc	r21, r1
    3876:	51 f1       	breq	.+84     	; 0x38cc <DIO_GetPinValue+0x9a>
    3878:	8c 81       	ldd	r24, Y+4	; 0x04
    387a:	9d 81       	ldd	r25, Y+5	; 0x05
    387c:	83 30       	cpi	r24, 0x03	; 3
    387e:	91 05       	cpc	r25, r1
    3880:	b9 f1       	breq	.+110    	; 0x38f0 <DIO_GetPinValue+0xbe>
    3882:	47 c0       	rjmp	.+142    	; 0x3912 <DIO_GetPinValue+0xe0>
	case PORT_A:
		get_pin = GET_BIT(PINA, pin);
    3884:	e9 e3       	ldi	r30, 0x39	; 57
    3886:	f0 e0       	ldi	r31, 0x00	; 0
    3888:	80 81       	ld	r24, Z
    388a:	28 2f       	mov	r18, r24
    388c:	30 e0       	ldi	r19, 0x00	; 0
    388e:	8b 81       	ldd	r24, Y+3	; 0x03
    3890:	88 2f       	mov	r24, r24
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	a9 01       	movw	r20, r18
    3896:	02 c0       	rjmp	.+4      	; 0x389c <DIO_GetPinValue+0x6a>
    3898:	55 95       	asr	r21
    389a:	47 95       	ror	r20
    389c:	8a 95       	dec	r24
    389e:	e2 f7       	brpl	.-8      	; 0x3898 <DIO_GetPinValue+0x66>
    38a0:	ca 01       	movw	r24, r20
    38a2:	81 70       	andi	r24, 0x01	; 1
    38a4:	89 83       	std	Y+1, r24	; 0x01
    38a6:	35 c0       	rjmp	.+106    	; 0x3912 <DIO_GetPinValue+0xe0>
		break;
	case PORT_B:
		get_pin = GET_BIT(PINB, pin);
    38a8:	e6 e3       	ldi	r30, 0x36	; 54
    38aa:	f0 e0       	ldi	r31, 0x00	; 0
    38ac:	80 81       	ld	r24, Z
    38ae:	28 2f       	mov	r18, r24
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	8b 81       	ldd	r24, Y+3	; 0x03
    38b4:	88 2f       	mov	r24, r24
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	a9 01       	movw	r20, r18
    38ba:	02 c0       	rjmp	.+4      	; 0x38c0 <DIO_GetPinValue+0x8e>
    38bc:	55 95       	asr	r21
    38be:	47 95       	ror	r20
    38c0:	8a 95       	dec	r24
    38c2:	e2 f7       	brpl	.-8      	; 0x38bc <DIO_GetPinValue+0x8a>
    38c4:	ca 01       	movw	r24, r20
    38c6:	81 70       	andi	r24, 0x01	; 1
    38c8:	89 83       	std	Y+1, r24	; 0x01
    38ca:	23 c0       	rjmp	.+70     	; 0x3912 <DIO_GetPinValue+0xe0>
		break;
	case PORT_C:
		get_pin = GET_BIT(PINC, pin);
    38cc:	e3 e3       	ldi	r30, 0x33	; 51
    38ce:	f0 e0       	ldi	r31, 0x00	; 0
    38d0:	80 81       	ld	r24, Z
    38d2:	28 2f       	mov	r18, r24
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	8b 81       	ldd	r24, Y+3	; 0x03
    38d8:	88 2f       	mov	r24, r24
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	a9 01       	movw	r20, r18
    38de:	02 c0       	rjmp	.+4      	; 0x38e4 <DIO_GetPinValue+0xb2>
    38e0:	55 95       	asr	r21
    38e2:	47 95       	ror	r20
    38e4:	8a 95       	dec	r24
    38e6:	e2 f7       	brpl	.-8      	; 0x38e0 <DIO_GetPinValue+0xae>
    38e8:	ca 01       	movw	r24, r20
    38ea:	81 70       	andi	r24, 0x01	; 1
    38ec:	89 83       	std	Y+1, r24	; 0x01
    38ee:	11 c0       	rjmp	.+34     	; 0x3912 <DIO_GetPinValue+0xe0>
		break;
	case PORT_D:
		get_pin = GET_BIT(PIND, pin);
    38f0:	e0 e3       	ldi	r30, 0x30	; 48
    38f2:	f0 e0       	ldi	r31, 0x00	; 0
    38f4:	80 81       	ld	r24, Z
    38f6:	28 2f       	mov	r18, r24
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	8b 81       	ldd	r24, Y+3	; 0x03
    38fc:	88 2f       	mov	r24, r24
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	a9 01       	movw	r20, r18
    3902:	02 c0       	rjmp	.+4      	; 0x3908 <DIO_GetPinValue+0xd6>
    3904:	55 95       	asr	r21
    3906:	47 95       	ror	r20
    3908:	8a 95       	dec	r24
    390a:	e2 f7       	brpl	.-8      	; 0x3904 <DIO_GetPinValue+0xd2>
    390c:	ca 01       	movw	r24, r20
    390e:	81 70       	andi	r24, 0x01	; 1
    3910:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return get_pin;
    3912:	89 81       	ldd	r24, Y+1	; 0x01
}
    3914:	0f 90       	pop	r0
    3916:	0f 90       	pop	r0
    3918:	0f 90       	pop	r0
    391a:	0f 90       	pop	r0
    391c:	0f 90       	pop	r0
    391e:	cf 91       	pop	r28
    3920:	df 91       	pop	r29
    3922:	08 95       	ret

00003924 <DIO_EnablePinPullup>:

void DIO_EnablePinPullup(u8_t port, u8_t pin){
    3924:	df 93       	push	r29
    3926:	cf 93       	push	r28
    3928:	00 d0       	rcall	.+0      	; 0x392a <DIO_EnablePinPullup+0x6>
    392a:	00 d0       	rcall	.+0      	; 0x392c <DIO_EnablePinPullup+0x8>
    392c:	cd b7       	in	r28, 0x3d	; 61
    392e:	de b7       	in	r29, 0x3e	; 62
    3930:	89 83       	std	Y+1, r24	; 0x01
    3932:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
    3934:	89 81       	ldd	r24, Y+1	; 0x01
    3936:	28 2f       	mov	r18, r24
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	3c 83       	std	Y+4, r19	; 0x04
    393c:	2b 83       	std	Y+3, r18	; 0x03
    393e:	8b 81       	ldd	r24, Y+3	; 0x03
    3940:	9c 81       	ldd	r25, Y+4	; 0x04
    3942:	81 30       	cpi	r24, 0x01	; 1
    3944:	91 05       	cpc	r25, r1
    3946:	49 f1       	breq	.+82     	; 0x399a <DIO_EnablePinPullup+0x76>
    3948:	2b 81       	ldd	r18, Y+3	; 0x03
    394a:	3c 81       	ldd	r19, Y+4	; 0x04
    394c:	22 30       	cpi	r18, 0x02	; 2
    394e:	31 05       	cpc	r19, r1
    3950:	2c f4       	brge	.+10     	; 0x395c <DIO_EnablePinPullup+0x38>
    3952:	8b 81       	ldd	r24, Y+3	; 0x03
    3954:	9c 81       	ldd	r25, Y+4	; 0x04
    3956:	00 97       	sbiw	r24, 0x00	; 0
    3958:	61 f0       	breq	.+24     	; 0x3972 <DIO_EnablePinPullup+0x4e>
    395a:	5a c0       	rjmp	.+180    	; 0x3a10 <DIO_EnablePinPullup+0xec>
    395c:	2b 81       	ldd	r18, Y+3	; 0x03
    395e:	3c 81       	ldd	r19, Y+4	; 0x04
    3960:	22 30       	cpi	r18, 0x02	; 2
    3962:	31 05       	cpc	r19, r1
    3964:	71 f1       	breq	.+92     	; 0x39c2 <DIO_EnablePinPullup+0x9e>
    3966:	8b 81       	ldd	r24, Y+3	; 0x03
    3968:	9c 81       	ldd	r25, Y+4	; 0x04
    396a:	83 30       	cpi	r24, 0x03	; 3
    396c:	91 05       	cpc	r25, r1
    396e:	e9 f1       	breq	.+122    	; 0x39ea <DIO_EnablePinPullup+0xc6>
    3970:	4f c0       	rjmp	.+158    	; 0x3a10 <DIO_EnablePinPullup+0xec>
	case PORT_A:
		SET_BIT(PORTA, pin);
    3972:	ab e3       	ldi	r26, 0x3B	; 59
    3974:	b0 e0       	ldi	r27, 0x00	; 0
    3976:	eb e3       	ldi	r30, 0x3B	; 59
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	80 81       	ld	r24, Z
    397c:	48 2f       	mov	r20, r24
    397e:	8a 81       	ldd	r24, Y+2	; 0x02
    3980:	28 2f       	mov	r18, r24
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	02 2e       	mov	r0, r18
    398a:	02 c0       	rjmp	.+4      	; 0x3990 <DIO_EnablePinPullup+0x6c>
    398c:	88 0f       	add	r24, r24
    398e:	99 1f       	adc	r25, r25
    3990:	0a 94       	dec	r0
    3992:	e2 f7       	brpl	.-8      	; 0x398c <DIO_EnablePinPullup+0x68>
    3994:	84 2b       	or	r24, r20
    3996:	8c 93       	st	X, r24
    3998:	3b c0       	rjmp	.+118    	; 0x3a10 <DIO_EnablePinPullup+0xec>
		break;
	case PORT_B:
		SET_BIT(PORTB, pin);
    399a:	a8 e3       	ldi	r26, 0x38	; 56
    399c:	b0 e0       	ldi	r27, 0x00	; 0
    399e:	e8 e3       	ldi	r30, 0x38	; 56
    39a0:	f0 e0       	ldi	r31, 0x00	; 0
    39a2:	80 81       	ld	r24, Z
    39a4:	48 2f       	mov	r20, r24
    39a6:	8a 81       	ldd	r24, Y+2	; 0x02
    39a8:	28 2f       	mov	r18, r24
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	02 2e       	mov	r0, r18
    39b2:	02 c0       	rjmp	.+4      	; 0x39b8 <DIO_EnablePinPullup+0x94>
    39b4:	88 0f       	add	r24, r24
    39b6:	99 1f       	adc	r25, r25
    39b8:	0a 94       	dec	r0
    39ba:	e2 f7       	brpl	.-8      	; 0x39b4 <DIO_EnablePinPullup+0x90>
    39bc:	84 2b       	or	r24, r20
    39be:	8c 93       	st	X, r24
    39c0:	27 c0       	rjmp	.+78     	; 0x3a10 <DIO_EnablePinPullup+0xec>
		break;
	case PORT_C:
		SET_BIT(PORTC, pin);
    39c2:	a5 e3       	ldi	r26, 0x35	; 53
    39c4:	b0 e0       	ldi	r27, 0x00	; 0
    39c6:	e5 e3       	ldi	r30, 0x35	; 53
    39c8:	f0 e0       	ldi	r31, 0x00	; 0
    39ca:	80 81       	ld	r24, Z
    39cc:	48 2f       	mov	r20, r24
    39ce:	8a 81       	ldd	r24, Y+2	; 0x02
    39d0:	28 2f       	mov	r18, r24
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	81 e0       	ldi	r24, 0x01	; 1
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	02 2e       	mov	r0, r18
    39da:	02 c0       	rjmp	.+4      	; 0x39e0 <DIO_EnablePinPullup+0xbc>
    39dc:	88 0f       	add	r24, r24
    39de:	99 1f       	adc	r25, r25
    39e0:	0a 94       	dec	r0
    39e2:	e2 f7       	brpl	.-8      	; 0x39dc <DIO_EnablePinPullup+0xb8>
    39e4:	84 2b       	or	r24, r20
    39e6:	8c 93       	st	X, r24
    39e8:	13 c0       	rjmp	.+38     	; 0x3a10 <DIO_EnablePinPullup+0xec>
		break;
	case PORT_D:
		SET_BIT(PORTD, pin);
    39ea:	a2 e3       	ldi	r26, 0x32	; 50
    39ec:	b0 e0       	ldi	r27, 0x00	; 0
    39ee:	e2 e3       	ldi	r30, 0x32	; 50
    39f0:	f0 e0       	ldi	r31, 0x00	; 0
    39f2:	80 81       	ld	r24, Z
    39f4:	48 2f       	mov	r20, r24
    39f6:	8a 81       	ldd	r24, Y+2	; 0x02
    39f8:	28 2f       	mov	r18, r24
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	02 2e       	mov	r0, r18
    3a02:	02 c0       	rjmp	.+4      	; 0x3a08 <DIO_EnablePinPullup+0xe4>
    3a04:	88 0f       	add	r24, r24
    3a06:	99 1f       	adc	r25, r25
    3a08:	0a 94       	dec	r0
    3a0a:	e2 f7       	brpl	.-8      	; 0x3a04 <DIO_EnablePinPullup+0xe0>
    3a0c:	84 2b       	or	r24, r20
    3a0e:	8c 93       	st	X, r24
		break;
	}
}
    3a10:	0f 90       	pop	r0
    3a12:	0f 90       	pop	r0
    3a14:	0f 90       	pop	r0
    3a16:	0f 90       	pop	r0
    3a18:	cf 91       	pop	r28
    3a1a:	df 91       	pop	r29
    3a1c:	08 95       	ret

00003a1e <DELAY_Timer0_us>:

/********************************\
*********** Functions ************
\********************************/

void DELAY_Timer0_us(u32_t time_in_us){
    3a1e:	df 93       	push	r29
    3a20:	cf 93       	push	r28
    3a22:	cd b7       	in	r28, 0x3d	; 61
    3a24:	de b7       	in	r29, 0x3e	; 62
    3a26:	28 97       	sbiw	r28, 0x08	; 8
    3a28:	0f b6       	in	r0, 0x3f	; 63
    3a2a:	f8 94       	cli
    3a2c:	de bf       	out	0x3e, r29	; 62
    3a2e:	0f be       	out	0x3f, r0	; 63
    3a30:	cd bf       	out	0x3d, r28	; 61
    3a32:	6d 83       	std	Y+5, r22	; 0x05
    3a34:	7e 83       	std	Y+6, r23	; 0x06
    3a36:	8f 83       	std	Y+7, r24	; 0x07
    3a38:	98 87       	std	Y+8, r25	; 0x08
	if (time_in_us <= 16){
    3a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a3e:	af 81       	ldd	r26, Y+7	; 0x07
    3a40:	b8 85       	ldd	r27, Y+8	; 0x08
    3a42:	81 31       	cpi	r24, 0x11	; 17
    3a44:	91 05       	cpc	r25, r1
    3a46:	a1 05       	cpc	r26, r1
    3a48:	b1 05       	cpc	r27, r1
    3a4a:	e0 f4       	brcc	.+56     	; 0x3a84 <DELAY_Timer0_us+0x66>
		TIMER_Timer0_Init(TIMER0_CTC, TIMER0_NO_PRESCALER);
    3a4c:	82 e0       	ldi	r24, 0x02	; 2
    3a4e:	61 e0       	ldi	r22, 0x01	; 1
    3a50:	0e 94 05 08 	call	0x100a	; 0x100a <TIMER_Timer0_Init>
		TIMER_Timer0_OCR0_Set((u8_t) (time_in_us * (F_CPU / 1000000)) - 1);
    3a54:	8d 81       	ldd	r24, Y+5	; 0x05
    3a56:	9e 81       	ldd	r25, Y+6	; 0x06
    3a58:	af 81       	ldd	r26, Y+7	; 0x07
    3a5a:	b8 85       	ldd	r27, Y+8	; 0x08
    3a5c:	88 0f       	add	r24, r24
    3a5e:	99 1f       	adc	r25, r25
    3a60:	aa 1f       	adc	r26, r26
    3a62:	bb 1f       	adc	r27, r27
    3a64:	88 0f       	add	r24, r24
    3a66:	99 1f       	adc	r25, r25
    3a68:	aa 1f       	adc	r26, r26
    3a6a:	bb 1f       	adc	r27, r27
    3a6c:	88 0f       	add	r24, r24
    3a6e:	99 1f       	adc	r25, r25
    3a70:	aa 1f       	adc	r26, r26
    3a72:	bb 1f       	adc	r27, r27
    3a74:	88 0f       	add	r24, r24
    3a76:	99 1f       	adc	r25, r25
    3a78:	aa 1f       	adc	r26, r26
    3a7a:	bb 1f       	adc	r27, r27
    3a7c:	81 50       	subi	r24, 0x01	; 1
    3a7e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <TIMER_Timer0_OCR0_Set>
    3a82:	95 c0       	rjmp	.+298    	; 0x3bae <DELAY_Timer0_us+0x190>
	}
	else if (time_in_us <= 128){
    3a84:	8d 81       	ldd	r24, Y+5	; 0x05
    3a86:	9e 81       	ldd	r25, Y+6	; 0x06
    3a88:	af 81       	ldd	r26, Y+7	; 0x07
    3a8a:	b8 85       	ldd	r27, Y+8	; 0x08
    3a8c:	81 38       	cpi	r24, 0x81	; 129
    3a8e:	91 05       	cpc	r25, r1
    3a90:	a1 05       	cpc	r26, r1
    3a92:	b1 05       	cpc	r27, r1
    3a94:	20 f5       	brcc	.+72     	; 0x3ade <DELAY_Timer0_us+0xc0>
		TIMER_Timer0_Init(TIMER0_CTC, TIMER0_PRESCALER_8);
    3a96:	82 e0       	ldi	r24, 0x02	; 2
    3a98:	62 e0       	ldi	r22, 0x02	; 2
    3a9a:	0e 94 05 08 	call	0x100a	; 0x100a <TIMER_Timer0_Init>
		TIMER_Timer0_OCR0_Set((u8_t) (time_in_us * (F_CPU / 1000000) / 8) - 1);
    3a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa2:	af 81       	ldd	r26, Y+7	; 0x07
    3aa4:	b8 85       	ldd	r27, Y+8	; 0x08
    3aa6:	88 0f       	add	r24, r24
    3aa8:	99 1f       	adc	r25, r25
    3aaa:	aa 1f       	adc	r26, r26
    3aac:	bb 1f       	adc	r27, r27
    3aae:	88 0f       	add	r24, r24
    3ab0:	99 1f       	adc	r25, r25
    3ab2:	aa 1f       	adc	r26, r26
    3ab4:	bb 1f       	adc	r27, r27
    3ab6:	88 0f       	add	r24, r24
    3ab8:	99 1f       	adc	r25, r25
    3aba:	aa 1f       	adc	r26, r26
    3abc:	bb 1f       	adc	r27, r27
    3abe:	88 0f       	add	r24, r24
    3ac0:	99 1f       	adc	r25, r25
    3ac2:	aa 1f       	adc	r26, r26
    3ac4:	bb 1f       	adc	r27, r27
    3ac6:	68 94       	set
    3ac8:	12 f8       	bld	r1, 2
    3aca:	b6 95       	lsr	r27
    3acc:	a7 95       	ror	r26
    3ace:	97 95       	ror	r25
    3ad0:	87 95       	ror	r24
    3ad2:	16 94       	lsr	r1
    3ad4:	d1 f7       	brne	.-12     	; 0x3aca <DELAY_Timer0_us+0xac>
    3ad6:	81 50       	subi	r24, 0x01	; 1
    3ad8:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <TIMER_Timer0_OCR0_Set>
    3adc:	68 c0       	rjmp	.+208    	; 0x3bae <DELAY_Timer0_us+0x190>
	}
	else if (time_in_us <= 1024){
    3ade:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae2:	af 81       	ldd	r26, Y+7	; 0x07
    3ae4:	b8 85       	ldd	r27, Y+8	; 0x08
    3ae6:	81 30       	cpi	r24, 0x01	; 1
    3ae8:	24 e0       	ldi	r18, 0x04	; 4
    3aea:	92 07       	cpc	r25, r18
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	a2 07       	cpc	r26, r18
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	b2 07       	cpc	r27, r18
    3af4:	20 f5       	brcc	.+72     	; 0x3b3e <DELAY_Timer0_us+0x120>
		TIMER_Timer0_Init(TIMER0_CTC, TIMER0_PRESCALER_64);
    3af6:	82 e0       	ldi	r24, 0x02	; 2
    3af8:	63 e0       	ldi	r22, 0x03	; 3
    3afa:	0e 94 05 08 	call	0x100a	; 0x100a <TIMER_Timer0_Init>
		TIMER_Timer0_OCR0_Set((u8_t) (time_in_us * (F_CPU / 1000000) / 64) - 1);
    3afe:	8d 81       	ldd	r24, Y+5	; 0x05
    3b00:	9e 81       	ldd	r25, Y+6	; 0x06
    3b02:	af 81       	ldd	r26, Y+7	; 0x07
    3b04:	b8 85       	ldd	r27, Y+8	; 0x08
    3b06:	88 0f       	add	r24, r24
    3b08:	99 1f       	adc	r25, r25
    3b0a:	aa 1f       	adc	r26, r26
    3b0c:	bb 1f       	adc	r27, r27
    3b0e:	88 0f       	add	r24, r24
    3b10:	99 1f       	adc	r25, r25
    3b12:	aa 1f       	adc	r26, r26
    3b14:	bb 1f       	adc	r27, r27
    3b16:	88 0f       	add	r24, r24
    3b18:	99 1f       	adc	r25, r25
    3b1a:	aa 1f       	adc	r26, r26
    3b1c:	bb 1f       	adc	r27, r27
    3b1e:	88 0f       	add	r24, r24
    3b20:	99 1f       	adc	r25, r25
    3b22:	aa 1f       	adc	r26, r26
    3b24:	bb 1f       	adc	r27, r27
    3b26:	68 94       	set
    3b28:	15 f8       	bld	r1, 5
    3b2a:	b6 95       	lsr	r27
    3b2c:	a7 95       	ror	r26
    3b2e:	97 95       	ror	r25
    3b30:	87 95       	ror	r24
    3b32:	16 94       	lsr	r1
    3b34:	d1 f7       	brne	.-12     	; 0x3b2a <DELAY_Timer0_us+0x10c>
    3b36:	81 50       	subi	r24, 0x01	; 1
    3b38:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <TIMER_Timer0_OCR0_Set>
    3b3c:	38 c0       	rjmp	.+112    	; 0x3bae <DELAY_Timer0_us+0x190>
	}
	else{					// If the requested delay is more than 1024us.
		// Divide it into two delays, one in ms and the other in us.
		u32_t ms_part = (u32_t) (time_in_us / 1000);		// Divide the delay by 1000 to get the ms part.
    3b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b40:	9e 81       	ldd	r25, Y+6	; 0x06
    3b42:	af 81       	ldd	r26, Y+7	; 0x07
    3b44:	b8 85       	ldd	r27, Y+8	; 0x08
    3b46:	28 ee       	ldi	r18, 0xE8	; 232
    3b48:	33 e0       	ldi	r19, 0x03	; 3
    3b4a:	40 e0       	ldi	r20, 0x00	; 0
    3b4c:	50 e0       	ldi	r21, 0x00	; 0
    3b4e:	bc 01       	movw	r22, r24
    3b50:	cd 01       	movw	r24, r26
    3b52:	0e 94 c9 35 	call	0x6b92	; 0x6b92 <__udivmodsi4>
    3b56:	da 01       	movw	r26, r20
    3b58:	c9 01       	movw	r24, r18
    3b5a:	89 83       	std	Y+1, r24	; 0x01
    3b5c:	9a 83       	std	Y+2, r25	; 0x02
    3b5e:	ab 83       	std	Y+3, r26	; 0x03
    3b60:	bc 83       	std	Y+4, r27	; 0x04
		DELAY_Timer0_ms(ms_part);
    3b62:	69 81       	ldd	r22, Y+1	; 0x01
    3b64:	7a 81       	ldd	r23, Y+2	; 0x02
    3b66:	8b 81       	ldd	r24, Y+3	; 0x03
    3b68:	9c 81       	ldd	r25, Y+4	; 0x04
    3b6a:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3b6e:	dc 01       	movw	r26, r24
    3b70:	cb 01       	movw	r24, r22
    3b72:	bc 01       	movw	r22, r24
    3b74:	cd 01       	movw	r24, r26
    3b76:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <DELAY_Timer0_ms>
		time_in_us%= 1000;									// The us part is the fraction of the delay divided by 1000.
    3b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b7e:	af 81       	ldd	r26, Y+7	; 0x07
    3b80:	b8 85       	ldd	r27, Y+8	; 0x08
    3b82:	28 ee       	ldi	r18, 0xE8	; 232
    3b84:	33 e0       	ldi	r19, 0x03	; 3
    3b86:	40 e0       	ldi	r20, 0x00	; 0
    3b88:	50 e0       	ldi	r21, 0x00	; 0
    3b8a:	bc 01       	movw	r22, r24
    3b8c:	cd 01       	movw	r24, r26
    3b8e:	0e 94 c9 35 	call	0x6b92	; 0x6b92 <__udivmodsi4>
    3b92:	dc 01       	movw	r26, r24
    3b94:	cb 01       	movw	r24, r22
    3b96:	8d 83       	std	Y+5, r24	; 0x05
    3b98:	9e 83       	std	Y+6, r25	; 0x06
    3b9a:	af 83       	std	Y+7, r26	; 0x07
    3b9c:	b8 87       	std	Y+8, r27	; 0x08
		DELAY_Timer0_us(time_in_us);
    3b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba2:	af 81       	ldd	r26, Y+7	; 0x07
    3ba4:	b8 85       	ldd	r27, Y+8	; 0x08
    3ba6:	bc 01       	movw	r22, r24
    3ba8:	cd 01       	movw	r24, r26
    3baa:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <DELAY_Timer0_us>
	}
	TIMER_Timer0_OC_Polling_Wait();
    3bae:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <TIMER_Timer0_OC_Polling_Wait>
}
    3bb2:	28 96       	adiw	r28, 0x08	; 8
    3bb4:	0f b6       	in	r0, 0x3f	; 63
    3bb6:	f8 94       	cli
    3bb8:	de bf       	out	0x3e, r29	; 62
    3bba:	0f be       	out	0x3f, r0	; 63
    3bbc:	cd bf       	out	0x3d, r28	; 61
    3bbe:	cf 91       	pop	r28
    3bc0:	df 91       	pop	r29
    3bc2:	08 95       	ret

00003bc4 <DELAY_Timer0_ms>:

void DELAY_Timer0_ms(float time_in_ms){
    3bc4:	df 93       	push	r29
    3bc6:	cf 93       	push	r28
    3bc8:	00 d0       	rcall	.+0      	; 0x3bca <DELAY_Timer0_ms+0x6>
    3bca:	00 d0       	rcall	.+0      	; 0x3bcc <DELAY_Timer0_ms+0x8>
    3bcc:	cd b7       	in	r28, 0x3d	; 61
    3bce:	de b7       	in	r29, 0x3e	; 62
    3bd0:	69 83       	std	Y+1, r22	; 0x01
    3bd2:	7a 83       	std	Y+2, r23	; 0x02
    3bd4:	8b 83       	std	Y+3, r24	; 0x03
    3bd6:	9c 83       	std	Y+4, r25	; 0x04
	if (time_in_ms - (int) time_in_ms > 0){
    3bd8:	69 81       	ldd	r22, Y+1	; 0x01
    3bda:	7a 81       	ldd	r23, Y+2	; 0x02
    3bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bde:	9c 81       	ldd	r25, Y+4	; 0x04
    3be0:	0e 94 43 05 	call	0xa86	; 0xa86 <__fixsfsi>
    3be4:	dc 01       	movw	r26, r24
    3be6:	cb 01       	movw	r24, r22
    3be8:	aa 27       	eor	r26, r26
    3bea:	97 fd       	sbrc	r25, 7
    3bec:	a0 95       	com	r26
    3bee:	ba 2f       	mov	r27, r26
    3bf0:	bc 01       	movw	r22, r24
    3bf2:	cd 01       	movw	r24, r26
    3bf4:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__floatsisf>
    3bf8:	9b 01       	movw	r18, r22
    3bfa:	ac 01       	movw	r20, r24
    3bfc:	69 81       	ldd	r22, Y+1	; 0x01
    3bfe:	7a 81       	ldd	r23, Y+2	; 0x02
    3c00:	8b 81       	ldd	r24, Y+3	; 0x03
    3c02:	9c 81       	ldd	r25, Y+4	; 0x04
    3c04:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3c08:	dc 01       	movw	r26, r24
    3c0a:	cb 01       	movw	r24, r22
    3c0c:	bc 01       	movw	r22, r24
    3c0e:	cd 01       	movw	r24, r26
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	40 e0       	ldi	r20, 0x00	; 0
    3c16:	50 e0       	ldi	r21, 0x00	; 0
    3c18:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    3c1c:	18 16       	cp	r1, r24
    3c1e:	0c f0       	brlt	.+2      	; 0x3c22 <DELAY_Timer0_ms+0x5e>
    3c20:	fc c0       	rjmp	.+504    	; 0x3e1a <DELAY_Timer0_ms+0x256>
		DELAY_Timer0_us((time_in_ms - (int) time_in_ms) * 1000);
    3c22:	69 81       	ldd	r22, Y+1	; 0x01
    3c24:	7a 81       	ldd	r23, Y+2	; 0x02
    3c26:	8b 81       	ldd	r24, Y+3	; 0x03
    3c28:	9c 81       	ldd	r25, Y+4	; 0x04
    3c2a:	0e 94 43 05 	call	0xa86	; 0xa86 <__fixsfsi>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	aa 27       	eor	r26, r26
    3c34:	97 fd       	sbrc	r25, 7
    3c36:	a0 95       	com	r26
    3c38:	ba 2f       	mov	r27, r26
    3c3a:	bc 01       	movw	r22, r24
    3c3c:	cd 01       	movw	r24, r26
    3c3e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__floatsisf>
    3c42:	9b 01       	movw	r18, r22
    3c44:	ac 01       	movw	r20, r24
    3c46:	69 81       	ldd	r22, Y+1	; 0x01
    3c48:	7a 81       	ldd	r23, Y+2	; 0x02
    3c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c4e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3c52:	dc 01       	movw	r26, r24
    3c54:	cb 01       	movw	r24, r22
    3c56:	bc 01       	movw	r22, r24
    3c58:	cd 01       	movw	r24, r26
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	4a e7       	ldi	r20, 0x7A	; 122
    3c60:	54 e4       	ldi	r21, 0x44	; 68
    3c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c66:	dc 01       	movw	r26, r24
    3c68:	cb 01       	movw	r24, r22
    3c6a:	bc 01       	movw	r22, r24
    3c6c:	cd 01       	movw	r24, r26
    3c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	bc 01       	movw	r22, r24
    3c78:	cd 01       	movw	r24, r26
    3c7a:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <DELAY_Timer0_us>
		time_in_ms = (int) time_in_ms;
    3c7e:	69 81       	ldd	r22, Y+1	; 0x01
    3c80:	7a 81       	ldd	r23, Y+2	; 0x02
    3c82:	8b 81       	ldd	r24, Y+3	; 0x03
    3c84:	9c 81       	ldd	r25, Y+4	; 0x04
    3c86:	0e 94 43 05 	call	0xa86	; 0xa86 <__fixsfsi>
    3c8a:	dc 01       	movw	r26, r24
    3c8c:	cb 01       	movw	r24, r22
    3c8e:	aa 27       	eor	r26, r26
    3c90:	97 fd       	sbrc	r25, 7
    3c92:	a0 95       	com	r26
    3c94:	ba 2f       	mov	r27, r26
    3c96:	bc 01       	movw	r22, r24
    3c98:	cd 01       	movw	r24, r26
    3c9a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__floatsisf>
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	cb 01       	movw	r24, r22
    3ca2:	89 83       	std	Y+1, r24	; 0x01
    3ca4:	9a 83       	std	Y+2, r25	; 0x02
    3ca6:	ab 83       	std	Y+3, r26	; 0x03
    3ca8:	bc 83       	std	Y+4, r27	; 0x04
    3caa:	b7 c0       	rjmp	.+366    	; 0x3e1a <DELAY_Timer0_ms+0x256>
	}

    while (time_in_ms > 0) {
        if (time_in_ms == 1) {
    3cac:	69 81       	ldd	r22, Y+1	; 0x01
    3cae:	7a 81       	ldd	r23, Y+2	; 0x02
    3cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	40 e8       	ldi	r20, 0x80	; 128
    3cba:	5f e3       	ldi	r21, 0x3F	; 63
    3cbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3cc0:	88 23       	and	r24, r24
    3cc2:	81 f4       	brne	.+32     	; 0x3ce4 <DELAY_Timer0_ms+0x120>
            TIMER_Timer0_OCR0_Set(249);
    3cc4:	89 ef       	ldi	r24, 0xF9	; 249
    3cc6:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <TIMER_Timer0_OCR0_Set>
            TIMER_Timer0_Init(TIMER0_CTC, TIMER0_PRESCALER_64);
    3cca:	82 e0       	ldi	r24, 0x02	; 2
    3ccc:	63 e0       	ldi	r22, 0x03	; 3
    3cce:	0e 94 05 08 	call	0x100a	; 0x100a <TIMER_Timer0_Init>
            time_in_ms = 0;
    3cd2:	80 e0       	ldi	r24, 0x00	; 0
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	a0 e0       	ldi	r26, 0x00	; 0
    3cd8:	b0 e0       	ldi	r27, 0x00	; 0
    3cda:	89 83       	std	Y+1, r24	; 0x01
    3cdc:	9a 83       	std	Y+2, r25	; 0x02
    3cde:	ab 83       	std	Y+3, r26	; 0x03
    3ce0:	bc 83       	std	Y+4, r27	; 0x04
    3ce2:	99 c0       	rjmp	.+306    	; 0x3e16 <DELAY_Timer0_ms+0x252>
        } else if (time_in_ms <= 4) {
    3ce4:	69 81       	ldd	r22, Y+1	; 0x01
    3ce6:	7a 81       	ldd	r23, Y+2	; 0x02
    3ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cea:	9c 81       	ldd	r25, Y+4	; 0x04
    3cec:	20 e0       	ldi	r18, 0x00	; 0
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	40 e8       	ldi	r20, 0x80	; 128
    3cf2:	50 e4       	ldi	r21, 0x40	; 64
    3cf4:	0e 94 b5 04 	call	0x96a	; 0x96a <__lesf2>
    3cf8:	18 16       	cp	r1, r24
    3cfa:	ac f1       	brlt	.+106    	; 0x3d66 <DELAY_Timer0_ms+0x1a2>
            TIMER_Timer0_OCR0_Set((u8_t)((time_in_ms * (F_CPU / 1000) / 256) - 1));
    3cfc:	69 81       	ldd	r22, Y+1	; 0x01
    3cfe:	7a 81       	ldd	r23, Y+2	; 0x02
    3d00:	8b 81       	ldd	r24, Y+3	; 0x03
    3d02:	9c 81       	ldd	r25, Y+4	; 0x04
    3d04:	20 e0       	ldi	r18, 0x00	; 0
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	4a e7       	ldi	r20, 0x7A	; 122
    3d0a:	56 e4       	ldi	r21, 0x46	; 70
    3d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d10:	dc 01       	movw	r26, r24
    3d12:	cb 01       	movw	r24, r22
    3d14:	bc 01       	movw	r22, r24
    3d16:	cd 01       	movw	r24, r26
    3d18:	20 e0       	ldi	r18, 0x00	; 0
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	40 e8       	ldi	r20, 0x80	; 128
    3d1e:	53 e4       	ldi	r21, 0x43	; 67
    3d20:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d24:	dc 01       	movw	r26, r24
    3d26:	cb 01       	movw	r24, r22
    3d28:	bc 01       	movw	r22, r24
    3d2a:	cd 01       	movw	r24, r26
    3d2c:	20 e0       	ldi	r18, 0x00	; 0
    3d2e:	30 e0       	ldi	r19, 0x00	; 0
    3d30:	40 e8       	ldi	r20, 0x80	; 128
    3d32:	5f e3       	ldi	r21, 0x3F	; 63
    3d34:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3d38:	dc 01       	movw	r26, r24
    3d3a:	cb 01       	movw	r24, r22
    3d3c:	bc 01       	movw	r22, r24
    3d3e:	cd 01       	movw	r24, r26
    3d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d44:	dc 01       	movw	r26, r24
    3d46:	cb 01       	movw	r24, r22
    3d48:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <TIMER_Timer0_OCR0_Set>
            TIMER_Timer0_Init(TIMER0_CTC, TIMER0_PRESCALER_256);
    3d4c:	82 e0       	ldi	r24, 0x02	; 2
    3d4e:	64 e0       	ldi	r22, 0x04	; 4
    3d50:	0e 94 05 08 	call	0x100a	; 0x100a <TIMER_Timer0_Init>
            time_in_ms = 0;
    3d54:	80 e0       	ldi	r24, 0x00	; 0
    3d56:	90 e0       	ldi	r25, 0x00	; 0
    3d58:	a0 e0       	ldi	r26, 0x00	; 0
    3d5a:	b0 e0       	ldi	r27, 0x00	; 0
    3d5c:	89 83       	std	Y+1, r24	; 0x01
    3d5e:	9a 83       	std	Y+2, r25	; 0x02
    3d60:	ab 83       	std	Y+3, r26	; 0x03
    3d62:	bc 83       	std	Y+4, r27	; 0x04
    3d64:	58 c0       	rjmp	.+176    	; 0x3e16 <DELAY_Timer0_ms+0x252>
        } else if (time_in_ms <= 16) {
    3d66:	69 81       	ldd	r22, Y+1	; 0x01
    3d68:	7a 81       	ldd	r23, Y+2	; 0x02
    3d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d6e:	20 e0       	ldi	r18, 0x00	; 0
    3d70:	30 e0       	ldi	r19, 0x00	; 0
    3d72:	40 e8       	ldi	r20, 0x80	; 128
    3d74:	51 e4       	ldi	r21, 0x41	; 65
    3d76:	0e 94 b5 04 	call	0x96a	; 0x96a <__lesf2>
    3d7a:	18 16       	cp	r1, r24
    3d7c:	ac f1       	brlt	.+106    	; 0x3de8 <DELAY_Timer0_ms+0x224>
            TIMER_Timer0_OCR0_Set((u8_t)((time_in_ms * (F_CPU / 1000) / 1024) - 1));
    3d7e:	69 81       	ldd	r22, Y+1	; 0x01
    3d80:	7a 81       	ldd	r23, Y+2	; 0x02
    3d82:	8b 81       	ldd	r24, Y+3	; 0x03
    3d84:	9c 81       	ldd	r25, Y+4	; 0x04
    3d86:	20 e0       	ldi	r18, 0x00	; 0
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	4a e7       	ldi	r20, 0x7A	; 122
    3d8c:	56 e4       	ldi	r21, 0x46	; 70
    3d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d92:	dc 01       	movw	r26, r24
    3d94:	cb 01       	movw	r24, r22
    3d96:	bc 01       	movw	r22, r24
    3d98:	cd 01       	movw	r24, r26
    3d9a:	20 e0       	ldi	r18, 0x00	; 0
    3d9c:	30 e0       	ldi	r19, 0x00	; 0
    3d9e:	40 e8       	ldi	r20, 0x80	; 128
    3da0:	54 e4       	ldi	r21, 0x44	; 68
    3da2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3da6:	dc 01       	movw	r26, r24
    3da8:	cb 01       	movw	r24, r22
    3daa:	bc 01       	movw	r22, r24
    3dac:	cd 01       	movw	r24, r26
    3dae:	20 e0       	ldi	r18, 0x00	; 0
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	40 e8       	ldi	r20, 0x80	; 128
    3db4:	5f e3       	ldi	r21, 0x3F	; 63
    3db6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3dba:	dc 01       	movw	r26, r24
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	bc 01       	movw	r22, r24
    3dc0:	cd 01       	movw	r24, r26
    3dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc6:	dc 01       	movw	r26, r24
    3dc8:	cb 01       	movw	r24, r22
    3dca:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <TIMER_Timer0_OCR0_Set>
            TIMER_Timer0_Init(TIMER0_CTC, TIMER0_PRESCALER_1024);
    3dce:	82 e0       	ldi	r24, 0x02	; 2
    3dd0:	65 e0       	ldi	r22, 0x05	; 5
    3dd2:	0e 94 05 08 	call	0x100a	; 0x100a <TIMER_Timer0_Init>
            time_in_ms = 0;
    3dd6:	80 e0       	ldi	r24, 0x00	; 0
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	a0 e0       	ldi	r26, 0x00	; 0
    3ddc:	b0 e0       	ldi	r27, 0x00	; 0
    3dde:	89 83       	std	Y+1, r24	; 0x01
    3de0:	9a 83       	std	Y+2, r25	; 0x02
    3de2:	ab 83       	std	Y+3, r26	; 0x03
    3de4:	bc 83       	std	Y+4, r27	; 0x04
    3de6:	17 c0       	rjmp	.+46     	; 0x3e16 <DELAY_Timer0_ms+0x252>
        } else {  // For longer delays, split into 16ms chunks
            TIMER_Timer0_OCR0_Set((u8_t)((16 * (F_CPU / 1000) / 1024) - 1));
    3de8:	89 ef       	ldi	r24, 0xF9	; 249
    3dea:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <TIMER_Timer0_OCR0_Set>
            TIMER_Timer0_Init(TIMER0_CTC, TIMER0_PRESCALER_1024);
    3dee:	82 e0       	ldi	r24, 0x02	; 2
    3df0:	65 e0       	ldi	r22, 0x05	; 5
    3df2:	0e 94 05 08 	call	0x100a	; 0x100a <TIMER_Timer0_Init>
            time_in_ms -= 16;
    3df6:	69 81       	ldd	r22, Y+1	; 0x01
    3df8:	7a 81       	ldd	r23, Y+2	; 0x02
    3dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    3dfe:	20 e0       	ldi	r18, 0x00	; 0
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	40 e8       	ldi	r20, 0x80	; 128
    3e04:	51 e4       	ldi	r21, 0x41	; 65
    3e06:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3e0a:	dc 01       	movw	r26, r24
    3e0c:	cb 01       	movw	r24, r22
    3e0e:	89 83       	std	Y+1, r24	; 0x01
    3e10:	9a 83       	std	Y+2, r25	; 0x02
    3e12:	ab 83       	std	Y+3, r26	; 0x03
    3e14:	bc 83       	std	Y+4, r27	; 0x04
        }
        TIMER_Timer0_OC_Polling_Wait();
    3e16:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <TIMER_Timer0_OC_Polling_Wait>
	if (time_in_ms - (int) time_in_ms > 0){
		DELAY_Timer0_us((time_in_ms - (int) time_in_ms) * 1000);
		time_in_ms = (int) time_in_ms;
	}

    while (time_in_ms > 0) {
    3e1a:	69 81       	ldd	r22, Y+1	; 0x01
    3e1c:	7a 81       	ldd	r23, Y+2	; 0x02
    3e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e20:	9c 81       	ldd	r25, Y+4	; 0x04
    3e22:	20 e0       	ldi	r18, 0x00	; 0
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	40 e0       	ldi	r20, 0x00	; 0
    3e28:	50 e0       	ldi	r21, 0x00	; 0
    3e2a:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    3e2e:	18 16       	cp	r1, r24
    3e30:	0c f4       	brge	.+2      	; 0x3e34 <DELAY_Timer0_ms+0x270>
    3e32:	3c cf       	rjmp	.-392    	; 0x3cac <DELAY_Timer0_ms+0xe8>
            TIMER_Timer0_Init(TIMER0_CTC, TIMER0_PRESCALER_1024);
            time_in_ms -= 16;
        }
        TIMER_Timer0_OC_Polling_Wait();
    }
}
    3e34:	0f 90       	pop	r0
    3e36:	0f 90       	pop	r0
    3e38:	0f 90       	pop	r0
    3e3a:	0f 90       	pop	r0
    3e3c:	cf 91       	pop	r28
    3e3e:	df 91       	pop	r29
    3e40:	08 95       	ret

00003e42 <DELAY_Timer0_s>:

void DELAY_Timer0_s(float time_in_s){
    3e42:	df 93       	push	r29
    3e44:	cf 93       	push	r28
    3e46:	00 d0       	rcall	.+0      	; 0x3e48 <DELAY_Timer0_s+0x6>
    3e48:	00 d0       	rcall	.+0      	; 0x3e4a <DELAY_Timer0_s+0x8>
    3e4a:	cd b7       	in	r28, 0x3d	; 61
    3e4c:	de b7       	in	r29, 0x3e	; 62
    3e4e:	69 83       	std	Y+1, r22	; 0x01
    3e50:	7a 83       	std	Y+2, r23	; 0x02
    3e52:	8b 83       	std	Y+3, r24	; 0x03
    3e54:	9c 83       	std	Y+4, r25	; 0x04
	// The maximum delay to be generated by Timer0 is 16.384ms, so we call the DELAY_Timer0_ms function with time in seconds converted to be in milliseconds.
	DELAY_Timer0_ms(time_in_s * 1000);
    3e56:	69 81       	ldd	r22, Y+1	; 0x01
    3e58:	7a 81       	ldd	r23, Y+2	; 0x02
    3e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	4a e7       	ldi	r20, 0x7A	; 122
    3e64:	54 e4       	ldi	r21, 0x44	; 68
    3e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6a:	dc 01       	movw	r26, r24
    3e6c:	cb 01       	movw	r24, r22
    3e6e:	bc 01       	movw	r22, r24
    3e70:	cd 01       	movw	r24, r26
    3e72:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <DELAY_Timer0_ms>
}
    3e76:	0f 90       	pop	r0
    3e78:	0f 90       	pop	r0
    3e7a:	0f 90       	pop	r0
    3e7c:	0f 90       	pop	r0
    3e7e:	cf 91       	pop	r28
    3e80:	df 91       	pop	r29
    3e82:	08 95       	ret

00003e84 <DELAY_Timer1_us>:



void DELAY_Timer1_us(u32_t time_in_us){
    3e84:	df 93       	push	r29
    3e86:	cf 93       	push	r28
    3e88:	00 d0       	rcall	.+0      	; 0x3e8a <DELAY_Timer1_us+0x6>
    3e8a:	00 d0       	rcall	.+0      	; 0x3e8c <DELAY_Timer1_us+0x8>
    3e8c:	cd b7       	in	r28, 0x3d	; 61
    3e8e:	de b7       	in	r29, 0x3e	; 62
    3e90:	69 83       	std	Y+1, r22	; 0x01
    3e92:	7a 83       	std	Y+2, r23	; 0x02
    3e94:	8b 83       	std	Y+3, r24	; 0x03
    3e96:	9c 83       	std	Y+4, r25	; 0x04
    3e98:	0f c1       	rjmp	.+542    	; 0x40b8 <DELAY_Timer1_us+0x234>
	while (time_in_us > 0) {
		if (time_in_us <= 4096){
    3e9a:	89 81       	ldd	r24, Y+1	; 0x01
    3e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e9e:	ab 81       	ldd	r26, Y+3	; 0x03
    3ea0:	bc 81       	ldd	r27, Y+4	; 0x04
    3ea2:	81 30       	cpi	r24, 0x01	; 1
    3ea4:	20 e1       	ldi	r18, 0x10	; 16
    3ea6:	92 07       	cpc	r25, r18
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	a2 07       	cpc	r26, r18
    3eac:	20 e0       	ldi	r18, 0x00	; 0
    3eae:	b2 07       	cpc	r27, r18
    3eb0:	00 f5       	brcc	.+64     	; 0x3ef2 <DELAY_Timer1_us+0x6e>
			TIMER_Timer1_OCR1A_Set((u16_t) (time_in_us * (F_CPU / 1000000)) - 1);
    3eb2:	89 81       	ldd	r24, Y+1	; 0x01
    3eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb6:	ab 81       	ldd	r26, Y+3	; 0x03
    3eb8:	bc 81       	ldd	r27, Y+4	; 0x04
    3eba:	88 0f       	add	r24, r24
    3ebc:	99 1f       	adc	r25, r25
    3ebe:	aa 1f       	adc	r26, r26
    3ec0:	bb 1f       	adc	r27, r27
    3ec2:	88 0f       	add	r24, r24
    3ec4:	99 1f       	adc	r25, r25
    3ec6:	aa 1f       	adc	r26, r26
    3ec8:	bb 1f       	adc	r27, r27
    3eca:	88 0f       	add	r24, r24
    3ecc:	99 1f       	adc	r25, r25
    3ece:	aa 1f       	adc	r26, r26
    3ed0:	bb 1f       	adc	r27, r27
    3ed2:	88 0f       	add	r24, r24
    3ed4:	99 1f       	adc	r25, r25
    3ed6:	aa 1f       	adc	r26, r26
    3ed8:	bb 1f       	adc	r27, r27
    3eda:	01 97       	sbiw	r24, 0x01	; 1
    3edc:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <TIMER_Timer1_OCR1A_Set>
			TIMER_Timer1_Init(TIMER1_CTC_OCR1, TIMER1_NO_PRESCALER);
    3ee0:	84 e0       	ldi	r24, 0x04	; 4
    3ee2:	61 e0       	ldi	r22, 0x01	; 1
    3ee4:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <TIMER_Timer1_Init>
			time_in_us = 0;
    3ee8:	19 82       	std	Y+1, r1	; 0x01
    3eea:	1a 82       	std	Y+2, r1	; 0x02
    3eec:	1b 82       	std	Y+3, r1	; 0x03
    3eee:	1c 82       	std	Y+4, r1	; 0x04
    3ef0:	e1 c0       	rjmp	.+450    	; 0x40b4 <DELAY_Timer1_us+0x230>
		}
		else if (time_in_us <= 32768){
    3ef2:	89 81       	ldd	r24, Y+1	; 0x01
    3ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef6:	ab 81       	ldd	r26, Y+3	; 0x03
    3ef8:	bc 81       	ldd	r27, Y+4	; 0x04
    3efa:	81 30       	cpi	r24, 0x01	; 1
    3efc:	20 e8       	ldi	r18, 0x80	; 128
    3efe:	92 07       	cpc	r25, r18
    3f00:	20 e0       	ldi	r18, 0x00	; 0
    3f02:	a2 07       	cpc	r26, r18
    3f04:	20 e0       	ldi	r18, 0x00	; 0
    3f06:	b2 07       	cpc	r27, r18
    3f08:	40 f5       	brcc	.+80     	; 0x3f5a <DELAY_Timer1_us+0xd6>
			TIMER_Timer1_OCR1A_Set((u16_t) (time_in_us * (F_CPU / 1000000) / 8) - 1);
    3f0a:	89 81       	ldd	r24, Y+1	; 0x01
    3f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f0e:	ab 81       	ldd	r26, Y+3	; 0x03
    3f10:	bc 81       	ldd	r27, Y+4	; 0x04
    3f12:	88 0f       	add	r24, r24
    3f14:	99 1f       	adc	r25, r25
    3f16:	aa 1f       	adc	r26, r26
    3f18:	bb 1f       	adc	r27, r27
    3f1a:	88 0f       	add	r24, r24
    3f1c:	99 1f       	adc	r25, r25
    3f1e:	aa 1f       	adc	r26, r26
    3f20:	bb 1f       	adc	r27, r27
    3f22:	88 0f       	add	r24, r24
    3f24:	99 1f       	adc	r25, r25
    3f26:	aa 1f       	adc	r26, r26
    3f28:	bb 1f       	adc	r27, r27
    3f2a:	88 0f       	add	r24, r24
    3f2c:	99 1f       	adc	r25, r25
    3f2e:	aa 1f       	adc	r26, r26
    3f30:	bb 1f       	adc	r27, r27
    3f32:	68 94       	set
    3f34:	12 f8       	bld	r1, 2
    3f36:	b6 95       	lsr	r27
    3f38:	a7 95       	ror	r26
    3f3a:	97 95       	ror	r25
    3f3c:	87 95       	ror	r24
    3f3e:	16 94       	lsr	r1
    3f40:	d1 f7       	brne	.-12     	; 0x3f36 <DELAY_Timer1_us+0xb2>
    3f42:	01 97       	sbiw	r24, 0x01	; 1
    3f44:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <TIMER_Timer1_OCR1A_Set>
			TIMER_Timer1_Init(TIMER1_CTC_OCR1, TIMER1_PRESCALER_8);
    3f48:	84 e0       	ldi	r24, 0x04	; 4
    3f4a:	62 e0       	ldi	r22, 0x02	; 2
    3f4c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <TIMER_Timer1_Init>
			time_in_us = 0;
    3f50:	19 82       	std	Y+1, r1	; 0x01
    3f52:	1a 82       	std	Y+2, r1	; 0x02
    3f54:	1b 82       	std	Y+3, r1	; 0x03
    3f56:	1c 82       	std	Y+4, r1	; 0x04
    3f58:	ad c0       	rjmp	.+346    	; 0x40b4 <DELAY_Timer1_us+0x230>
		}
		else if (time_in_us <= 262144){
    3f5a:	89 81       	ldd	r24, Y+1	; 0x01
    3f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f5e:	ab 81       	ldd	r26, Y+3	; 0x03
    3f60:	bc 81       	ldd	r27, Y+4	; 0x04
    3f62:	81 30       	cpi	r24, 0x01	; 1
    3f64:	20 e0       	ldi	r18, 0x00	; 0
    3f66:	92 07       	cpc	r25, r18
    3f68:	24 e0       	ldi	r18, 0x04	; 4
    3f6a:	a2 07       	cpc	r26, r18
    3f6c:	20 e0       	ldi	r18, 0x00	; 0
    3f6e:	b2 07       	cpc	r27, r18
    3f70:	40 f5       	brcc	.+80     	; 0x3fc2 <DELAY_Timer1_us+0x13e>
			TIMER_Timer1_OCR1A_Set((u16_t) (time_in_us * (F_CPU / 1000000) / 64) - 1);
    3f72:	89 81       	ldd	r24, Y+1	; 0x01
    3f74:	9a 81       	ldd	r25, Y+2	; 0x02
    3f76:	ab 81       	ldd	r26, Y+3	; 0x03
    3f78:	bc 81       	ldd	r27, Y+4	; 0x04
    3f7a:	88 0f       	add	r24, r24
    3f7c:	99 1f       	adc	r25, r25
    3f7e:	aa 1f       	adc	r26, r26
    3f80:	bb 1f       	adc	r27, r27
    3f82:	88 0f       	add	r24, r24
    3f84:	99 1f       	adc	r25, r25
    3f86:	aa 1f       	adc	r26, r26
    3f88:	bb 1f       	adc	r27, r27
    3f8a:	88 0f       	add	r24, r24
    3f8c:	99 1f       	adc	r25, r25
    3f8e:	aa 1f       	adc	r26, r26
    3f90:	bb 1f       	adc	r27, r27
    3f92:	88 0f       	add	r24, r24
    3f94:	99 1f       	adc	r25, r25
    3f96:	aa 1f       	adc	r26, r26
    3f98:	bb 1f       	adc	r27, r27
    3f9a:	68 94       	set
    3f9c:	15 f8       	bld	r1, 5
    3f9e:	b6 95       	lsr	r27
    3fa0:	a7 95       	ror	r26
    3fa2:	97 95       	ror	r25
    3fa4:	87 95       	ror	r24
    3fa6:	16 94       	lsr	r1
    3fa8:	d1 f7       	brne	.-12     	; 0x3f9e <DELAY_Timer1_us+0x11a>
    3faa:	01 97       	sbiw	r24, 0x01	; 1
    3fac:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <TIMER_Timer1_OCR1A_Set>
			TIMER_Timer1_Init(TIMER1_CTC_OCR1, TIMER1_PRESCALER_64);
    3fb0:	84 e0       	ldi	r24, 0x04	; 4
    3fb2:	63 e0       	ldi	r22, 0x03	; 3
    3fb4:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <TIMER_Timer1_Init>
			time_in_us = 0;
    3fb8:	19 82       	std	Y+1, r1	; 0x01
    3fba:	1a 82       	std	Y+2, r1	; 0x02
    3fbc:	1b 82       	std	Y+3, r1	; 0x03
    3fbe:	1c 82       	std	Y+4, r1	; 0x04
    3fc0:	79 c0       	rjmp	.+242    	; 0x40b4 <DELAY_Timer1_us+0x230>
		}
		else if (time_in_us <= 1048576){
    3fc2:	89 81       	ldd	r24, Y+1	; 0x01
    3fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc6:	ab 81       	ldd	r26, Y+3	; 0x03
    3fc8:	bc 81       	ldd	r27, Y+4	; 0x04
    3fca:	81 30       	cpi	r24, 0x01	; 1
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	92 07       	cpc	r25, r18
    3fd0:	20 e1       	ldi	r18, 0x10	; 16
    3fd2:	a2 07       	cpc	r26, r18
    3fd4:	20 e0       	ldi	r18, 0x00	; 0
    3fd6:	b2 07       	cpc	r27, r18
    3fd8:	20 f5       	brcc	.+72     	; 0x4022 <DELAY_Timer1_us+0x19e>
			TIMER_Timer1_OCR1A_Set((u16_t) (time_in_us * (F_CPU / 1000000) / 256) - 1);
    3fda:	89 81       	ldd	r24, Y+1	; 0x01
    3fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3fde:	ab 81       	ldd	r26, Y+3	; 0x03
    3fe0:	bc 81       	ldd	r27, Y+4	; 0x04
    3fe2:	88 0f       	add	r24, r24
    3fe4:	99 1f       	adc	r25, r25
    3fe6:	aa 1f       	adc	r26, r26
    3fe8:	bb 1f       	adc	r27, r27
    3fea:	88 0f       	add	r24, r24
    3fec:	99 1f       	adc	r25, r25
    3fee:	aa 1f       	adc	r26, r26
    3ff0:	bb 1f       	adc	r27, r27
    3ff2:	88 0f       	add	r24, r24
    3ff4:	99 1f       	adc	r25, r25
    3ff6:	aa 1f       	adc	r26, r26
    3ff8:	bb 1f       	adc	r27, r27
    3ffa:	88 0f       	add	r24, r24
    3ffc:	99 1f       	adc	r25, r25
    3ffe:	aa 1f       	adc	r26, r26
    4000:	bb 1f       	adc	r27, r27
    4002:	89 2f       	mov	r24, r25
    4004:	9a 2f       	mov	r25, r26
    4006:	ab 2f       	mov	r26, r27
    4008:	bb 27       	eor	r27, r27
    400a:	01 97       	sbiw	r24, 0x01	; 1
    400c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <TIMER_Timer1_OCR1A_Set>
			TIMER_Timer1_Init(TIMER1_CTC_OCR1, TIMER1_PRESCALER_256);
    4010:	84 e0       	ldi	r24, 0x04	; 4
    4012:	64 e0       	ldi	r22, 0x04	; 4
    4014:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <TIMER_Timer1_Init>
			time_in_us = 0;
    4018:	19 82       	std	Y+1, r1	; 0x01
    401a:	1a 82       	std	Y+2, r1	; 0x02
    401c:	1b 82       	std	Y+3, r1	; 0x03
    401e:	1c 82       	std	Y+4, r1	; 0x04
    4020:	49 c0       	rjmp	.+146    	; 0x40b4 <DELAY_Timer1_us+0x230>
		}
		else if (time_in_us <= 4194304){
    4022:	89 81       	ldd	r24, Y+1	; 0x01
    4024:	9a 81       	ldd	r25, Y+2	; 0x02
    4026:	ab 81       	ldd	r26, Y+3	; 0x03
    4028:	bc 81       	ldd	r27, Y+4	; 0x04
    402a:	81 30       	cpi	r24, 0x01	; 1
    402c:	20 e0       	ldi	r18, 0x00	; 0
    402e:	92 07       	cpc	r25, r18
    4030:	20 e4       	ldi	r18, 0x40	; 64
    4032:	a2 07       	cpc	r26, r18
    4034:	20 e0       	ldi	r18, 0x00	; 0
    4036:	b2 07       	cpc	r27, r18
    4038:	48 f5       	brcc	.+82     	; 0x408c <DELAY_Timer1_us+0x208>
			TIMER_Timer1_OCR1A_Set((u16_t) (time_in_us * (F_CPU / 1000000) / 1024) - 1);
    403a:	89 81       	ldd	r24, Y+1	; 0x01
    403c:	9a 81       	ldd	r25, Y+2	; 0x02
    403e:	ab 81       	ldd	r26, Y+3	; 0x03
    4040:	bc 81       	ldd	r27, Y+4	; 0x04
    4042:	88 0f       	add	r24, r24
    4044:	99 1f       	adc	r25, r25
    4046:	aa 1f       	adc	r26, r26
    4048:	bb 1f       	adc	r27, r27
    404a:	88 0f       	add	r24, r24
    404c:	99 1f       	adc	r25, r25
    404e:	aa 1f       	adc	r26, r26
    4050:	bb 1f       	adc	r27, r27
    4052:	88 0f       	add	r24, r24
    4054:	99 1f       	adc	r25, r25
    4056:	aa 1f       	adc	r26, r26
    4058:	bb 1f       	adc	r27, r27
    405a:	88 0f       	add	r24, r24
    405c:	99 1f       	adc	r25, r25
    405e:	aa 1f       	adc	r26, r26
    4060:	bb 1f       	adc	r27, r27
    4062:	07 2e       	mov	r0, r23
    4064:	7a e0       	ldi	r23, 0x0A	; 10
    4066:	b6 95       	lsr	r27
    4068:	a7 95       	ror	r26
    406a:	97 95       	ror	r25
    406c:	87 95       	ror	r24
    406e:	7a 95       	dec	r23
    4070:	d1 f7       	brne	.-12     	; 0x4066 <DELAY_Timer1_us+0x1e2>
    4072:	70 2d       	mov	r23, r0
    4074:	01 97       	sbiw	r24, 0x01	; 1
    4076:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <TIMER_Timer1_OCR1A_Set>
			TIMER_Timer1_Init(TIMER1_CTC_OCR1, TIMER1_PRESCALER_1024);
    407a:	84 e0       	ldi	r24, 0x04	; 4
    407c:	65 e0       	ldi	r22, 0x05	; 5
    407e:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <TIMER_Timer1_Init>
			time_in_us = 0;
    4082:	19 82       	std	Y+1, r1	; 0x01
    4084:	1a 82       	std	Y+2, r1	; 0x02
    4086:	1b 82       	std	Y+3, r1	; 0x03
    4088:	1c 82       	std	Y+4, r1	; 0x04
    408a:	14 c0       	rjmp	.+40     	; 0x40b4 <DELAY_Timer1_us+0x230>
		}
		else{
			// For longer delays, split into 4194304us chunks
			TIMER_Timer1_OCR1A_Set((u16_t) (4194304 * (F_CPU / 1000000) / 1024) - 1);
    408c:	8f ef       	ldi	r24, 0xFF	; 255
    408e:	9f ef       	ldi	r25, 0xFF	; 255
    4090:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <TIMER_Timer1_OCR1A_Set>
			TIMER_Timer1_Init(TIMER1_CTC_OCR1, TIMER1_PRESCALER_1024);
    4094:	84 e0       	ldi	r24, 0x04	; 4
    4096:	65 e0       	ldi	r22, 0x05	; 5
    4098:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <TIMER_Timer1_Init>
			time_in_us -= 4194304;
    409c:	89 81       	ldd	r24, Y+1	; 0x01
    409e:	9a 81       	ldd	r25, Y+2	; 0x02
    40a0:	ab 81       	ldd	r26, Y+3	; 0x03
    40a2:	bc 81       	ldd	r27, Y+4	; 0x04
    40a4:	80 50       	subi	r24, 0x00	; 0
    40a6:	90 40       	sbci	r25, 0x00	; 0
    40a8:	a0 44       	sbci	r26, 0x40	; 64
    40aa:	b0 40       	sbci	r27, 0x00	; 0
    40ac:	89 83       	std	Y+1, r24	; 0x01
    40ae:	9a 83       	std	Y+2, r25	; 0x02
    40b0:	ab 83       	std	Y+3, r26	; 0x03
    40b2:	bc 83       	std	Y+4, r27	; 0x04
		}
		TIMER_Timer1_OCA_Polling_Wait();
    40b4:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <TIMER_Timer1_OCA_Polling_Wait>
}



void DELAY_Timer1_us(u32_t time_in_us){
	while (time_in_us > 0) {
    40b8:	89 81       	ldd	r24, Y+1	; 0x01
    40ba:	9a 81       	ldd	r25, Y+2	; 0x02
    40bc:	ab 81       	ldd	r26, Y+3	; 0x03
    40be:	bc 81       	ldd	r27, Y+4	; 0x04
    40c0:	00 97       	sbiw	r24, 0x00	; 0
    40c2:	a1 05       	cpc	r26, r1
    40c4:	b1 05       	cpc	r27, r1
    40c6:	09 f0       	breq	.+2      	; 0x40ca <DELAY_Timer1_us+0x246>
    40c8:	e8 ce       	rjmp	.-560    	; 0x3e9a <DELAY_Timer1_us+0x16>
			TIMER_Timer1_Init(TIMER1_CTC_OCR1, TIMER1_PRESCALER_1024);
			time_in_us -= 4194304;
		}
		TIMER_Timer1_OCA_Polling_Wait();
	}
}
    40ca:	0f 90       	pop	r0
    40cc:	0f 90       	pop	r0
    40ce:	0f 90       	pop	r0
    40d0:	0f 90       	pop	r0
    40d2:	cf 91       	pop	r28
    40d4:	df 91       	pop	r29
    40d6:	08 95       	ret

000040d8 <DELAY_Timer1_ms>:

void DELAY_Timer1_ms(float time_in_ms){
    40d8:	df 93       	push	r29
    40da:	cf 93       	push	r28
    40dc:	00 d0       	rcall	.+0      	; 0x40de <DELAY_Timer1_ms+0x6>
    40de:	00 d0       	rcall	.+0      	; 0x40e0 <DELAY_Timer1_ms+0x8>
    40e0:	cd b7       	in	r28, 0x3d	; 61
    40e2:	de b7       	in	r29, 0x3e	; 62
    40e4:	69 83       	std	Y+1, r22	; 0x01
    40e6:	7a 83       	std	Y+2, r23	; 0x02
    40e8:	8b 83       	std	Y+3, r24	; 0x03
    40ea:	9c 83       	std	Y+4, r25	; 0x04
    DELAY_Timer1_us(time_in_ms * 1000);
    40ec:	69 81       	ldd	r22, Y+1	; 0x01
    40ee:	7a 81       	ldd	r23, Y+2	; 0x02
    40f0:	8b 81       	ldd	r24, Y+3	; 0x03
    40f2:	9c 81       	ldd	r25, Y+4	; 0x04
    40f4:	20 e0       	ldi	r18, 0x00	; 0
    40f6:	30 e0       	ldi	r19, 0x00	; 0
    40f8:	4a e7       	ldi	r20, 0x7A	; 122
    40fa:	54 e4       	ldi	r21, 0x44	; 68
    40fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4100:	dc 01       	movw	r26, r24
    4102:	cb 01       	movw	r24, r22
    4104:	bc 01       	movw	r22, r24
    4106:	cd 01       	movw	r24, r26
    4108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    410c:	dc 01       	movw	r26, r24
    410e:	cb 01       	movw	r24, r22
    4110:	bc 01       	movw	r22, r24
    4112:	cd 01       	movw	r24, r26
    4114:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <DELAY_Timer1_us>
}
    4118:	0f 90       	pop	r0
    411a:	0f 90       	pop	r0
    411c:	0f 90       	pop	r0
    411e:	0f 90       	pop	r0
    4120:	cf 91       	pop	r28
    4122:	df 91       	pop	r29
    4124:	08 95       	ret

00004126 <DELAY_Timer1_s>:

void DELAY_Timer1_s(float time_in_s){
    4126:	df 93       	push	r29
    4128:	cf 93       	push	r28
    412a:	00 d0       	rcall	.+0      	; 0x412c <DELAY_Timer1_s+0x6>
    412c:	00 d0       	rcall	.+0      	; 0x412e <DELAY_Timer1_s+0x8>
    412e:	cd b7       	in	r28, 0x3d	; 61
    4130:	de b7       	in	r29, 0x3e	; 62
    4132:	69 83       	std	Y+1, r22	; 0x01
    4134:	7a 83       	std	Y+2, r23	; 0x02
    4136:	8b 83       	std	Y+3, r24	; 0x03
    4138:	9c 83       	std	Y+4, r25	; 0x04
	DELAY_Timer1_us(time_in_s * 1000000);
    413a:	69 81       	ldd	r22, Y+1	; 0x01
    413c:	7a 81       	ldd	r23, Y+2	; 0x02
    413e:	8b 81       	ldd	r24, Y+3	; 0x03
    4140:	9c 81       	ldd	r25, Y+4	; 0x04
    4142:	20 e0       	ldi	r18, 0x00	; 0
    4144:	34 e2       	ldi	r19, 0x24	; 36
    4146:	44 e7       	ldi	r20, 0x74	; 116
    4148:	59 e4       	ldi	r21, 0x49	; 73
    414a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    414e:	dc 01       	movw	r26, r24
    4150:	cb 01       	movw	r24, r22
    4152:	bc 01       	movw	r22, r24
    4154:	cd 01       	movw	r24, r26
    4156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    415a:	dc 01       	movw	r26, r24
    415c:	cb 01       	movw	r24, r22
    415e:	bc 01       	movw	r22, r24
    4160:	cd 01       	movw	r24, r26
    4162:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <DELAY_Timer1_us>
}
    4166:	0f 90       	pop	r0
    4168:	0f 90       	pop	r0
    416a:	0f 90       	pop	r0
    416c:	0f 90       	pop	r0
    416e:	cf 91       	pop	r28
    4170:	df 91       	pop	r29
    4172:	08 95       	ret

00004174 <DELAY_Timer2_us>:


void DELAY_Timer2_us(u32_t time_in_us){
    4174:	df 93       	push	r29
    4176:	cf 93       	push	r28
    4178:	cd b7       	in	r28, 0x3d	; 61
    417a:	de b7       	in	r29, 0x3e	; 62
    417c:	28 97       	sbiw	r28, 0x08	; 8
    417e:	0f b6       	in	r0, 0x3f	; 63
    4180:	f8 94       	cli
    4182:	de bf       	out	0x3e, r29	; 62
    4184:	0f be       	out	0x3f, r0	; 63
    4186:	cd bf       	out	0x3d, r28	; 61
    4188:	6d 83       	std	Y+5, r22	; 0x05
    418a:	7e 83       	std	Y+6, r23	; 0x06
    418c:	8f 83       	std	Y+7, r24	; 0x07
    418e:	98 87       	std	Y+8, r25	; 0x08
	if (time_in_us <= 16){
    4190:	8d 81       	ldd	r24, Y+5	; 0x05
    4192:	9e 81       	ldd	r25, Y+6	; 0x06
    4194:	af 81       	ldd	r26, Y+7	; 0x07
    4196:	b8 85       	ldd	r27, Y+8	; 0x08
    4198:	81 31       	cpi	r24, 0x11	; 17
    419a:	91 05       	cpc	r25, r1
    419c:	a1 05       	cpc	r26, r1
    419e:	b1 05       	cpc	r27, r1
    41a0:	e0 f4       	brcc	.+56     	; 0x41da <DELAY_Timer2_us+0x66>
		TIMER_Timer2_Init(TIMER2_CTC, TIMER2_NO_PRESCALER);
    41a2:	82 e0       	ldi	r24, 0x02	; 2
    41a4:	61 e0       	ldi	r22, 0x01	; 1
    41a6:	0e 94 27 11 	call	0x224e	; 0x224e <TIMER_Timer2_Init>
		TIMER_Timer2_OCR2_Set((u8_t) (time_in_us * (F_CPU / 1000000)) - 1);
    41aa:	8d 81       	ldd	r24, Y+5	; 0x05
    41ac:	9e 81       	ldd	r25, Y+6	; 0x06
    41ae:	af 81       	ldd	r26, Y+7	; 0x07
    41b0:	b8 85       	ldd	r27, Y+8	; 0x08
    41b2:	88 0f       	add	r24, r24
    41b4:	99 1f       	adc	r25, r25
    41b6:	aa 1f       	adc	r26, r26
    41b8:	bb 1f       	adc	r27, r27
    41ba:	88 0f       	add	r24, r24
    41bc:	99 1f       	adc	r25, r25
    41be:	aa 1f       	adc	r26, r26
    41c0:	bb 1f       	adc	r27, r27
    41c2:	88 0f       	add	r24, r24
    41c4:	99 1f       	adc	r25, r25
    41c6:	aa 1f       	adc	r26, r26
    41c8:	bb 1f       	adc	r27, r27
    41ca:	88 0f       	add	r24, r24
    41cc:	99 1f       	adc	r25, r25
    41ce:	aa 1f       	adc	r26, r26
    41d0:	bb 1f       	adc	r27, r27
    41d2:	81 50       	subi	r24, 0x01	; 1
    41d4:	0e 94 8c 12 	call	0x2518	; 0x2518 <TIMER_Timer2_OCR2_Set>
    41d8:	c5 c0       	rjmp	.+394    	; 0x4364 <DELAY_Timer2_us+0x1f0>
	}
	else if (time_in_us <= 128){
    41da:	8d 81       	ldd	r24, Y+5	; 0x05
    41dc:	9e 81       	ldd	r25, Y+6	; 0x06
    41de:	af 81       	ldd	r26, Y+7	; 0x07
    41e0:	b8 85       	ldd	r27, Y+8	; 0x08
    41e2:	81 38       	cpi	r24, 0x81	; 129
    41e4:	91 05       	cpc	r25, r1
    41e6:	a1 05       	cpc	r26, r1
    41e8:	b1 05       	cpc	r27, r1
    41ea:	20 f5       	brcc	.+72     	; 0x4234 <DELAY_Timer2_us+0xc0>
		TIMER_Timer2_Init(TIMER2_CTC, TIMER2_PRESCALER_8);
    41ec:	82 e0       	ldi	r24, 0x02	; 2
    41ee:	62 e0       	ldi	r22, 0x02	; 2
    41f0:	0e 94 27 11 	call	0x224e	; 0x224e <TIMER_Timer2_Init>
		TIMER_Timer2_OCR2_Set((u8_t) (time_in_us * (F_CPU / 1000000) / 8) - 1);
    41f4:	8d 81       	ldd	r24, Y+5	; 0x05
    41f6:	9e 81       	ldd	r25, Y+6	; 0x06
    41f8:	af 81       	ldd	r26, Y+7	; 0x07
    41fa:	b8 85       	ldd	r27, Y+8	; 0x08
    41fc:	88 0f       	add	r24, r24
    41fe:	99 1f       	adc	r25, r25
    4200:	aa 1f       	adc	r26, r26
    4202:	bb 1f       	adc	r27, r27
    4204:	88 0f       	add	r24, r24
    4206:	99 1f       	adc	r25, r25
    4208:	aa 1f       	adc	r26, r26
    420a:	bb 1f       	adc	r27, r27
    420c:	88 0f       	add	r24, r24
    420e:	99 1f       	adc	r25, r25
    4210:	aa 1f       	adc	r26, r26
    4212:	bb 1f       	adc	r27, r27
    4214:	88 0f       	add	r24, r24
    4216:	99 1f       	adc	r25, r25
    4218:	aa 1f       	adc	r26, r26
    421a:	bb 1f       	adc	r27, r27
    421c:	68 94       	set
    421e:	12 f8       	bld	r1, 2
    4220:	b6 95       	lsr	r27
    4222:	a7 95       	ror	r26
    4224:	97 95       	ror	r25
    4226:	87 95       	ror	r24
    4228:	16 94       	lsr	r1
    422a:	d1 f7       	brne	.-12     	; 0x4220 <DELAY_Timer2_us+0xac>
    422c:	81 50       	subi	r24, 0x01	; 1
    422e:	0e 94 8c 12 	call	0x2518	; 0x2518 <TIMER_Timer2_OCR2_Set>
    4232:	98 c0       	rjmp	.+304    	; 0x4364 <DELAY_Timer2_us+0x1f0>
	}
	else if (time_in_us <= 512){
    4234:	8d 81       	ldd	r24, Y+5	; 0x05
    4236:	9e 81       	ldd	r25, Y+6	; 0x06
    4238:	af 81       	ldd	r26, Y+7	; 0x07
    423a:	b8 85       	ldd	r27, Y+8	; 0x08
    423c:	81 30       	cpi	r24, 0x01	; 1
    423e:	22 e0       	ldi	r18, 0x02	; 2
    4240:	92 07       	cpc	r25, r18
    4242:	20 e0       	ldi	r18, 0x00	; 0
    4244:	a2 07       	cpc	r26, r18
    4246:	20 e0       	ldi	r18, 0x00	; 0
    4248:	b2 07       	cpc	r27, r18
    424a:	20 f5       	brcc	.+72     	; 0x4294 <DELAY_Timer2_us+0x120>
		TIMER_Timer2_Init(TIMER2_CTC, TIMER2_PRESCALER_32);
    424c:	82 e0       	ldi	r24, 0x02	; 2
    424e:	63 e0       	ldi	r22, 0x03	; 3
    4250:	0e 94 27 11 	call	0x224e	; 0x224e <TIMER_Timer2_Init>
		TIMER_Timer2_OCR2_Set((u8_t) (time_in_us * (F_CPU / 1000000) / 32) - 1);
    4254:	8d 81       	ldd	r24, Y+5	; 0x05
    4256:	9e 81       	ldd	r25, Y+6	; 0x06
    4258:	af 81       	ldd	r26, Y+7	; 0x07
    425a:	b8 85       	ldd	r27, Y+8	; 0x08
    425c:	88 0f       	add	r24, r24
    425e:	99 1f       	adc	r25, r25
    4260:	aa 1f       	adc	r26, r26
    4262:	bb 1f       	adc	r27, r27
    4264:	88 0f       	add	r24, r24
    4266:	99 1f       	adc	r25, r25
    4268:	aa 1f       	adc	r26, r26
    426a:	bb 1f       	adc	r27, r27
    426c:	88 0f       	add	r24, r24
    426e:	99 1f       	adc	r25, r25
    4270:	aa 1f       	adc	r26, r26
    4272:	bb 1f       	adc	r27, r27
    4274:	88 0f       	add	r24, r24
    4276:	99 1f       	adc	r25, r25
    4278:	aa 1f       	adc	r26, r26
    427a:	bb 1f       	adc	r27, r27
    427c:	68 94       	set
    427e:	14 f8       	bld	r1, 4
    4280:	b6 95       	lsr	r27
    4282:	a7 95       	ror	r26
    4284:	97 95       	ror	r25
    4286:	87 95       	ror	r24
    4288:	16 94       	lsr	r1
    428a:	d1 f7       	brne	.-12     	; 0x4280 <DELAY_Timer2_us+0x10c>
    428c:	81 50       	subi	r24, 0x01	; 1
    428e:	0e 94 8c 12 	call	0x2518	; 0x2518 <TIMER_Timer2_OCR2_Set>
    4292:	68 c0       	rjmp	.+208    	; 0x4364 <DELAY_Timer2_us+0x1f0>
	}
	else if (time_in_us <= 1024){
    4294:	8d 81       	ldd	r24, Y+5	; 0x05
    4296:	9e 81       	ldd	r25, Y+6	; 0x06
    4298:	af 81       	ldd	r26, Y+7	; 0x07
    429a:	b8 85       	ldd	r27, Y+8	; 0x08
    429c:	81 30       	cpi	r24, 0x01	; 1
    429e:	24 e0       	ldi	r18, 0x04	; 4
    42a0:	92 07       	cpc	r25, r18
    42a2:	20 e0       	ldi	r18, 0x00	; 0
    42a4:	a2 07       	cpc	r26, r18
    42a6:	20 e0       	ldi	r18, 0x00	; 0
    42a8:	b2 07       	cpc	r27, r18
    42aa:	20 f5       	brcc	.+72     	; 0x42f4 <DELAY_Timer2_us+0x180>
		TIMER_Timer2_Init(TIMER2_CTC, TIMER2_PRESCALER_64);
    42ac:	82 e0       	ldi	r24, 0x02	; 2
    42ae:	64 e0       	ldi	r22, 0x04	; 4
    42b0:	0e 94 27 11 	call	0x224e	; 0x224e <TIMER_Timer2_Init>
		TIMER_Timer2_OCR2_Set((u8_t) (time_in_us * (F_CPU / 1000000) / 64) - 1);
    42b4:	8d 81       	ldd	r24, Y+5	; 0x05
    42b6:	9e 81       	ldd	r25, Y+6	; 0x06
    42b8:	af 81       	ldd	r26, Y+7	; 0x07
    42ba:	b8 85       	ldd	r27, Y+8	; 0x08
    42bc:	88 0f       	add	r24, r24
    42be:	99 1f       	adc	r25, r25
    42c0:	aa 1f       	adc	r26, r26
    42c2:	bb 1f       	adc	r27, r27
    42c4:	88 0f       	add	r24, r24
    42c6:	99 1f       	adc	r25, r25
    42c8:	aa 1f       	adc	r26, r26
    42ca:	bb 1f       	adc	r27, r27
    42cc:	88 0f       	add	r24, r24
    42ce:	99 1f       	adc	r25, r25
    42d0:	aa 1f       	adc	r26, r26
    42d2:	bb 1f       	adc	r27, r27
    42d4:	88 0f       	add	r24, r24
    42d6:	99 1f       	adc	r25, r25
    42d8:	aa 1f       	adc	r26, r26
    42da:	bb 1f       	adc	r27, r27
    42dc:	68 94       	set
    42de:	15 f8       	bld	r1, 5
    42e0:	b6 95       	lsr	r27
    42e2:	a7 95       	ror	r26
    42e4:	97 95       	ror	r25
    42e6:	87 95       	ror	r24
    42e8:	16 94       	lsr	r1
    42ea:	d1 f7       	brne	.-12     	; 0x42e0 <DELAY_Timer2_us+0x16c>
    42ec:	81 50       	subi	r24, 0x01	; 1
    42ee:	0e 94 8c 12 	call	0x2518	; 0x2518 <TIMER_Timer2_OCR2_Set>
    42f2:	38 c0       	rjmp	.+112    	; 0x4364 <DELAY_Timer2_us+0x1f0>
	}
	else{					// If the requested delay is more than 1024us.
		// Divide it into two delays, one in ms and the other in us.
		u32_t ms_part = (u32_t) (time_in_us / 1000);		// Divide the delay by 1000 to get the ms part.
    42f4:	8d 81       	ldd	r24, Y+5	; 0x05
    42f6:	9e 81       	ldd	r25, Y+6	; 0x06
    42f8:	af 81       	ldd	r26, Y+7	; 0x07
    42fa:	b8 85       	ldd	r27, Y+8	; 0x08
    42fc:	28 ee       	ldi	r18, 0xE8	; 232
    42fe:	33 e0       	ldi	r19, 0x03	; 3
    4300:	40 e0       	ldi	r20, 0x00	; 0
    4302:	50 e0       	ldi	r21, 0x00	; 0
    4304:	bc 01       	movw	r22, r24
    4306:	cd 01       	movw	r24, r26
    4308:	0e 94 c9 35 	call	0x6b92	; 0x6b92 <__udivmodsi4>
    430c:	da 01       	movw	r26, r20
    430e:	c9 01       	movw	r24, r18
    4310:	89 83       	std	Y+1, r24	; 0x01
    4312:	9a 83       	std	Y+2, r25	; 0x02
    4314:	ab 83       	std	Y+3, r26	; 0x03
    4316:	bc 83       	std	Y+4, r27	; 0x04
		DELAY_Timer2_ms(ms_part);
    4318:	69 81       	ldd	r22, Y+1	; 0x01
    431a:	7a 81       	ldd	r23, Y+2	; 0x02
    431c:	8b 81       	ldd	r24, Y+3	; 0x03
    431e:	9c 81       	ldd	r25, Y+4	; 0x04
    4320:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    4324:	dc 01       	movw	r26, r24
    4326:	cb 01       	movw	r24, r22
    4328:	bc 01       	movw	r22, r24
    432a:	cd 01       	movw	r24, r26
    432c:	0e 94 bd 21 	call	0x437a	; 0x437a <DELAY_Timer2_ms>
		time_in_us%= 1000;									// The us part is the fraction of the delay divided by 1000.
    4330:	8d 81       	ldd	r24, Y+5	; 0x05
    4332:	9e 81       	ldd	r25, Y+6	; 0x06
    4334:	af 81       	ldd	r26, Y+7	; 0x07
    4336:	b8 85       	ldd	r27, Y+8	; 0x08
    4338:	28 ee       	ldi	r18, 0xE8	; 232
    433a:	33 e0       	ldi	r19, 0x03	; 3
    433c:	40 e0       	ldi	r20, 0x00	; 0
    433e:	50 e0       	ldi	r21, 0x00	; 0
    4340:	bc 01       	movw	r22, r24
    4342:	cd 01       	movw	r24, r26
    4344:	0e 94 c9 35 	call	0x6b92	; 0x6b92 <__udivmodsi4>
    4348:	dc 01       	movw	r26, r24
    434a:	cb 01       	movw	r24, r22
    434c:	8d 83       	std	Y+5, r24	; 0x05
    434e:	9e 83       	std	Y+6, r25	; 0x06
    4350:	af 83       	std	Y+7, r26	; 0x07
    4352:	b8 87       	std	Y+8, r27	; 0x08
		DELAY_Timer2_us(time_in_us);
    4354:	8d 81       	ldd	r24, Y+5	; 0x05
    4356:	9e 81       	ldd	r25, Y+6	; 0x06
    4358:	af 81       	ldd	r26, Y+7	; 0x07
    435a:	b8 85       	ldd	r27, Y+8	; 0x08
    435c:	bc 01       	movw	r22, r24
    435e:	cd 01       	movw	r24, r26
    4360:	0e 94 ba 20 	call	0x4174	; 0x4174 <DELAY_Timer2_us>
	}
	TIMER_Timer2_OC_Polling_Wait();
    4364:	0e 94 79 13 	call	0x26f2	; 0x26f2 <TIMER_Timer2_OC_Polling_Wait>
}
    4368:	28 96       	adiw	r28, 0x08	; 8
    436a:	0f b6       	in	r0, 0x3f	; 63
    436c:	f8 94       	cli
    436e:	de bf       	out	0x3e, r29	; 62
    4370:	0f be       	out	0x3f, r0	; 63
    4372:	cd bf       	out	0x3d, r28	; 61
    4374:	cf 91       	pop	r28
    4376:	df 91       	pop	r29
    4378:	08 95       	ret

0000437a <DELAY_Timer2_ms>:

void DELAY_Timer2_ms(float time_in_ms){
    437a:	df 93       	push	r29
    437c:	cf 93       	push	r28
    437e:	00 d0       	rcall	.+0      	; 0x4380 <DELAY_Timer2_ms+0x6>
    4380:	00 d0       	rcall	.+0      	; 0x4382 <DELAY_Timer2_ms+0x8>
    4382:	cd b7       	in	r28, 0x3d	; 61
    4384:	de b7       	in	r29, 0x3e	; 62
    4386:	69 83       	std	Y+1, r22	; 0x01
    4388:	7a 83       	std	Y+2, r23	; 0x02
    438a:	8b 83       	std	Y+3, r24	; 0x03
    438c:	9c 83       	std	Y+4, r25	; 0x04
	if (time_in_ms - (int) time_in_ms > 0){
    438e:	69 81       	ldd	r22, Y+1	; 0x01
    4390:	7a 81       	ldd	r23, Y+2	; 0x02
    4392:	8b 81       	ldd	r24, Y+3	; 0x03
    4394:	9c 81       	ldd	r25, Y+4	; 0x04
    4396:	0e 94 43 05 	call	0xa86	; 0xa86 <__fixsfsi>
    439a:	dc 01       	movw	r26, r24
    439c:	cb 01       	movw	r24, r22
    439e:	aa 27       	eor	r26, r26
    43a0:	97 fd       	sbrc	r25, 7
    43a2:	a0 95       	com	r26
    43a4:	ba 2f       	mov	r27, r26
    43a6:	bc 01       	movw	r22, r24
    43a8:	cd 01       	movw	r24, r26
    43aa:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__floatsisf>
    43ae:	9b 01       	movw	r18, r22
    43b0:	ac 01       	movw	r20, r24
    43b2:	69 81       	ldd	r22, Y+1	; 0x01
    43b4:	7a 81       	ldd	r23, Y+2	; 0x02
    43b6:	8b 81       	ldd	r24, Y+3	; 0x03
    43b8:	9c 81       	ldd	r25, Y+4	; 0x04
    43ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    43be:	dc 01       	movw	r26, r24
    43c0:	cb 01       	movw	r24, r22
    43c2:	bc 01       	movw	r22, r24
    43c4:	cd 01       	movw	r24, r26
    43c6:	20 e0       	ldi	r18, 0x00	; 0
    43c8:	30 e0       	ldi	r19, 0x00	; 0
    43ca:	40 e0       	ldi	r20, 0x00	; 0
    43cc:	50 e0       	ldi	r21, 0x00	; 0
    43ce:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    43d2:	18 16       	cp	r1, r24
    43d4:	0c f0       	brlt	.+2      	; 0x43d8 <DELAY_Timer2_ms+0x5e>
    43d6:	3c c1       	rjmp	.+632    	; 0x4650 <DELAY_Timer2_ms+0x2d6>
		DELAY_Timer2_us((time_in_ms - (int) time_in_ms) * 1000);
    43d8:	69 81       	ldd	r22, Y+1	; 0x01
    43da:	7a 81       	ldd	r23, Y+2	; 0x02
    43dc:	8b 81       	ldd	r24, Y+3	; 0x03
    43de:	9c 81       	ldd	r25, Y+4	; 0x04
    43e0:	0e 94 43 05 	call	0xa86	; 0xa86 <__fixsfsi>
    43e4:	dc 01       	movw	r26, r24
    43e6:	cb 01       	movw	r24, r22
    43e8:	aa 27       	eor	r26, r26
    43ea:	97 fd       	sbrc	r25, 7
    43ec:	a0 95       	com	r26
    43ee:	ba 2f       	mov	r27, r26
    43f0:	bc 01       	movw	r22, r24
    43f2:	cd 01       	movw	r24, r26
    43f4:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__floatsisf>
    43f8:	9b 01       	movw	r18, r22
    43fa:	ac 01       	movw	r20, r24
    43fc:	69 81       	ldd	r22, Y+1	; 0x01
    43fe:	7a 81       	ldd	r23, Y+2	; 0x02
    4400:	8b 81       	ldd	r24, Y+3	; 0x03
    4402:	9c 81       	ldd	r25, Y+4	; 0x04
    4404:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4408:	dc 01       	movw	r26, r24
    440a:	cb 01       	movw	r24, r22
    440c:	bc 01       	movw	r22, r24
    440e:	cd 01       	movw	r24, r26
    4410:	20 e0       	ldi	r18, 0x00	; 0
    4412:	30 e0       	ldi	r19, 0x00	; 0
    4414:	4a e7       	ldi	r20, 0x7A	; 122
    4416:	54 e4       	ldi	r21, 0x44	; 68
    4418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    441c:	dc 01       	movw	r26, r24
    441e:	cb 01       	movw	r24, r22
    4420:	bc 01       	movw	r22, r24
    4422:	cd 01       	movw	r24, r26
    4424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4428:	dc 01       	movw	r26, r24
    442a:	cb 01       	movw	r24, r22
    442c:	bc 01       	movw	r22, r24
    442e:	cd 01       	movw	r24, r26
    4430:	0e 94 ba 20 	call	0x4174	; 0x4174 <DELAY_Timer2_us>
		time_in_ms = (int) time_in_ms;
    4434:	69 81       	ldd	r22, Y+1	; 0x01
    4436:	7a 81       	ldd	r23, Y+2	; 0x02
    4438:	8b 81       	ldd	r24, Y+3	; 0x03
    443a:	9c 81       	ldd	r25, Y+4	; 0x04
    443c:	0e 94 43 05 	call	0xa86	; 0xa86 <__fixsfsi>
    4440:	dc 01       	movw	r26, r24
    4442:	cb 01       	movw	r24, r22
    4444:	aa 27       	eor	r26, r26
    4446:	97 fd       	sbrc	r25, 7
    4448:	a0 95       	com	r26
    444a:	ba 2f       	mov	r27, r26
    444c:	bc 01       	movw	r22, r24
    444e:	cd 01       	movw	r24, r26
    4450:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__floatsisf>
    4454:	dc 01       	movw	r26, r24
    4456:	cb 01       	movw	r24, r22
    4458:	89 83       	std	Y+1, r24	; 0x01
    445a:	9a 83       	std	Y+2, r25	; 0x02
    445c:	ab 83       	std	Y+3, r26	; 0x03
    445e:	bc 83       	std	Y+4, r27	; 0x04
    4460:	f7 c0       	rjmp	.+494    	; 0x4650 <DELAY_Timer2_ms+0x2d6>
	}

    while (time_in_ms > 0) {
        if (time_in_ms == 1) {
    4462:	69 81       	ldd	r22, Y+1	; 0x01
    4464:	7a 81       	ldd	r23, Y+2	; 0x02
    4466:	8b 81       	ldd	r24, Y+3	; 0x03
    4468:	9c 81       	ldd	r25, Y+4	; 0x04
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	40 e8       	ldi	r20, 0x80	; 128
    4470:	5f e3       	ldi	r21, 0x3F	; 63
    4472:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    4476:	88 23       	and	r24, r24
    4478:	79 f4       	brne	.+30     	; 0x4498 <DELAY_Timer2_ms+0x11e>
            TIMER_Timer2_OCR2_Set(249);
    447a:	89 ef       	ldi	r24, 0xF9	; 249
    447c:	0e 94 8c 12 	call	0x2518	; 0x2518 <TIMER_Timer2_OCR2_Set>
            TIMER_Timer2_Init(TIMER2_CTC, TIMER2_PRESCALER_64);
    4480:	82 e0       	ldi	r24, 0x02	; 2
    4482:	64 e0       	ldi	r22, 0x04	; 4
    4484:	0e 94 27 11 	call	0x224e	; 0x224e <TIMER_Timer2_Init>
            time_in_ms = 0;
    4488:	80 e0       	ldi	r24, 0x00	; 0
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	a0 e0       	ldi	r26, 0x00	; 0
    448e:	b0 e0       	ldi	r27, 0x00	; 0
    4490:	89 83       	std	Y+1, r24	; 0x01
    4492:	9a 83       	std	Y+2, r25	; 0x02
    4494:	ab 83       	std	Y+3, r26	; 0x03
    4496:	bc 83       	std	Y+4, r27	; 0x04
        }
        if (time_in_ms <= 2) {
    4498:	69 81       	ldd	r22, Y+1	; 0x01
    449a:	7a 81       	ldd	r23, Y+2	; 0x02
    449c:	8b 81       	ldd	r24, Y+3	; 0x03
    449e:	9c 81       	ldd	r25, Y+4	; 0x04
    44a0:	20 e0       	ldi	r18, 0x00	; 0
    44a2:	30 e0       	ldi	r19, 0x00	; 0
    44a4:	40 e0       	ldi	r20, 0x00	; 0
    44a6:	50 e4       	ldi	r21, 0x40	; 64
    44a8:	0e 94 b5 04 	call	0x96a	; 0x96a <__lesf2>
    44ac:	18 16       	cp	r1, r24
    44ae:	ac f1       	brlt	.+106    	; 0x451a <DELAY_Timer2_ms+0x1a0>
        	TIMER_Timer2_OCR2_Set((u8_t)((time_in_ms * (F_CPU / 1000) / 128) - 1));
    44b0:	69 81       	ldd	r22, Y+1	; 0x01
    44b2:	7a 81       	ldd	r23, Y+2	; 0x02
    44b4:	8b 81       	ldd	r24, Y+3	; 0x03
    44b6:	9c 81       	ldd	r25, Y+4	; 0x04
    44b8:	20 e0       	ldi	r18, 0x00	; 0
    44ba:	30 e0       	ldi	r19, 0x00	; 0
    44bc:	4a e7       	ldi	r20, 0x7A	; 122
    44be:	56 e4       	ldi	r21, 0x46	; 70
    44c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44c4:	dc 01       	movw	r26, r24
    44c6:	cb 01       	movw	r24, r22
    44c8:	bc 01       	movw	r22, r24
    44ca:	cd 01       	movw	r24, r26
    44cc:	20 e0       	ldi	r18, 0x00	; 0
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	40 e0       	ldi	r20, 0x00	; 0
    44d2:	53 e4       	ldi	r21, 0x43	; 67
    44d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    44d8:	dc 01       	movw	r26, r24
    44da:	cb 01       	movw	r24, r22
    44dc:	bc 01       	movw	r22, r24
    44de:	cd 01       	movw	r24, r26
    44e0:	20 e0       	ldi	r18, 0x00	; 0
    44e2:	30 e0       	ldi	r19, 0x00	; 0
    44e4:	40 e8       	ldi	r20, 0x80	; 128
    44e6:	5f e3       	ldi	r21, 0x3F	; 63
    44e8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    44ec:	dc 01       	movw	r26, r24
    44ee:	cb 01       	movw	r24, r22
    44f0:	bc 01       	movw	r22, r24
    44f2:	cd 01       	movw	r24, r26
    44f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f8:	dc 01       	movw	r26, r24
    44fa:	cb 01       	movw	r24, r22
    44fc:	0e 94 8c 12 	call	0x2518	; 0x2518 <TIMER_Timer2_OCR2_Set>
        	TIMER_Timer2_Init(TIMER2_CTC, TIMER2_PRESCALER_128);
    4500:	82 e0       	ldi	r24, 0x02	; 2
    4502:	65 e0       	ldi	r22, 0x05	; 5
    4504:	0e 94 27 11 	call	0x224e	; 0x224e <TIMER_Timer2_Init>
        	time_in_ms = 0;
    4508:	80 e0       	ldi	r24, 0x00	; 0
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	a0 e0       	ldi	r26, 0x00	; 0
    450e:	b0 e0       	ldi	r27, 0x00	; 0
    4510:	89 83       	std	Y+1, r24	; 0x01
    4512:	9a 83       	std	Y+2, r25	; 0x02
    4514:	ab 83       	std	Y+3, r26	; 0x03
    4516:	bc 83       	std	Y+4, r27	; 0x04
    4518:	99 c0       	rjmp	.+306    	; 0x464c <DELAY_Timer2_ms+0x2d2>
        }
        else if (time_in_ms <= 4) {
    451a:	69 81       	ldd	r22, Y+1	; 0x01
    451c:	7a 81       	ldd	r23, Y+2	; 0x02
    451e:	8b 81       	ldd	r24, Y+3	; 0x03
    4520:	9c 81       	ldd	r25, Y+4	; 0x04
    4522:	20 e0       	ldi	r18, 0x00	; 0
    4524:	30 e0       	ldi	r19, 0x00	; 0
    4526:	40 e8       	ldi	r20, 0x80	; 128
    4528:	50 e4       	ldi	r21, 0x40	; 64
    452a:	0e 94 b5 04 	call	0x96a	; 0x96a <__lesf2>
    452e:	18 16       	cp	r1, r24
    4530:	ac f1       	brlt	.+106    	; 0x459c <DELAY_Timer2_ms+0x222>
            TIMER_Timer2_OCR2_Set((u8_t)((time_in_ms * (F_CPU / 1000) / 256) - 1));
    4532:	69 81       	ldd	r22, Y+1	; 0x01
    4534:	7a 81       	ldd	r23, Y+2	; 0x02
    4536:	8b 81       	ldd	r24, Y+3	; 0x03
    4538:	9c 81       	ldd	r25, Y+4	; 0x04
    453a:	20 e0       	ldi	r18, 0x00	; 0
    453c:	30 e0       	ldi	r19, 0x00	; 0
    453e:	4a e7       	ldi	r20, 0x7A	; 122
    4540:	56 e4       	ldi	r21, 0x46	; 70
    4542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4546:	dc 01       	movw	r26, r24
    4548:	cb 01       	movw	r24, r22
    454a:	bc 01       	movw	r22, r24
    454c:	cd 01       	movw	r24, r26
    454e:	20 e0       	ldi	r18, 0x00	; 0
    4550:	30 e0       	ldi	r19, 0x00	; 0
    4552:	40 e8       	ldi	r20, 0x80	; 128
    4554:	53 e4       	ldi	r21, 0x43	; 67
    4556:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    455a:	dc 01       	movw	r26, r24
    455c:	cb 01       	movw	r24, r22
    455e:	bc 01       	movw	r22, r24
    4560:	cd 01       	movw	r24, r26
    4562:	20 e0       	ldi	r18, 0x00	; 0
    4564:	30 e0       	ldi	r19, 0x00	; 0
    4566:	40 e8       	ldi	r20, 0x80	; 128
    4568:	5f e3       	ldi	r21, 0x3F	; 63
    456a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    456e:	dc 01       	movw	r26, r24
    4570:	cb 01       	movw	r24, r22
    4572:	bc 01       	movw	r22, r24
    4574:	cd 01       	movw	r24, r26
    4576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    457a:	dc 01       	movw	r26, r24
    457c:	cb 01       	movw	r24, r22
    457e:	0e 94 8c 12 	call	0x2518	; 0x2518 <TIMER_Timer2_OCR2_Set>
            TIMER_Timer2_Init(TIMER2_CTC, TIMER2_PRESCALER_256);
    4582:	82 e0       	ldi	r24, 0x02	; 2
    4584:	66 e0       	ldi	r22, 0x06	; 6
    4586:	0e 94 27 11 	call	0x224e	; 0x224e <TIMER_Timer2_Init>
            time_in_ms = 0;
    458a:	80 e0       	ldi	r24, 0x00	; 0
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	a0 e0       	ldi	r26, 0x00	; 0
    4590:	b0 e0       	ldi	r27, 0x00	; 0
    4592:	89 83       	std	Y+1, r24	; 0x01
    4594:	9a 83       	std	Y+2, r25	; 0x02
    4596:	ab 83       	std	Y+3, r26	; 0x03
    4598:	bc 83       	std	Y+4, r27	; 0x04
    459a:	58 c0       	rjmp	.+176    	; 0x464c <DELAY_Timer2_ms+0x2d2>
        } else if (time_in_ms <= 16) {
    459c:	69 81       	ldd	r22, Y+1	; 0x01
    459e:	7a 81       	ldd	r23, Y+2	; 0x02
    45a0:	8b 81       	ldd	r24, Y+3	; 0x03
    45a2:	9c 81       	ldd	r25, Y+4	; 0x04
    45a4:	20 e0       	ldi	r18, 0x00	; 0
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	40 e8       	ldi	r20, 0x80	; 128
    45aa:	51 e4       	ldi	r21, 0x41	; 65
    45ac:	0e 94 b5 04 	call	0x96a	; 0x96a <__lesf2>
    45b0:	18 16       	cp	r1, r24
    45b2:	ac f1       	brlt	.+106    	; 0x461e <DELAY_Timer2_ms+0x2a4>
            TIMER_Timer2_OCR2_Set((u8_t)((time_in_ms * (F_CPU / 1000) / 1024) - 1));
    45b4:	69 81       	ldd	r22, Y+1	; 0x01
    45b6:	7a 81       	ldd	r23, Y+2	; 0x02
    45b8:	8b 81       	ldd	r24, Y+3	; 0x03
    45ba:	9c 81       	ldd	r25, Y+4	; 0x04
    45bc:	20 e0       	ldi	r18, 0x00	; 0
    45be:	30 e0       	ldi	r19, 0x00	; 0
    45c0:	4a e7       	ldi	r20, 0x7A	; 122
    45c2:	56 e4       	ldi	r21, 0x46	; 70
    45c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45c8:	dc 01       	movw	r26, r24
    45ca:	cb 01       	movw	r24, r22
    45cc:	bc 01       	movw	r22, r24
    45ce:	cd 01       	movw	r24, r26
    45d0:	20 e0       	ldi	r18, 0x00	; 0
    45d2:	30 e0       	ldi	r19, 0x00	; 0
    45d4:	40 e8       	ldi	r20, 0x80	; 128
    45d6:	54 e4       	ldi	r21, 0x44	; 68
    45d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    45dc:	dc 01       	movw	r26, r24
    45de:	cb 01       	movw	r24, r22
    45e0:	bc 01       	movw	r22, r24
    45e2:	cd 01       	movw	r24, r26
    45e4:	20 e0       	ldi	r18, 0x00	; 0
    45e6:	30 e0       	ldi	r19, 0x00	; 0
    45e8:	40 e8       	ldi	r20, 0x80	; 128
    45ea:	5f e3       	ldi	r21, 0x3F	; 63
    45ec:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    45f0:	dc 01       	movw	r26, r24
    45f2:	cb 01       	movw	r24, r22
    45f4:	bc 01       	movw	r22, r24
    45f6:	cd 01       	movw	r24, r26
    45f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45fc:	dc 01       	movw	r26, r24
    45fe:	cb 01       	movw	r24, r22
    4600:	0e 94 8c 12 	call	0x2518	; 0x2518 <TIMER_Timer2_OCR2_Set>
            TIMER_Timer2_Init(TIMER2_CTC, TIMER2_PRESCALER_1024);
    4604:	82 e0       	ldi	r24, 0x02	; 2
    4606:	67 e0       	ldi	r22, 0x07	; 7
    4608:	0e 94 27 11 	call	0x224e	; 0x224e <TIMER_Timer2_Init>
            time_in_ms = 0;
    460c:	80 e0       	ldi	r24, 0x00	; 0
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	a0 e0       	ldi	r26, 0x00	; 0
    4612:	b0 e0       	ldi	r27, 0x00	; 0
    4614:	89 83       	std	Y+1, r24	; 0x01
    4616:	9a 83       	std	Y+2, r25	; 0x02
    4618:	ab 83       	std	Y+3, r26	; 0x03
    461a:	bc 83       	std	Y+4, r27	; 0x04
    461c:	17 c0       	rjmp	.+46     	; 0x464c <DELAY_Timer2_ms+0x2d2>
        } else {  // For longer delays, split into 16ms chunks
            TIMER_Timer2_OCR2_Set((u8_t)((16 * (F_CPU / 1000) / 1024) - 1));
    461e:	89 ef       	ldi	r24, 0xF9	; 249
    4620:	0e 94 8c 12 	call	0x2518	; 0x2518 <TIMER_Timer2_OCR2_Set>
            TIMER_Timer2_Init(TIMER2_CTC, TIMER2_PRESCALER_1024);
    4624:	82 e0       	ldi	r24, 0x02	; 2
    4626:	67 e0       	ldi	r22, 0x07	; 7
    4628:	0e 94 27 11 	call	0x224e	; 0x224e <TIMER_Timer2_Init>
            time_in_ms -= 16;
    462c:	69 81       	ldd	r22, Y+1	; 0x01
    462e:	7a 81       	ldd	r23, Y+2	; 0x02
    4630:	8b 81       	ldd	r24, Y+3	; 0x03
    4632:	9c 81       	ldd	r25, Y+4	; 0x04
    4634:	20 e0       	ldi	r18, 0x00	; 0
    4636:	30 e0       	ldi	r19, 0x00	; 0
    4638:	40 e8       	ldi	r20, 0x80	; 128
    463a:	51 e4       	ldi	r21, 0x41	; 65
    463c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4640:	dc 01       	movw	r26, r24
    4642:	cb 01       	movw	r24, r22
    4644:	89 83       	std	Y+1, r24	; 0x01
    4646:	9a 83       	std	Y+2, r25	; 0x02
    4648:	ab 83       	std	Y+3, r26	; 0x03
    464a:	bc 83       	std	Y+4, r27	; 0x04
        }
        TIMER_Timer2_OC_Polling_Wait();
    464c:	0e 94 79 13 	call	0x26f2	; 0x26f2 <TIMER_Timer2_OC_Polling_Wait>
	if (time_in_ms - (int) time_in_ms > 0){
		DELAY_Timer2_us((time_in_ms - (int) time_in_ms) * 1000);
		time_in_ms = (int) time_in_ms;
	}

    while (time_in_ms > 0) {
    4650:	69 81       	ldd	r22, Y+1	; 0x01
    4652:	7a 81       	ldd	r23, Y+2	; 0x02
    4654:	8b 81       	ldd	r24, Y+3	; 0x03
    4656:	9c 81       	ldd	r25, Y+4	; 0x04
    4658:	20 e0       	ldi	r18, 0x00	; 0
    465a:	30 e0       	ldi	r19, 0x00	; 0
    465c:	40 e0       	ldi	r20, 0x00	; 0
    465e:	50 e0       	ldi	r21, 0x00	; 0
    4660:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    4664:	18 16       	cp	r1, r24
    4666:	0c f4       	brge	.+2      	; 0x466a <DELAY_Timer2_ms+0x2f0>
    4668:	fc ce       	rjmp	.-520    	; 0x4462 <DELAY_Timer2_ms+0xe8>
            TIMER_Timer2_Init(TIMER2_CTC, TIMER2_PRESCALER_1024);
            time_in_ms -= 16;
        }
        TIMER_Timer2_OC_Polling_Wait();
    }
}
    466a:	0f 90       	pop	r0
    466c:	0f 90       	pop	r0
    466e:	0f 90       	pop	r0
    4670:	0f 90       	pop	r0
    4672:	cf 91       	pop	r28
    4674:	df 91       	pop	r29
    4676:	08 95       	ret

00004678 <DELAY_Timer2_s>:

void DELAY_Timer2_s(float time_in_s){
    4678:	df 93       	push	r29
    467a:	cf 93       	push	r28
    467c:	00 d0       	rcall	.+0      	; 0x467e <DELAY_Timer2_s+0x6>
    467e:	00 d0       	rcall	.+0      	; 0x4680 <DELAY_Timer2_s+0x8>
    4680:	cd b7       	in	r28, 0x3d	; 61
    4682:	de b7       	in	r29, 0x3e	; 62
    4684:	69 83       	std	Y+1, r22	; 0x01
    4686:	7a 83       	std	Y+2, r23	; 0x02
    4688:	8b 83       	std	Y+3, r24	; 0x03
    468a:	9c 83       	std	Y+4, r25	; 0x04
	// The maximum delay to be generated by Timer2 is 16.384ms, so we call the DELAY_Timer2_ms function with time in seconds converted to be in milliseconds.
	DELAY_Timer2_ms(time_in_s * 1000);
    468c:	69 81       	ldd	r22, Y+1	; 0x01
    468e:	7a 81       	ldd	r23, Y+2	; 0x02
    4690:	8b 81       	ldd	r24, Y+3	; 0x03
    4692:	9c 81       	ldd	r25, Y+4	; 0x04
    4694:	20 e0       	ldi	r18, 0x00	; 0
    4696:	30 e0       	ldi	r19, 0x00	; 0
    4698:	4a e7       	ldi	r20, 0x7A	; 122
    469a:	54 e4       	ldi	r21, 0x44	; 68
    469c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a0:	dc 01       	movw	r26, r24
    46a2:	cb 01       	movw	r24, r22
    46a4:	bc 01       	movw	r22, r24
    46a6:	cd 01       	movw	r24, r26
    46a8:	0e 94 bd 21 	call	0x437a	; 0x437a <DELAY_Timer2_ms>
}
    46ac:	0f 90       	pop	r0
    46ae:	0f 90       	pop	r0
    46b0:	0f 90       	pop	r0
    46b2:	0f 90       	pop	r0
    46b4:	cf 91       	pop	r28
    46b6:	df 91       	pop	r29
    46b8:	08 95       	ret

000046ba <SERVO_Init>:
/********************************\
*********** Functions ************
\********************************/

void SERVO_Init(void)
{
    46ba:	df 93       	push	r29
    46bc:	cf 93       	push	r28
    46be:	cd b7       	in	r28, 0x3d	; 61
    46c0:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(SERVO_PORT, SERVO_PIN, PIN_OUTPUT);
    46c2:	83 e0       	ldi	r24, 0x03	; 3
    46c4:	67 e0       	ldi	r22, 0x07	; 7
    46c6:	41 e0       	ldi	r20, 0x01	; 1
    46c8:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
	TIMER_Timer1_ICR1_Set(SERVO_TOP_VALUE_PRESCALER_256);
    46cc:	81 ee       	ldi	r24, 0xE1	; 225
    46ce:	94 e0       	ldi	r25, 0x04	; 4
    46d0:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <TIMER_Timer1_ICR1_Set>
	SERVO_High();								// Initialize the pulse as high.
    46d4:	0e 94 88 26 	call	0x4d10	; 0x4d10 <SERVO_High>
	TIMER_Timer1_OCA_EnableInterrupt();			// Enable output compare match interrupt.
    46d8:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <TIMER_Timer1_OCA_EnableInterrupt>
	TIMER_Timer1_IC_EnableInterrupt();			// Enable input capture interrupt.
    46dc:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <TIMER_Timer1_IC_EnableInterrupt>
	TIMER_Timer1_OCA_SetCallBack(SERVO_Low);	// When TCNT1 = OCR1A, generate 0v for the servo motor.
    46e0:	84 e9       	ldi	r24, 0x94	; 148
    46e2:	96 e2       	ldi	r25, 0x26	; 38
    46e4:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <TIMER_Timer1_OCA_SetCallBack>
	TIMER_Timer1_IC_SetCallBack(SERVO_High);	// When reaching the top (ICR1), generate 5v for the servo motor.
    46e8:	88 e8       	ldi	r24, 0x88	; 136
    46ea:	96 e2       	ldi	r25, 0x26	; 38
    46ec:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <TIMER_Timer1_IC_SetCallBack>
	TIMER_Timer1_Init(TIMER1_FAST_PWM_ICR1, TIMER1_PRESCALER_256);
    46f0:	8d e0       	ldi	r24, 0x0D	; 13
    46f2:	64 e0       	ldi	r22, 0x04	; 4
    46f4:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <TIMER_Timer1_Init>
}
    46f8:	cf 91       	pop	r28
    46fa:	df 91       	pop	r29
    46fc:	08 95       	ret

000046fe <SERVO_Center>:

/* Move the servo to the center position (1.5ms pulse) */
void SERVO_Center(void)
{
    46fe:	df 93       	push	r29
    4700:	cf 93       	push	r28
    4702:	cd b7       	in	r28, 0x3d	; 61
    4704:	de b7       	in	r29, 0x3e	; 62
    4706:	6c 97       	sbiw	r28, 0x1c	; 28
    4708:	0f b6       	in	r0, 0x3f	; 63
    470a:	f8 94       	cli
    470c:	de bf       	out	0x3e, r29	; 62
    470e:	0f be       	out	0x3f, r0	; 63
    4710:	cd bf       	out	0x3d, r28	; 61
    SERVO_Init();  // Initialize the servo motor.
    4712:	0e 94 5d 23 	call	0x46ba	; 0x46ba <SERVO_Init>
    TIMER_Timer1_OCR1A_Set(SERVO_CENTER_PULSE_PRESCALER_256);  // Set the pulse width for the center position.
    4716:	8d e5       	ldi	r24, 0x5D	; 93
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <TIMER_Timer1_OCR1A_Set>
    471e:	80 e0       	ldi	r24, 0x00	; 0
    4720:	90 e8       	ldi	r25, 0x80	; 128
    4722:	a4 ed       	ldi	r26, 0xD4	; 212
    4724:	b4 e4       	ldi	r27, 0x44	; 68
    4726:	89 8f       	std	Y+25, r24	; 0x19
    4728:	9a 8f       	std	Y+26, r25	; 0x1a
    472a:	ab 8f       	std	Y+27, r26	; 0x1b
    472c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    472e:	69 8d       	ldd	r22, Y+25	; 0x19
    4730:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4732:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4734:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4736:	20 e0       	ldi	r18, 0x00	; 0
    4738:	30 e0       	ldi	r19, 0x00	; 0
    473a:	4a e7       	ldi	r20, 0x7A	; 122
    473c:	55 e4       	ldi	r21, 0x45	; 69
    473e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4742:	dc 01       	movw	r26, r24
    4744:	cb 01       	movw	r24, r22
    4746:	8d 8b       	std	Y+21, r24	; 0x15
    4748:	9e 8b       	std	Y+22, r25	; 0x16
    474a:	af 8b       	std	Y+23, r26	; 0x17
    474c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    474e:	6d 89       	ldd	r22, Y+21	; 0x15
    4750:	7e 89       	ldd	r23, Y+22	; 0x16
    4752:	8f 89       	ldd	r24, Y+23	; 0x17
    4754:	98 8d       	ldd	r25, Y+24	; 0x18
    4756:	20 e0       	ldi	r18, 0x00	; 0
    4758:	30 e0       	ldi	r19, 0x00	; 0
    475a:	40 e8       	ldi	r20, 0x80	; 128
    475c:	5f e3       	ldi	r21, 0x3F	; 63
    475e:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    4762:	88 23       	and	r24, r24
    4764:	2c f4       	brge	.+10     	; 0x4770 <SERVO_Center+0x72>
		__ticks = 1;
    4766:	81 e0       	ldi	r24, 0x01	; 1
    4768:	90 e0       	ldi	r25, 0x00	; 0
    476a:	9c 8b       	std	Y+20, r25	; 0x14
    476c:	8b 8b       	std	Y+19, r24	; 0x13
    476e:	3f c0       	rjmp	.+126    	; 0x47ee <SERVO_Center+0xf0>
	else if (__tmp > 65535)
    4770:	6d 89       	ldd	r22, Y+21	; 0x15
    4772:	7e 89       	ldd	r23, Y+22	; 0x16
    4774:	8f 89       	ldd	r24, Y+23	; 0x17
    4776:	98 8d       	ldd	r25, Y+24	; 0x18
    4778:	20 e0       	ldi	r18, 0x00	; 0
    477a:	3f ef       	ldi	r19, 0xFF	; 255
    477c:	4f e7       	ldi	r20, 0x7F	; 127
    477e:	57 e4       	ldi	r21, 0x47	; 71
    4780:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    4784:	18 16       	cp	r1, r24
    4786:	4c f5       	brge	.+82     	; 0x47da <SERVO_Center+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4788:	69 8d       	ldd	r22, Y+25	; 0x19
    478a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    478c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    478e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4790:	20 e0       	ldi	r18, 0x00	; 0
    4792:	30 e0       	ldi	r19, 0x00	; 0
    4794:	40 e2       	ldi	r20, 0x20	; 32
    4796:	51 e4       	ldi	r21, 0x41	; 65
    4798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    479c:	dc 01       	movw	r26, r24
    479e:	cb 01       	movw	r24, r22
    47a0:	bc 01       	movw	r22, r24
    47a2:	cd 01       	movw	r24, r26
    47a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47a8:	dc 01       	movw	r26, r24
    47aa:	cb 01       	movw	r24, r22
    47ac:	9c 8b       	std	Y+20, r25	; 0x14
    47ae:	8b 8b       	std	Y+19, r24	; 0x13
    47b0:	0f c0       	rjmp	.+30     	; 0x47d0 <SERVO_Center+0xd2>
    47b2:	80 e9       	ldi	r24, 0x90	; 144
    47b4:	91 e0       	ldi	r25, 0x01	; 1
    47b6:	9a 8b       	std	Y+18, r25	; 0x12
    47b8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    47ba:	89 89       	ldd	r24, Y+17	; 0x11
    47bc:	9a 89       	ldd	r25, Y+18	; 0x12
    47be:	01 97       	sbiw	r24, 0x01	; 1
    47c0:	f1 f7       	brne	.-4      	; 0x47be <SERVO_Center+0xc0>
    47c2:	9a 8b       	std	Y+18, r25	; 0x12
    47c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47c6:	8b 89       	ldd	r24, Y+19	; 0x13
    47c8:	9c 89       	ldd	r25, Y+20	; 0x14
    47ca:	01 97       	sbiw	r24, 0x01	; 1
    47cc:	9c 8b       	std	Y+20, r25	; 0x14
    47ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47d0:	8b 89       	ldd	r24, Y+19	; 0x13
    47d2:	9c 89       	ldd	r25, Y+20	; 0x14
    47d4:	00 97       	sbiw	r24, 0x00	; 0
    47d6:	69 f7       	brne	.-38     	; 0x47b2 <SERVO_Center+0xb4>
    47d8:	14 c0       	rjmp	.+40     	; 0x4802 <SERVO_Center+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47da:	6d 89       	ldd	r22, Y+21	; 0x15
    47dc:	7e 89       	ldd	r23, Y+22	; 0x16
    47de:	8f 89       	ldd	r24, Y+23	; 0x17
    47e0:	98 8d       	ldd	r25, Y+24	; 0x18
    47e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47e6:	dc 01       	movw	r26, r24
    47e8:	cb 01       	movw	r24, r22
    47ea:	9c 8b       	std	Y+20, r25	; 0x14
    47ec:	8b 8b       	std	Y+19, r24	; 0x13
    47ee:	8b 89       	ldd	r24, Y+19	; 0x13
    47f0:	9c 89       	ldd	r25, Y+20	; 0x14
    47f2:	98 8b       	std	Y+16, r25	; 0x10
    47f4:	8f 87       	std	Y+15, r24	; 0x0f
    47f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    47f8:	98 89       	ldd	r25, Y+16	; 0x10
    47fa:	01 97       	sbiw	r24, 0x01	; 1
    47fc:	f1 f7       	brne	.-4      	; 0x47fa <SERVO_Center+0xfc>
    47fe:	98 8b       	std	Y+16, r25	; 0x10
    4800:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(SERVO_DELAY_MS_);                                // Wait for the servo to reach the position.
    TIMER_Timer1_Stop();                                       // Stop Timer1 after the movement.
    4802:	0e 94 3f 10 	call	0x207e	; 0x207e <TIMER_Timer1_Stop>
    TIMER_Timer1_OCA_DisableInterrupt();                       // Disable output compare match interrupt.
    4806:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <TIMER_Timer1_OCA_DisableInterrupt>
    TIMER_Timer1_IC_DisableInterrupt();                        // Disable input capture interrupt.
    480a:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <TIMER_Timer1_IC_DisableInterrupt>
    480e:	80 e0       	ldi	r24, 0x00	; 0
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	aa ef       	ldi	r26, 0xFA	; 250
    4814:	b3 e4       	ldi	r27, 0x43	; 67
    4816:	8b 87       	std	Y+11, r24	; 0x0b
    4818:	9c 87       	std	Y+12, r25	; 0x0c
    481a:	ad 87       	std	Y+13, r26	; 0x0d
    481c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    481e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4820:	7c 85       	ldd	r23, Y+12	; 0x0c
    4822:	8d 85       	ldd	r24, Y+13	; 0x0d
    4824:	9e 85       	ldd	r25, Y+14	; 0x0e
    4826:	20 e0       	ldi	r18, 0x00	; 0
    4828:	30 e0       	ldi	r19, 0x00	; 0
    482a:	4a e7       	ldi	r20, 0x7A	; 122
    482c:	55 e4       	ldi	r21, 0x45	; 69
    482e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4832:	dc 01       	movw	r26, r24
    4834:	cb 01       	movw	r24, r22
    4836:	8f 83       	std	Y+7, r24	; 0x07
    4838:	98 87       	std	Y+8, r25	; 0x08
    483a:	a9 87       	std	Y+9, r26	; 0x09
    483c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    483e:	6f 81       	ldd	r22, Y+7	; 0x07
    4840:	78 85       	ldd	r23, Y+8	; 0x08
    4842:	89 85       	ldd	r24, Y+9	; 0x09
    4844:	9a 85       	ldd	r25, Y+10	; 0x0a
    4846:	20 e0       	ldi	r18, 0x00	; 0
    4848:	30 e0       	ldi	r19, 0x00	; 0
    484a:	40 e8       	ldi	r20, 0x80	; 128
    484c:	5f e3       	ldi	r21, 0x3F	; 63
    484e:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    4852:	88 23       	and	r24, r24
    4854:	2c f4       	brge	.+10     	; 0x4860 <SERVO_Center+0x162>
		__ticks = 1;
    4856:	81 e0       	ldi	r24, 0x01	; 1
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	9e 83       	std	Y+6, r25	; 0x06
    485c:	8d 83       	std	Y+5, r24	; 0x05
    485e:	3f c0       	rjmp	.+126    	; 0x48de <SERVO_Center+0x1e0>
	else if (__tmp > 65535)
    4860:	6f 81       	ldd	r22, Y+7	; 0x07
    4862:	78 85       	ldd	r23, Y+8	; 0x08
    4864:	89 85       	ldd	r24, Y+9	; 0x09
    4866:	9a 85       	ldd	r25, Y+10	; 0x0a
    4868:	20 e0       	ldi	r18, 0x00	; 0
    486a:	3f ef       	ldi	r19, 0xFF	; 255
    486c:	4f e7       	ldi	r20, 0x7F	; 127
    486e:	57 e4       	ldi	r21, 0x47	; 71
    4870:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    4874:	18 16       	cp	r1, r24
    4876:	4c f5       	brge	.+82     	; 0x48ca <SERVO_Center+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4878:	6b 85       	ldd	r22, Y+11	; 0x0b
    487a:	7c 85       	ldd	r23, Y+12	; 0x0c
    487c:	8d 85       	ldd	r24, Y+13	; 0x0d
    487e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4880:	20 e0       	ldi	r18, 0x00	; 0
    4882:	30 e0       	ldi	r19, 0x00	; 0
    4884:	40 e2       	ldi	r20, 0x20	; 32
    4886:	51 e4       	ldi	r21, 0x41	; 65
    4888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    488c:	dc 01       	movw	r26, r24
    488e:	cb 01       	movw	r24, r22
    4890:	bc 01       	movw	r22, r24
    4892:	cd 01       	movw	r24, r26
    4894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4898:	dc 01       	movw	r26, r24
    489a:	cb 01       	movw	r24, r22
    489c:	9e 83       	std	Y+6, r25	; 0x06
    489e:	8d 83       	std	Y+5, r24	; 0x05
    48a0:	0f c0       	rjmp	.+30     	; 0x48c0 <SERVO_Center+0x1c2>
    48a2:	80 e9       	ldi	r24, 0x90	; 144
    48a4:	91 e0       	ldi	r25, 0x01	; 1
    48a6:	9c 83       	std	Y+4, r25	; 0x04
    48a8:	8b 83       	std	Y+3, r24	; 0x03
    48aa:	8b 81       	ldd	r24, Y+3	; 0x03
    48ac:	9c 81       	ldd	r25, Y+4	; 0x04
    48ae:	01 97       	sbiw	r24, 0x01	; 1
    48b0:	f1 f7       	brne	.-4      	; 0x48ae <SERVO_Center+0x1b0>
    48b2:	9c 83       	std	Y+4, r25	; 0x04
    48b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48b6:	8d 81       	ldd	r24, Y+5	; 0x05
    48b8:	9e 81       	ldd	r25, Y+6	; 0x06
    48ba:	01 97       	sbiw	r24, 0x01	; 1
    48bc:	9e 83       	std	Y+6, r25	; 0x06
    48be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48c0:	8d 81       	ldd	r24, Y+5	; 0x05
    48c2:	9e 81       	ldd	r25, Y+6	; 0x06
    48c4:	00 97       	sbiw	r24, 0x00	; 0
    48c6:	69 f7       	brne	.-38     	; 0x48a2 <SERVO_Center+0x1a4>
    48c8:	14 c0       	rjmp	.+40     	; 0x48f2 <SERVO_Center+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48ca:	6f 81       	ldd	r22, Y+7	; 0x07
    48cc:	78 85       	ldd	r23, Y+8	; 0x08
    48ce:	89 85       	ldd	r24, Y+9	; 0x09
    48d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    48d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48d6:	dc 01       	movw	r26, r24
    48d8:	cb 01       	movw	r24, r22
    48da:	9e 83       	std	Y+6, r25	; 0x06
    48dc:	8d 83       	std	Y+5, r24	; 0x05
    48de:	8d 81       	ldd	r24, Y+5	; 0x05
    48e0:	9e 81       	ldd	r25, Y+6	; 0x06
    48e2:	9a 83       	std	Y+2, r25	; 0x02
    48e4:	89 83       	std	Y+1, r24	; 0x01
    48e6:	89 81       	ldd	r24, Y+1	; 0x01
    48e8:	9a 81       	ldd	r25, Y+2	; 0x02
    48ea:	01 97       	sbiw	r24, 0x01	; 1
    48ec:	f1 f7       	brne	.-4      	; 0x48ea <SERVO_Center+0x1ec>
    48ee:	9a 83       	std	Y+2, r25	; 0x02
    48f0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(SERVO_WAIT_MS_);                                 // Wait before executing the next operation.
}
    48f2:	6c 96       	adiw	r28, 0x1c	; 28
    48f4:	0f b6       	in	r0, 0x3f	; 63
    48f6:	f8 94       	cli
    48f8:	de bf       	out	0x3e, r29	; 62
    48fa:	0f be       	out	0x3f, r0	; 63
    48fc:	cd bf       	out	0x3d, r28	; 61
    48fe:	cf 91       	pop	r28
    4900:	df 91       	pop	r29
    4902:	08 95       	ret

00004904 <SERVO_90_CCW>:

/* Move the servo to 90 degrees counterclockwise (CCW) */
void SERVO_90_CCW(void)
{
    4904:	df 93       	push	r29
    4906:	cf 93       	push	r28
    4908:	cd b7       	in	r28, 0x3d	; 61
    490a:	de b7       	in	r29, 0x3e	; 62
    490c:	6c 97       	sbiw	r28, 0x1c	; 28
    490e:	0f b6       	in	r0, 0x3f	; 63
    4910:	f8 94       	cli
    4912:	de bf       	out	0x3e, r29	; 62
    4914:	0f be       	out	0x3f, r0	; 63
    4916:	cd bf       	out	0x3d, r28	; 61
    SERVO_Init();  // Initialize the servo motor.
    4918:	0e 94 5d 23 	call	0x46ba	; 0x46ba <SERVO_Init>
    TIMER_Timer1_OCR1A_Set(SERVO_90_CCW_PULSE_PRESCALER_256);  // Set the pulse width for 90 degrees CCW.
    491c:	86 e9       	ldi	r24, 0x96	; 150
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <TIMER_Timer1_OCR1A_Set>
    4924:	80 e0       	ldi	r24, 0x00	; 0
    4926:	90 e8       	ldi	r25, 0x80	; 128
    4928:	a4 ed       	ldi	r26, 0xD4	; 212
    492a:	b4 e4       	ldi	r27, 0x44	; 68
    492c:	89 8f       	std	Y+25, r24	; 0x19
    492e:	9a 8f       	std	Y+26, r25	; 0x1a
    4930:	ab 8f       	std	Y+27, r26	; 0x1b
    4932:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4934:	69 8d       	ldd	r22, Y+25	; 0x19
    4936:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4938:	8b 8d       	ldd	r24, Y+27	; 0x1b
    493a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    493c:	20 e0       	ldi	r18, 0x00	; 0
    493e:	30 e0       	ldi	r19, 0x00	; 0
    4940:	4a e7       	ldi	r20, 0x7A	; 122
    4942:	55 e4       	ldi	r21, 0x45	; 69
    4944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4948:	dc 01       	movw	r26, r24
    494a:	cb 01       	movw	r24, r22
    494c:	8d 8b       	std	Y+21, r24	; 0x15
    494e:	9e 8b       	std	Y+22, r25	; 0x16
    4950:	af 8b       	std	Y+23, r26	; 0x17
    4952:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4954:	6d 89       	ldd	r22, Y+21	; 0x15
    4956:	7e 89       	ldd	r23, Y+22	; 0x16
    4958:	8f 89       	ldd	r24, Y+23	; 0x17
    495a:	98 8d       	ldd	r25, Y+24	; 0x18
    495c:	20 e0       	ldi	r18, 0x00	; 0
    495e:	30 e0       	ldi	r19, 0x00	; 0
    4960:	40 e8       	ldi	r20, 0x80	; 128
    4962:	5f e3       	ldi	r21, 0x3F	; 63
    4964:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    4968:	88 23       	and	r24, r24
    496a:	2c f4       	brge	.+10     	; 0x4976 <SERVO_90_CCW+0x72>
		__ticks = 1;
    496c:	81 e0       	ldi	r24, 0x01	; 1
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	9c 8b       	std	Y+20, r25	; 0x14
    4972:	8b 8b       	std	Y+19, r24	; 0x13
    4974:	3f c0       	rjmp	.+126    	; 0x49f4 <SERVO_90_CCW+0xf0>
	else if (__tmp > 65535)
    4976:	6d 89       	ldd	r22, Y+21	; 0x15
    4978:	7e 89       	ldd	r23, Y+22	; 0x16
    497a:	8f 89       	ldd	r24, Y+23	; 0x17
    497c:	98 8d       	ldd	r25, Y+24	; 0x18
    497e:	20 e0       	ldi	r18, 0x00	; 0
    4980:	3f ef       	ldi	r19, 0xFF	; 255
    4982:	4f e7       	ldi	r20, 0x7F	; 127
    4984:	57 e4       	ldi	r21, 0x47	; 71
    4986:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    498a:	18 16       	cp	r1, r24
    498c:	4c f5       	brge	.+82     	; 0x49e0 <SERVO_90_CCW+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    498e:	69 8d       	ldd	r22, Y+25	; 0x19
    4990:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4992:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4994:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4996:	20 e0       	ldi	r18, 0x00	; 0
    4998:	30 e0       	ldi	r19, 0x00	; 0
    499a:	40 e2       	ldi	r20, 0x20	; 32
    499c:	51 e4       	ldi	r21, 0x41	; 65
    499e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49a2:	dc 01       	movw	r26, r24
    49a4:	cb 01       	movw	r24, r22
    49a6:	bc 01       	movw	r22, r24
    49a8:	cd 01       	movw	r24, r26
    49aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ae:	dc 01       	movw	r26, r24
    49b0:	cb 01       	movw	r24, r22
    49b2:	9c 8b       	std	Y+20, r25	; 0x14
    49b4:	8b 8b       	std	Y+19, r24	; 0x13
    49b6:	0f c0       	rjmp	.+30     	; 0x49d6 <SERVO_90_CCW+0xd2>
    49b8:	80 e9       	ldi	r24, 0x90	; 144
    49ba:	91 e0       	ldi	r25, 0x01	; 1
    49bc:	9a 8b       	std	Y+18, r25	; 0x12
    49be:	89 8b       	std	Y+17, r24	; 0x11
    49c0:	89 89       	ldd	r24, Y+17	; 0x11
    49c2:	9a 89       	ldd	r25, Y+18	; 0x12
    49c4:	01 97       	sbiw	r24, 0x01	; 1
    49c6:	f1 f7       	brne	.-4      	; 0x49c4 <SERVO_90_CCW+0xc0>
    49c8:	9a 8b       	std	Y+18, r25	; 0x12
    49ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49cc:	8b 89       	ldd	r24, Y+19	; 0x13
    49ce:	9c 89       	ldd	r25, Y+20	; 0x14
    49d0:	01 97       	sbiw	r24, 0x01	; 1
    49d2:	9c 8b       	std	Y+20, r25	; 0x14
    49d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49d6:	8b 89       	ldd	r24, Y+19	; 0x13
    49d8:	9c 89       	ldd	r25, Y+20	; 0x14
    49da:	00 97       	sbiw	r24, 0x00	; 0
    49dc:	69 f7       	brne	.-38     	; 0x49b8 <SERVO_90_CCW+0xb4>
    49de:	14 c0       	rjmp	.+40     	; 0x4a08 <SERVO_90_CCW+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49e0:	6d 89       	ldd	r22, Y+21	; 0x15
    49e2:	7e 89       	ldd	r23, Y+22	; 0x16
    49e4:	8f 89       	ldd	r24, Y+23	; 0x17
    49e6:	98 8d       	ldd	r25, Y+24	; 0x18
    49e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ec:	dc 01       	movw	r26, r24
    49ee:	cb 01       	movw	r24, r22
    49f0:	9c 8b       	std	Y+20, r25	; 0x14
    49f2:	8b 8b       	std	Y+19, r24	; 0x13
    49f4:	8b 89       	ldd	r24, Y+19	; 0x13
    49f6:	9c 89       	ldd	r25, Y+20	; 0x14
    49f8:	98 8b       	std	Y+16, r25	; 0x10
    49fa:	8f 87       	std	Y+15, r24	; 0x0f
    49fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    49fe:	98 89       	ldd	r25, Y+16	; 0x10
    4a00:	01 97       	sbiw	r24, 0x01	; 1
    4a02:	f1 f7       	brne	.-4      	; 0x4a00 <SERVO_90_CCW+0xfc>
    4a04:	98 8b       	std	Y+16, r25	; 0x10
    4a06:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(SERVO_DELAY_MS_);                                // Wait for the servo to reach the position.
    TIMER_Timer1_Stop();                                       // Stop Timer1 after the movement.
    4a08:	0e 94 3f 10 	call	0x207e	; 0x207e <TIMER_Timer1_Stop>
    TIMER_Timer1_OCA_DisableInterrupt();                       // Disable output compare match interrupt.
    4a0c:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <TIMER_Timer1_OCA_DisableInterrupt>
    TIMER_Timer1_IC_DisableInterrupt();                        // Disable input capture interrupt.
    4a10:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <TIMER_Timer1_IC_DisableInterrupt>
    4a14:	80 e0       	ldi	r24, 0x00	; 0
    4a16:	90 e0       	ldi	r25, 0x00	; 0
    4a18:	aa ef       	ldi	r26, 0xFA	; 250
    4a1a:	b3 e4       	ldi	r27, 0x43	; 67
    4a1c:	8b 87       	std	Y+11, r24	; 0x0b
    4a1e:	9c 87       	std	Y+12, r25	; 0x0c
    4a20:	ad 87       	std	Y+13, r26	; 0x0d
    4a22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a24:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a26:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a28:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a2c:	20 e0       	ldi	r18, 0x00	; 0
    4a2e:	30 e0       	ldi	r19, 0x00	; 0
    4a30:	4a e7       	ldi	r20, 0x7A	; 122
    4a32:	55 e4       	ldi	r21, 0x45	; 69
    4a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a38:	dc 01       	movw	r26, r24
    4a3a:	cb 01       	movw	r24, r22
    4a3c:	8f 83       	std	Y+7, r24	; 0x07
    4a3e:	98 87       	std	Y+8, r25	; 0x08
    4a40:	a9 87       	std	Y+9, r26	; 0x09
    4a42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a44:	6f 81       	ldd	r22, Y+7	; 0x07
    4a46:	78 85       	ldd	r23, Y+8	; 0x08
    4a48:	89 85       	ldd	r24, Y+9	; 0x09
    4a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a4c:	20 e0       	ldi	r18, 0x00	; 0
    4a4e:	30 e0       	ldi	r19, 0x00	; 0
    4a50:	40 e8       	ldi	r20, 0x80	; 128
    4a52:	5f e3       	ldi	r21, 0x3F	; 63
    4a54:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    4a58:	88 23       	and	r24, r24
    4a5a:	2c f4       	brge	.+10     	; 0x4a66 <SERVO_90_CCW+0x162>
		__ticks = 1;
    4a5c:	81 e0       	ldi	r24, 0x01	; 1
    4a5e:	90 e0       	ldi	r25, 0x00	; 0
    4a60:	9e 83       	std	Y+6, r25	; 0x06
    4a62:	8d 83       	std	Y+5, r24	; 0x05
    4a64:	3f c0       	rjmp	.+126    	; 0x4ae4 <SERVO_90_CCW+0x1e0>
	else if (__tmp > 65535)
    4a66:	6f 81       	ldd	r22, Y+7	; 0x07
    4a68:	78 85       	ldd	r23, Y+8	; 0x08
    4a6a:	89 85       	ldd	r24, Y+9	; 0x09
    4a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a6e:	20 e0       	ldi	r18, 0x00	; 0
    4a70:	3f ef       	ldi	r19, 0xFF	; 255
    4a72:	4f e7       	ldi	r20, 0x7F	; 127
    4a74:	57 e4       	ldi	r21, 0x47	; 71
    4a76:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    4a7a:	18 16       	cp	r1, r24
    4a7c:	4c f5       	brge	.+82     	; 0x4ad0 <SERVO_90_CCW+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a80:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a82:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a84:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a86:	20 e0       	ldi	r18, 0x00	; 0
    4a88:	30 e0       	ldi	r19, 0x00	; 0
    4a8a:	40 e2       	ldi	r20, 0x20	; 32
    4a8c:	51 e4       	ldi	r21, 0x41	; 65
    4a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a92:	dc 01       	movw	r26, r24
    4a94:	cb 01       	movw	r24, r22
    4a96:	bc 01       	movw	r22, r24
    4a98:	cd 01       	movw	r24, r26
    4a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a9e:	dc 01       	movw	r26, r24
    4aa0:	cb 01       	movw	r24, r22
    4aa2:	9e 83       	std	Y+6, r25	; 0x06
    4aa4:	8d 83       	std	Y+5, r24	; 0x05
    4aa6:	0f c0       	rjmp	.+30     	; 0x4ac6 <SERVO_90_CCW+0x1c2>
    4aa8:	80 e9       	ldi	r24, 0x90	; 144
    4aaa:	91 e0       	ldi	r25, 0x01	; 1
    4aac:	9c 83       	std	Y+4, r25	; 0x04
    4aae:	8b 83       	std	Y+3, r24	; 0x03
    4ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ab4:	01 97       	sbiw	r24, 0x01	; 1
    4ab6:	f1 f7       	brne	.-4      	; 0x4ab4 <SERVO_90_CCW+0x1b0>
    4ab8:	9c 83       	std	Y+4, r25	; 0x04
    4aba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4abc:	8d 81       	ldd	r24, Y+5	; 0x05
    4abe:	9e 81       	ldd	r25, Y+6	; 0x06
    4ac0:	01 97       	sbiw	r24, 0x01	; 1
    4ac2:	9e 83       	std	Y+6, r25	; 0x06
    4ac4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    4aca:	00 97       	sbiw	r24, 0x00	; 0
    4acc:	69 f7       	brne	.-38     	; 0x4aa8 <SERVO_90_CCW+0x1a4>
    4ace:	14 c0       	rjmp	.+40     	; 0x4af8 <SERVO_90_CCW+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    4ad2:	78 85       	ldd	r23, Y+8	; 0x08
    4ad4:	89 85       	ldd	r24, Y+9	; 0x09
    4ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4adc:	dc 01       	movw	r26, r24
    4ade:	cb 01       	movw	r24, r22
    4ae0:	9e 83       	std	Y+6, r25	; 0x06
    4ae2:	8d 83       	std	Y+5, r24	; 0x05
    4ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae8:	9a 83       	std	Y+2, r25	; 0x02
    4aea:	89 83       	std	Y+1, r24	; 0x01
    4aec:	89 81       	ldd	r24, Y+1	; 0x01
    4aee:	9a 81       	ldd	r25, Y+2	; 0x02
    4af0:	01 97       	sbiw	r24, 0x01	; 1
    4af2:	f1 f7       	brne	.-4      	; 0x4af0 <SERVO_90_CCW+0x1ec>
    4af4:	9a 83       	std	Y+2, r25	; 0x02
    4af6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(SERVO_WAIT_MS_);                                 // Wait before executing the next operation.
}
    4af8:	6c 96       	adiw	r28, 0x1c	; 28
    4afa:	0f b6       	in	r0, 0x3f	; 63
    4afc:	f8 94       	cli
    4afe:	de bf       	out	0x3e, r29	; 62
    4b00:	0f be       	out	0x3f, r0	; 63
    4b02:	cd bf       	out	0x3d, r28	; 61
    4b04:	cf 91       	pop	r28
    4b06:	df 91       	pop	r29
    4b08:	08 95       	ret

00004b0a <SERVO_90_CW>:

/* Move the servo to 90 degrees clockwise (CW)*/
void SERVO_90_CW(void)
{
    4b0a:	df 93       	push	r29
    4b0c:	cf 93       	push	r28
    4b0e:	cd b7       	in	r28, 0x3d	; 61
    4b10:	de b7       	in	r29, 0x3e	; 62
    4b12:	6c 97       	sbiw	r28, 0x1c	; 28
    4b14:	0f b6       	in	r0, 0x3f	; 63
    4b16:	f8 94       	cli
    4b18:	de bf       	out	0x3e, r29	; 62
    4b1a:	0f be       	out	0x3f, r0	; 63
    4b1c:	cd bf       	out	0x3d, r28	; 61
    SERVO_Init();  // Initialize the servo motor.
    4b1e:	0e 94 5d 23 	call	0x46ba	; 0x46ba <SERVO_Init>
    TIMER_Timer1_OCR1A_Set(SERVO_90_CW_PULSE_PRESCALER_256);  // Set the pulse width for 90 degrees CW.
    4b22:	8e e1       	ldi	r24, 0x1E	; 30
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <TIMER_Timer1_OCR1A_Set>
    4b2a:	80 e0       	ldi	r24, 0x00	; 0
    4b2c:	90 e8       	ldi	r25, 0x80	; 128
    4b2e:	a4 ed       	ldi	r26, 0xD4	; 212
    4b30:	b4 e4       	ldi	r27, 0x44	; 68
    4b32:	89 8f       	std	Y+25, r24	; 0x19
    4b34:	9a 8f       	std	Y+26, r25	; 0x1a
    4b36:	ab 8f       	std	Y+27, r26	; 0x1b
    4b38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b3a:	69 8d       	ldd	r22, Y+25	; 0x19
    4b3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b42:	20 e0       	ldi	r18, 0x00	; 0
    4b44:	30 e0       	ldi	r19, 0x00	; 0
    4b46:	4a e7       	ldi	r20, 0x7A	; 122
    4b48:	55 e4       	ldi	r21, 0x45	; 69
    4b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b4e:	dc 01       	movw	r26, r24
    4b50:	cb 01       	movw	r24, r22
    4b52:	8d 8b       	std	Y+21, r24	; 0x15
    4b54:	9e 8b       	std	Y+22, r25	; 0x16
    4b56:	af 8b       	std	Y+23, r26	; 0x17
    4b58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b5a:	6d 89       	ldd	r22, Y+21	; 0x15
    4b5c:	7e 89       	ldd	r23, Y+22	; 0x16
    4b5e:	8f 89       	ldd	r24, Y+23	; 0x17
    4b60:	98 8d       	ldd	r25, Y+24	; 0x18
    4b62:	20 e0       	ldi	r18, 0x00	; 0
    4b64:	30 e0       	ldi	r19, 0x00	; 0
    4b66:	40 e8       	ldi	r20, 0x80	; 128
    4b68:	5f e3       	ldi	r21, 0x3F	; 63
    4b6a:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    4b6e:	88 23       	and	r24, r24
    4b70:	2c f4       	brge	.+10     	; 0x4b7c <SERVO_90_CW+0x72>
		__ticks = 1;
    4b72:	81 e0       	ldi	r24, 0x01	; 1
    4b74:	90 e0       	ldi	r25, 0x00	; 0
    4b76:	9c 8b       	std	Y+20, r25	; 0x14
    4b78:	8b 8b       	std	Y+19, r24	; 0x13
    4b7a:	3f c0       	rjmp	.+126    	; 0x4bfa <SERVO_90_CW+0xf0>
	else if (__tmp > 65535)
    4b7c:	6d 89       	ldd	r22, Y+21	; 0x15
    4b7e:	7e 89       	ldd	r23, Y+22	; 0x16
    4b80:	8f 89       	ldd	r24, Y+23	; 0x17
    4b82:	98 8d       	ldd	r25, Y+24	; 0x18
    4b84:	20 e0       	ldi	r18, 0x00	; 0
    4b86:	3f ef       	ldi	r19, 0xFF	; 255
    4b88:	4f e7       	ldi	r20, 0x7F	; 127
    4b8a:	57 e4       	ldi	r21, 0x47	; 71
    4b8c:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    4b90:	18 16       	cp	r1, r24
    4b92:	4c f5       	brge	.+82     	; 0x4be6 <SERVO_90_CW+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b94:	69 8d       	ldd	r22, Y+25	; 0x19
    4b96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b9c:	20 e0       	ldi	r18, 0x00	; 0
    4b9e:	30 e0       	ldi	r19, 0x00	; 0
    4ba0:	40 e2       	ldi	r20, 0x20	; 32
    4ba2:	51 e4       	ldi	r21, 0x41	; 65
    4ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba8:	dc 01       	movw	r26, r24
    4baa:	cb 01       	movw	r24, r22
    4bac:	bc 01       	movw	r22, r24
    4bae:	cd 01       	movw	r24, r26
    4bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb4:	dc 01       	movw	r26, r24
    4bb6:	cb 01       	movw	r24, r22
    4bb8:	9c 8b       	std	Y+20, r25	; 0x14
    4bba:	8b 8b       	std	Y+19, r24	; 0x13
    4bbc:	0f c0       	rjmp	.+30     	; 0x4bdc <SERVO_90_CW+0xd2>
    4bbe:	80 e9       	ldi	r24, 0x90	; 144
    4bc0:	91 e0       	ldi	r25, 0x01	; 1
    4bc2:	9a 8b       	std	Y+18, r25	; 0x12
    4bc4:	89 8b       	std	Y+17, r24	; 0x11
    4bc6:	89 89       	ldd	r24, Y+17	; 0x11
    4bc8:	9a 89       	ldd	r25, Y+18	; 0x12
    4bca:	01 97       	sbiw	r24, 0x01	; 1
    4bcc:	f1 f7       	brne	.-4      	; 0x4bca <SERVO_90_CW+0xc0>
    4bce:	9a 8b       	std	Y+18, r25	; 0x12
    4bd0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bd2:	8b 89       	ldd	r24, Y+19	; 0x13
    4bd4:	9c 89       	ldd	r25, Y+20	; 0x14
    4bd6:	01 97       	sbiw	r24, 0x01	; 1
    4bd8:	9c 8b       	std	Y+20, r25	; 0x14
    4bda:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bdc:	8b 89       	ldd	r24, Y+19	; 0x13
    4bde:	9c 89       	ldd	r25, Y+20	; 0x14
    4be0:	00 97       	sbiw	r24, 0x00	; 0
    4be2:	69 f7       	brne	.-38     	; 0x4bbe <SERVO_90_CW+0xb4>
    4be4:	14 c0       	rjmp	.+40     	; 0x4c0e <SERVO_90_CW+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4be6:	6d 89       	ldd	r22, Y+21	; 0x15
    4be8:	7e 89       	ldd	r23, Y+22	; 0x16
    4bea:	8f 89       	ldd	r24, Y+23	; 0x17
    4bec:	98 8d       	ldd	r25, Y+24	; 0x18
    4bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bf2:	dc 01       	movw	r26, r24
    4bf4:	cb 01       	movw	r24, r22
    4bf6:	9c 8b       	std	Y+20, r25	; 0x14
    4bf8:	8b 8b       	std	Y+19, r24	; 0x13
    4bfa:	8b 89       	ldd	r24, Y+19	; 0x13
    4bfc:	9c 89       	ldd	r25, Y+20	; 0x14
    4bfe:	98 8b       	std	Y+16, r25	; 0x10
    4c00:	8f 87       	std	Y+15, r24	; 0x0f
    4c02:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c04:	98 89       	ldd	r25, Y+16	; 0x10
    4c06:	01 97       	sbiw	r24, 0x01	; 1
    4c08:	f1 f7       	brne	.-4      	; 0x4c06 <SERVO_90_CW+0xfc>
    4c0a:	98 8b       	std	Y+16, r25	; 0x10
    4c0c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(SERVO_DELAY_MS_);                               // Wait for the servo to reach the position.
    TIMER_Timer1_Stop();                                      // Stop Timer1 after the movement.
    4c0e:	0e 94 3f 10 	call	0x207e	; 0x207e <TIMER_Timer1_Stop>
    TIMER_Timer1_OCA_DisableInterrupt();                      // Disable output compare match interrupt.
    4c12:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <TIMER_Timer1_OCA_DisableInterrupt>
    TIMER_Timer1_IC_DisableInterrupt();                       // Disable input capture interrupt.
    4c16:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <TIMER_Timer1_IC_DisableInterrupt>
    4c1a:	80 e0       	ldi	r24, 0x00	; 0
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	aa ef       	ldi	r26, 0xFA	; 250
    4c20:	b3 e4       	ldi	r27, 0x43	; 67
    4c22:	8b 87       	std	Y+11, r24	; 0x0b
    4c24:	9c 87       	std	Y+12, r25	; 0x0c
    4c26:	ad 87       	std	Y+13, r26	; 0x0d
    4c28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c32:	20 e0       	ldi	r18, 0x00	; 0
    4c34:	30 e0       	ldi	r19, 0x00	; 0
    4c36:	4a e7       	ldi	r20, 0x7A	; 122
    4c38:	55 e4       	ldi	r21, 0x45	; 69
    4c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c3e:	dc 01       	movw	r26, r24
    4c40:	cb 01       	movw	r24, r22
    4c42:	8f 83       	std	Y+7, r24	; 0x07
    4c44:	98 87       	std	Y+8, r25	; 0x08
    4c46:	a9 87       	std	Y+9, r26	; 0x09
    4c48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    4c4c:	78 85       	ldd	r23, Y+8	; 0x08
    4c4e:	89 85       	ldd	r24, Y+9	; 0x09
    4c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c52:	20 e0       	ldi	r18, 0x00	; 0
    4c54:	30 e0       	ldi	r19, 0x00	; 0
    4c56:	40 e8       	ldi	r20, 0x80	; 128
    4c58:	5f e3       	ldi	r21, 0x3F	; 63
    4c5a:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    4c5e:	88 23       	and	r24, r24
    4c60:	2c f4       	brge	.+10     	; 0x4c6c <SERVO_90_CW+0x162>
		__ticks = 1;
    4c62:	81 e0       	ldi	r24, 0x01	; 1
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	9e 83       	std	Y+6, r25	; 0x06
    4c68:	8d 83       	std	Y+5, r24	; 0x05
    4c6a:	3f c0       	rjmp	.+126    	; 0x4cea <SERVO_90_CW+0x1e0>
	else if (__tmp > 65535)
    4c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    4c6e:	78 85       	ldd	r23, Y+8	; 0x08
    4c70:	89 85       	ldd	r24, Y+9	; 0x09
    4c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c74:	20 e0       	ldi	r18, 0x00	; 0
    4c76:	3f ef       	ldi	r19, 0xFF	; 255
    4c78:	4f e7       	ldi	r20, 0x7F	; 127
    4c7a:	57 e4       	ldi	r21, 0x47	; 71
    4c7c:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    4c80:	18 16       	cp	r1, r24
    4c82:	4c f5       	brge	.+82     	; 0x4cd6 <SERVO_90_CW+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c8c:	20 e0       	ldi	r18, 0x00	; 0
    4c8e:	30 e0       	ldi	r19, 0x00	; 0
    4c90:	40 e2       	ldi	r20, 0x20	; 32
    4c92:	51 e4       	ldi	r21, 0x41	; 65
    4c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c98:	dc 01       	movw	r26, r24
    4c9a:	cb 01       	movw	r24, r22
    4c9c:	bc 01       	movw	r22, r24
    4c9e:	cd 01       	movw	r24, r26
    4ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca4:	dc 01       	movw	r26, r24
    4ca6:	cb 01       	movw	r24, r22
    4ca8:	9e 83       	std	Y+6, r25	; 0x06
    4caa:	8d 83       	std	Y+5, r24	; 0x05
    4cac:	0f c0       	rjmp	.+30     	; 0x4ccc <SERVO_90_CW+0x1c2>
    4cae:	80 e9       	ldi	r24, 0x90	; 144
    4cb0:	91 e0       	ldi	r25, 0x01	; 1
    4cb2:	9c 83       	std	Y+4, r25	; 0x04
    4cb4:	8b 83       	std	Y+3, r24	; 0x03
    4cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    4cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    4cba:	01 97       	sbiw	r24, 0x01	; 1
    4cbc:	f1 f7       	brne	.-4      	; 0x4cba <SERVO_90_CW+0x1b0>
    4cbe:	9c 83       	std	Y+4, r25	; 0x04
    4cc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    4cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    4cc6:	01 97       	sbiw	r24, 0x01	; 1
    4cc8:	9e 83       	std	Y+6, r25	; 0x06
    4cca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    4cce:	9e 81       	ldd	r25, Y+6	; 0x06
    4cd0:	00 97       	sbiw	r24, 0x00	; 0
    4cd2:	69 f7       	brne	.-38     	; 0x4cae <SERVO_90_CW+0x1a4>
    4cd4:	14 c0       	rjmp	.+40     	; 0x4cfe <SERVO_90_CW+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    4cd8:	78 85       	ldd	r23, Y+8	; 0x08
    4cda:	89 85       	ldd	r24, Y+9	; 0x09
    4cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ce2:	dc 01       	movw	r26, r24
    4ce4:	cb 01       	movw	r24, r22
    4ce6:	9e 83       	std	Y+6, r25	; 0x06
    4ce8:	8d 83       	std	Y+5, r24	; 0x05
    4cea:	8d 81       	ldd	r24, Y+5	; 0x05
    4cec:	9e 81       	ldd	r25, Y+6	; 0x06
    4cee:	9a 83       	std	Y+2, r25	; 0x02
    4cf0:	89 83       	std	Y+1, r24	; 0x01
    4cf2:	89 81       	ldd	r24, Y+1	; 0x01
    4cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    4cf6:	01 97       	sbiw	r24, 0x01	; 1
    4cf8:	f1 f7       	brne	.-4      	; 0x4cf6 <SERVO_90_CW+0x1ec>
    4cfa:	9a 83       	std	Y+2, r25	; 0x02
    4cfc:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(SERVO_WAIT_MS_);                                // Wait before executing the next operation.
}
    4cfe:	6c 96       	adiw	r28, 0x1c	; 28
    4d00:	0f b6       	in	r0, 0x3f	; 63
    4d02:	f8 94       	cli
    4d04:	de bf       	out	0x3e, r29	; 62
    4d06:	0f be       	out	0x3f, r0	; 63
    4d08:	cd bf       	out	0x3d, r28	; 61
    4d0a:	cf 91       	pop	r28
    4d0c:	df 91       	pop	r29
    4d0e:	08 95       	ret

00004d10 <SERVO_High>:

/* Set the servo pin to high (5V) to generate the rising edge of the pulse */
void SERVO_High(void)
{
    4d10:	df 93       	push	r29
    4d12:	cf 93       	push	r28
    4d14:	cd b7       	in	r28, 0x3d	; 61
    4d16:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinValue(SERVO_PORT, SERVO_PIN, PIN_HIGH);  // Set the servo pin to high.
    4d18:	83 e0       	ldi	r24, 0x03	; 3
    4d1a:	67 e0       	ldi	r22, 0x07	; 7
    4d1c:	41 e0       	ldi	r20, 0x01	; 1
    4d1e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
}
    4d22:	cf 91       	pop	r28
    4d24:	df 91       	pop	r29
    4d26:	08 95       	ret

00004d28 <SERVO_Low>:

/* Set the servo pin to low (0V) to generate the falling edge of the pulse */
void SERVO_Low(void)
{
    4d28:	df 93       	push	r29
    4d2a:	cf 93       	push	r28
    4d2c:	cd b7       	in	r28, 0x3d	; 61
    4d2e:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinValue(SERVO_PORT, SERVO_PIN, PIN_LOW);   // Set the servo pin to low.
    4d30:	83 e0       	ldi	r24, 0x03	; 3
    4d32:	67 e0       	ldi	r22, 0x07	; 7
    4d34:	40 e0       	ldi	r20, 0x00	; 0
    4d36:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
}
    4d3a:	cf 91       	pop	r28
    4d3c:	df 91       	pop	r29
    4d3e:	08 95       	ret

00004d40 <NRF24L01_WriteRegister>:
// CE Pin Configuration
u8_t nRF24L01_CE_port;
u8_t nRF24L01_CE_pin;

// Write to nRF24L01 Register
void NRF24L01_WriteRegister(u8_t reg, u8_t value) {
    4d40:	df 93       	push	r29
    4d42:	cf 93       	push	r28
    4d44:	00 d0       	rcall	.+0      	; 0x4d46 <NRF24L01_WriteRegister+0x6>
    4d46:	cd b7       	in	r28, 0x3d	; 61
    4d48:	de b7       	in	r29, 0x3e	; 62
    4d4a:	89 83       	std	Y+1, r24	; 0x01
    4d4c:	6a 83       	std	Y+2, r22	; 0x02
    DIO_SetPinValue(SS_PORT, SS, PIN_LOW);  // Pull CSN low
    4d4e:	81 e0       	ldi	r24, 0x01	; 1
    4d50:	64 e0       	ldi	r22, 0x04	; 4
    4d52:	40 e0       	ldi	r20, 0x00	; 0
    4d54:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
    SPI_Transmit(W_REGISTER | (reg & 0b00011111)); // Write command
    4d58:	89 81       	ldd	r24, Y+1	; 0x01
    4d5a:	8f 71       	andi	r24, 0x1F	; 31
    4d5c:	80 62       	ori	r24, 0x20	; 32
    4d5e:	0e 94 7d 14 	call	0x28fa	; 0x28fa <SPI_Transmit>
    SPI_Transmit(value);                           // Write data
    4d62:	8a 81       	ldd	r24, Y+2	; 0x02
    4d64:	0e 94 7d 14 	call	0x28fa	; 0x28fa <SPI_Transmit>
    DIO_SetPinValue(SS_PORT, SS, PIN_HIGH); // Pull CSN high
    4d68:	81 e0       	ldi	r24, 0x01	; 1
    4d6a:	64 e0       	ldi	r22, 0x04	; 4
    4d6c:	41 e0       	ldi	r20, 0x01	; 1
    4d6e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
}
    4d72:	0f 90       	pop	r0
    4d74:	0f 90       	pop	r0
    4d76:	cf 91       	pop	r28
    4d78:	df 91       	pop	r29
    4d7a:	08 95       	ret

00004d7c <NRF24L01_ReadRegister>:

// Read from nRF24L01 Register
u8_t NRF24L01_ReadRegister(u8_t reg) {
    4d7c:	df 93       	push	r29
    4d7e:	cf 93       	push	r28
    4d80:	00 d0       	rcall	.+0      	; 0x4d82 <NRF24L01_ReadRegister+0x6>
    4d82:	cd b7       	in	r28, 0x3d	; 61
    4d84:	de b7       	in	r29, 0x3e	; 62
    4d86:	8a 83       	std	Y+2, r24	; 0x02
    DIO_SetPinValue(SS_PORT, SS, PIN_LOW);  // Pull CSN low
    4d88:	81 e0       	ldi	r24, 0x01	; 1
    4d8a:	64 e0       	ldi	r22, 0x04	; 4
    4d8c:	40 e0       	ldi	r20, 0x00	; 0
    4d8e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
    SPI_Transmit(R_REGISTER | (reg & 0b00011111)); // Read command
    4d92:	8a 81       	ldd	r24, Y+2	; 0x02
    4d94:	8f 71       	andi	r24, 0x1F	; 31
    4d96:	0e 94 7d 14 	call	0x28fa	; 0x28fa <SPI_Transmit>
    u8_t value = SPI_Receive();                   // Read data
    4d9a:	0e 94 a2 14 	call	0x2944	; 0x2944 <SPI_Receive>
    4d9e:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinValue(SS_PORT, SS, PIN_HIGH); // Pull CSN high
    4da0:	81 e0       	ldi	r24, 0x01	; 1
    4da2:	64 e0       	ldi	r22, 0x04	; 4
    4da4:	41 e0       	ldi	r20, 0x01	; 1
    4da6:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
    return value;
    4daa:	89 81       	ldd	r24, Y+1	; 0x01
}
    4dac:	0f 90       	pop	r0
    4dae:	0f 90       	pop	r0
    4db0:	cf 91       	pop	r28
    4db2:	df 91       	pop	r29
    4db4:	08 95       	ret

00004db6 <NRF24L01_CE>:

// Set CE Pin State
void NRF24L01_CE(u8_t state) {
    4db6:	df 93       	push	r29
    4db8:	cf 93       	push	r28
    4dba:	0f 92       	push	r0
    4dbc:	cd b7       	in	r28, 0x3d	; 61
    4dbe:	de b7       	in	r29, 0x3e	; 62
    4dc0:	89 83       	std	Y+1, r24	; 0x01
    if (state) {
    4dc2:	89 81       	ldd	r24, Y+1	; 0x01
    4dc4:	88 23       	and	r24, r24
    4dc6:	49 f0       	breq	.+18     	; 0x4dda <NRF24L01_CE+0x24>
        DIO_SetPinValue(nRF24L01_CE_port, nRF24L01_CE_pin, PIN_HIGH); // Enable CE pin
    4dc8:	80 91 ab 05 	lds	r24, 0x05AB
    4dcc:	90 91 ac 05 	lds	r25, 0x05AC
    4dd0:	69 2f       	mov	r22, r25
    4dd2:	41 e0       	ldi	r20, 0x01	; 1
    4dd4:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
    4dd8:	08 c0       	rjmp	.+16     	; 0x4dea <NRF24L01_CE+0x34>
    } else {
        DIO_SetPinValue(nRF24L01_CE_port, nRF24L01_CE_pin, PIN_LOW);  // Disable CE pin
    4dda:	80 91 ab 05 	lds	r24, 0x05AB
    4dde:	90 91 ac 05 	lds	r25, 0x05AC
    4de2:	69 2f       	mov	r22, r25
    4de4:	40 e0       	ldi	r20, 0x00	; 0
    4de6:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
    }
}
    4dea:	0f 90       	pop	r0
    4dec:	cf 91       	pop	r28
    4dee:	df 91       	pop	r29
    4df0:	08 95       	ret

00004df2 <NRF24L01_Init_Transmit>:

// Initialize nRF24L01 for Transmit Mode
void NRF24L01_Init_Transmit(void) {
    4df2:	df 93       	push	r29
    4df4:	cf 93       	push	r28
    4df6:	cd b7       	in	r28, 0x3d	; 61
    4df8:	de b7       	in	r29, 0x3e	; 62
    NRF24L01_CE(0);  // Disable CE temporarily
    4dfa:	80 e0       	ldi	r24, 0x00	; 0
    4dfc:	0e 94 db 26 	call	0x4db6	; 0x4db6 <NRF24L01_CE>
    NRF24L01_WriteRegister(CONFIG_REG, CONFIG_TX_MODE);  // TX mode configuration
    4e00:	80 e0       	ldi	r24, 0x00	; 0
    4e02:	6e e0       	ldi	r22, 0x0E	; 14
    4e04:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <NRF24L01_WriteRegister>
    NRF24L01_WriteRegister(RF_SETUP_REG, 0x07);          // 1Mbps, 0dBm power
    4e08:	86 e0       	ldi	r24, 0x06	; 6
    4e0a:	67 e0       	ldi	r22, 0x07	; 7
    4e0c:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <NRF24L01_WriteRegister>
    NRF24L01_WriteRegister(STATUS_REG, 0x70);            // Clear interrupts
    4e10:	87 e0       	ldi	r24, 0x07	; 7
    4e12:	60 e7       	ldi	r22, 0x70	; 112
    4e14:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <NRF24L01_WriteRegister>
    NRF24L01_CE(1);  // Enable CE to activate TX mode
    4e18:	81 e0       	ldi	r24, 0x01	; 1
    4e1a:	0e 94 db 26 	call	0x4db6	; 0x4db6 <NRF24L01_CE>
}
    4e1e:	cf 91       	pop	r28
    4e20:	df 91       	pop	r29
    4e22:	08 95       	ret

00004e24 <NRF24L01_Init_Receive>:

// Initialize nRF24L01 for Receive Mode
void NRF24L01_Init_Receive(void) {
    4e24:	df 93       	push	r29
    4e26:	cf 93       	push	r28
    4e28:	cd b7       	in	r28, 0x3d	; 61
    4e2a:	de b7       	in	r29, 0x3e	; 62
    NRF24L01_CE(0);  // Disable CE temporarily
    4e2c:	80 e0       	ldi	r24, 0x00	; 0
    4e2e:	0e 94 db 26 	call	0x4db6	; 0x4db6 <NRF24L01_CE>
    NRF24L01_WriteRegister(CONFIG_REG, CONFIG_RX_MODE);  // RX mode configuration
    4e32:	80 e0       	ldi	r24, 0x00	; 0
    4e34:	6f e0       	ldi	r22, 0x0F	; 15
    4e36:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <NRF24L01_WriteRegister>
    NRF24L01_WriteRegister(RF_SETUP_REG, 0x07);          // 1Mbps, 0dBm power
    4e3a:	86 e0       	ldi	r24, 0x06	; 6
    4e3c:	67 e0       	ldi	r22, 0x07	; 7
    4e3e:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <NRF24L01_WriteRegister>
    NRF24L01_WriteRegister(STATUS_REG, 0x70);            // Clear interrupts
    4e42:	87 e0       	ldi	r24, 0x07	; 7
    4e44:	60 e7       	ldi	r22, 0x70	; 112
    4e46:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <NRF24L01_WriteRegister>
    NRF24L01_CE(1);  // Enable CE to activate RX mode
    4e4a:	81 e0       	ldi	r24, 0x01	; 1
    4e4c:	0e 94 db 26 	call	0x4db6	; 0x4db6 <NRF24L01_CE>
    LCD_Clear();
    4e50:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <LCD_Clear>
}
    4e54:	cf 91       	pop	r28
    4e56:	df 91       	pop	r29
    4e58:	08 95       	ret

00004e5a <NRF24L01_CE_SelectPin>:

// Select CE Pin
void NRF24L01_CE_SelectPin(u8_t port, u8_t pin) {
    4e5a:	df 93       	push	r29
    4e5c:	cf 93       	push	r28
    4e5e:	00 d0       	rcall	.+0      	; 0x4e60 <NRF24L01_CE_SelectPin+0x6>
    4e60:	cd b7       	in	r28, 0x3d	; 61
    4e62:	de b7       	in	r29, 0x3e	; 62
    4e64:	89 83       	std	Y+1, r24	; 0x01
    4e66:	6a 83       	std	Y+2, r22	; 0x02
    nRF24L01_CE_port = port;
    4e68:	89 81       	ldd	r24, Y+1	; 0x01
    4e6a:	80 93 ab 05 	sts	0x05AB, r24
    nRF24L01_CE_pin = pin;
    4e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e70:	80 93 ac 05 	sts	0x05AC, r24
    DIO_SetPinDirection(port, pin, PIN_OUTPUT);  // Set CE pin as output
    4e74:	89 81       	ldd	r24, Y+1	; 0x01
    4e76:	6a 81       	ldd	r22, Y+2	; 0x02
    4e78:	41 e0       	ldi	r20, 0x01	; 1
    4e7a:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
}
    4e7e:	0f 90       	pop	r0
    4e80:	0f 90       	pop	r0
    4e82:	cf 91       	pop	r28
    4e84:	df 91       	pop	r29
    4e86:	08 95       	ret

00004e88 <NRF24L01_TransmitData>:

// Example of transmitting data
void NRF24L01_TransmitData(u8_t* data, u8_t length) {
    4e88:	df 93       	push	r29
    4e8a:	cf 93       	push	r28
    4e8c:	00 d0       	rcall	.+0      	; 0x4e8e <NRF24L01_TransmitData+0x6>
    4e8e:	00 d0       	rcall	.+0      	; 0x4e90 <NRF24L01_TransmitData+0x8>
    4e90:	cd b7       	in	r28, 0x3d	; 61
    4e92:	de b7       	in	r29, 0x3e	; 62
    4e94:	9b 83       	std	Y+3, r25	; 0x03
    4e96:	8a 83       	std	Y+2, r24	; 0x02
    4e98:	6c 83       	std	Y+4, r22	; 0x04
    // Wait for TX buffer to be ready
    while (!(NRF24L01_ReadRegister(STATUS_REG) & 0x20)); // Check TX_DS flag (Data Sent)
    4e9a:	87 e0       	ldi	r24, 0x07	; 7
    4e9c:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <NRF24L01_ReadRegister>
    4ea0:	88 2f       	mov	r24, r24
    4ea2:	90 e0       	ldi	r25, 0x00	; 0
    4ea4:	80 72       	andi	r24, 0x20	; 32
    4ea6:	90 70       	andi	r25, 0x00	; 0
    4ea8:	00 97       	sbiw	r24, 0x00	; 0
    4eaa:	b9 f3       	breq	.-18     	; 0x4e9a <NRF24L01_TransmitData+0x12>

    // Load the data into the TX payload register
    for (u8_t i = 0; i < length; i++) {
    4eac:	19 82       	std	Y+1, r1	; 0x01
    4eae:	0e c0       	rjmp	.+28     	; 0x4ecc <NRF24L01_TransmitData+0x44>
        SPI_Transmit(data[i]); // Transmit each byte of data
    4eb0:	89 81       	ldd	r24, Y+1	; 0x01
    4eb2:	28 2f       	mov	r18, r24
    4eb4:	30 e0       	ldi	r19, 0x00	; 0
    4eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    4eba:	fc 01       	movw	r30, r24
    4ebc:	e2 0f       	add	r30, r18
    4ebe:	f3 1f       	adc	r31, r19
    4ec0:	80 81       	ld	r24, Z
    4ec2:	0e 94 7d 14 	call	0x28fa	; 0x28fa <SPI_Transmit>
void NRF24L01_TransmitData(u8_t* data, u8_t length) {
    // Wait for TX buffer to be ready
    while (!(NRF24L01_ReadRegister(STATUS_REG) & 0x20)); // Check TX_DS flag (Data Sent)

    // Load the data into the TX payload register
    for (u8_t i = 0; i < length; i++) {
    4ec6:	89 81       	ldd	r24, Y+1	; 0x01
    4ec8:	8f 5f       	subi	r24, 0xFF	; 255
    4eca:	89 83       	std	Y+1, r24	; 0x01
    4ecc:	99 81       	ldd	r25, Y+1	; 0x01
    4ece:	8c 81       	ldd	r24, Y+4	; 0x04
    4ed0:	98 17       	cp	r25, r24
    4ed2:	70 f3       	brcs	.-36     	; 0x4eb0 <NRF24L01_TransmitData+0x28>
        SPI_Transmit(data[i]); // Transmit each byte of data
    }

    // Start transmission by setting CE high
    NRF24L01_CE(1);
    4ed4:	81 e0       	ldi	r24, 0x01	; 1
    4ed6:	0e 94 db 26 	call	0x4db6	; 0x4db6 <NRF24L01_CE>

    // Wait until the transmission is complete (check TX_DS flag)
    while (!(NRF24L01_ReadRegister(STATUS_REG) & 0x20));  // Check TX_DS flag
    4eda:	87 e0       	ldi	r24, 0x07	; 7
    4edc:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <NRF24L01_ReadRegister>
    4ee0:	88 2f       	mov	r24, r24
    4ee2:	90 e0       	ldi	r25, 0x00	; 0
    4ee4:	80 72       	andi	r24, 0x20	; 32
    4ee6:	90 70       	andi	r25, 0x00	; 0
    4ee8:	00 97       	sbiw	r24, 0x00	; 0
    4eea:	b9 f3       	breq	.-18     	; 0x4eda <NRF24L01_TransmitData+0x52>

    // Clear the TX_DS flag by writing 1 to it
    NRF24L01_WriteRegister(STATUS_REG, 0x20);
    4eec:	87 e0       	ldi	r24, 0x07	; 7
    4eee:	60 e2       	ldi	r22, 0x20	; 32
    4ef0:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <NRF24L01_WriteRegister>

    // Optionally, you can disable CE here if you are done transmitting
    NRF24L01_CE(0);
    4ef4:	80 e0       	ldi	r24, 0x00	; 0
    4ef6:	0e 94 db 26 	call	0x4db6	; 0x4db6 <NRF24L01_CE>
    LCD_Clear();
    4efa:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <LCD_Clear>
    LCD_SendString("NRF2");
    4efe:	80 e6       	ldi	r24, 0x60	; 96
    4f00:	90 e0       	ldi	r25, 0x00	; 0
    4f02:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <LCD_SendString>
}
    4f06:	0f 90       	pop	r0
    4f08:	0f 90       	pop	r0
    4f0a:	0f 90       	pop	r0
    4f0c:	0f 90       	pop	r0
    4f0e:	cf 91       	pop	r28
    4f10:	df 91       	pop	r29
    4f12:	08 95       	ret

00004f14 <NRF24L01_ReceiveData>:

// Example of receiving data
void NRF24L01_ReceiveData(u8_t* buffer, u8_t length) {
    4f14:	0f 93       	push	r16
    4f16:	1f 93       	push	r17
    4f18:	df 93       	push	r29
    4f1a:	cf 93       	push	r28
    4f1c:	00 d0       	rcall	.+0      	; 0x4f1e <NRF24L01_ReceiveData+0xa>
    4f1e:	00 d0       	rcall	.+0      	; 0x4f20 <NRF24L01_ReceiveData+0xc>
    4f20:	cd b7       	in	r28, 0x3d	; 61
    4f22:	de b7       	in	r29, 0x3e	; 62
    4f24:	9b 83       	std	Y+3, r25	; 0x03
    4f26:	8a 83       	std	Y+2, r24	; 0x02
    4f28:	6c 83       	std	Y+4, r22	; 0x04
    // Wait for data to be received (check RX_DR flag)
    while (!(NRF24L01_ReadRegister(STATUS_REG) & 0x40)); // Check RX_DR flag (Data Ready)
    4f2a:	87 e0       	ldi	r24, 0x07	; 7
    4f2c:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <NRF24L01_ReadRegister>
    4f30:	88 2f       	mov	r24, r24
    4f32:	90 e0       	ldi	r25, 0x00	; 0
    4f34:	80 74       	andi	r24, 0x40	; 64
    4f36:	90 70       	andi	r25, 0x00	; 0
    4f38:	00 97       	sbiw	r24, 0x00	; 0
    4f3a:	b9 f3       	breq	.-18     	; 0x4f2a <NRF24L01_ReceiveData+0x16>

    // Read received data from RX FIFO
    for (u8_t i = 0; i < length; i++) {
    4f3c:	19 82       	std	Y+1, r1	; 0x01
    4f3e:	0f c0       	rjmp	.+30     	; 0x4f5e <NRF24L01_ReceiveData+0x4a>
        buffer[i] = SPI_Receive();  // Read each byte of received data
    4f40:	89 81       	ldd	r24, Y+1	; 0x01
    4f42:	28 2f       	mov	r18, r24
    4f44:	30 e0       	ldi	r19, 0x00	; 0
    4f46:	8a 81       	ldd	r24, Y+2	; 0x02
    4f48:	9b 81       	ldd	r25, Y+3	; 0x03
    4f4a:	8c 01       	movw	r16, r24
    4f4c:	02 0f       	add	r16, r18
    4f4e:	13 1f       	adc	r17, r19
    4f50:	0e 94 a2 14 	call	0x2944	; 0x2944 <SPI_Receive>
    4f54:	f8 01       	movw	r30, r16
    4f56:	80 83       	st	Z, r24
void NRF24L01_ReceiveData(u8_t* buffer, u8_t length) {
    // Wait for data to be received (check RX_DR flag)
    while (!(NRF24L01_ReadRegister(STATUS_REG) & 0x40)); // Check RX_DR flag (Data Ready)

    // Read received data from RX FIFO
    for (u8_t i = 0; i < length; i++) {
    4f58:	89 81       	ldd	r24, Y+1	; 0x01
    4f5a:	8f 5f       	subi	r24, 0xFF	; 255
    4f5c:	89 83       	std	Y+1, r24	; 0x01
    4f5e:	99 81       	ldd	r25, Y+1	; 0x01
    4f60:	8c 81       	ldd	r24, Y+4	; 0x04
    4f62:	98 17       	cp	r25, r24
    4f64:	68 f3       	brcs	.-38     	; 0x4f40 <NRF24L01_ReceiveData+0x2c>
        buffer[i] = SPI_Receive();  // Read each byte of received data
    }

    // Clear the RX_DR flag by writing 1 to it
    NRF24L01_WriteRegister(STATUS_REG, 0x40);
    4f66:	87 e0       	ldi	r24, 0x07	; 7
    4f68:	60 e4       	ldi	r22, 0x40	; 64
    4f6a:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <NRF24L01_WriteRegister>
}
    4f6e:	0f 90       	pop	r0
    4f70:	0f 90       	pop	r0
    4f72:	0f 90       	pop	r0
    4f74:	0f 90       	pop	r0
    4f76:	cf 91       	pop	r28
    4f78:	df 91       	pop	r29
    4f7a:	1f 91       	pop	r17
    4f7c:	0f 91       	pop	r16
    4f7e:	08 95       	ret

00004f80 <LCD_Init>:

/********************************\
*********** Functions ************
\********************************/

void LCD_Init(LCD_modes_of_operation mode){
    4f80:	df 93       	push	r29
    4f82:	cf 93       	push	r28
    4f84:	cd b7       	in	r28, 0x3d	; 61
    4f86:	de b7       	in	r29, 0x3e	; 62
    4f88:	61 97       	sbiw	r28, 0x11	; 17
    4f8a:	0f b6       	in	r0, 0x3f	; 63
    4f8c:	f8 94       	cli
    4f8e:	de bf       	out	0x3e, r29	; 62
    4f90:	0f be       	out	0x3f, r0	; 63
    4f92:	cd bf       	out	0x3d, r28	; 61
    4f94:	8f 87       	std	Y+15, r24	; 0x0f
	mode_of_operation = mode;						// Mode is saved in a variable.
    4f96:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f98:	80 93 ad 05 	sts	0x05AD, r24
	DIO_SetPinDirection(Control_Port, E, PIN_OUTPUT);
    4f9c:	81 e0       	ldi	r24, 0x01	; 1
    4f9e:	63 e0       	ldi	r22, 0x03	; 3
    4fa0:	41 e0       	ldi	r20, 0x01	; 1
    4fa2:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
	DIO_SetPinDirection(Control_Port, RS, PIN_OUTPUT);
    4fa6:	81 e0       	ldi	r24, 0x01	; 1
    4fa8:	61 e0       	ldi	r22, 0x01	; 1
    4faa:	41 e0       	ldi	r20, 0x01	; 1
    4fac:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
	DIO_SetPinDirection(Control_Port, RW, PIN_OUTPUT);
    4fb0:	81 e0       	ldi	r24, 0x01	; 1
    4fb2:	62 e0       	ldi	r22, 0x02	; 2
    4fb4:	41 e0       	ldi	r20, 0x01	; 1
    4fb6:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
	switch (mode){
    4fba:	8f 85       	ldd	r24, Y+15	; 0x0f
    4fbc:	28 2f       	mov	r18, r24
    4fbe:	30 e0       	ldi	r19, 0x00	; 0
    4fc0:	39 8b       	std	Y+17, r19	; 0x11
    4fc2:	28 8b       	std	Y+16, r18	; 0x10
    4fc4:	88 89       	ldd	r24, Y+16	; 0x10
    4fc6:	99 89       	ldd	r25, Y+17	; 0x11
    4fc8:	00 97       	sbiw	r24, 0x00	; 0
    4fca:	31 f0       	breq	.+12     	; 0x4fd8 <LCD_Init+0x58>
    4fcc:	28 89       	ldd	r18, Y+16	; 0x10
    4fce:	39 89       	ldd	r19, Y+17	; 0x11
    4fd0:	21 30       	cpi	r18, 0x01	; 1
    4fd2:	31 05       	cpc	r19, r1
    4fd4:	b1 f0       	breq	.+44     	; 0x5002 <LCD_Init+0x82>
    4fd6:	19 c0       	rjmp	.+50     	; 0x500a <LCD_Init+0x8a>
	case _4bits:									// When dealing with 4 bits, only 4 pins are output.
		DIO_SetPinDirection(Data_Port, D4, PIN_OUTPUT);
    4fd8:	80 e0       	ldi	r24, 0x00	; 0
    4fda:	64 e0       	ldi	r22, 0x04	; 4
    4fdc:	41 e0       	ldi	r20, 0x01	; 1
    4fde:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
		DIO_SetPinDirection(Data_Port, D5, PIN_OUTPUT);
    4fe2:	80 e0       	ldi	r24, 0x00	; 0
    4fe4:	65 e0       	ldi	r22, 0x05	; 5
    4fe6:	41 e0       	ldi	r20, 0x01	; 1
    4fe8:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
		DIO_SetPinDirection(Data_Port, D6, PIN_OUTPUT);
    4fec:	80 e0       	ldi	r24, 0x00	; 0
    4fee:	66 e0       	ldi	r22, 0x06	; 6
    4ff0:	41 e0       	ldi	r20, 0x01	; 1
    4ff2:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
		DIO_SetPinDirection(Data_Port, D7, PIN_OUTPUT);
    4ff6:	80 e0       	ldi	r24, 0x00	; 0
    4ff8:	67 e0       	ldi	r22, 0x07	; 7
    4ffa:	41 e0       	ldi	r20, 0x01	; 1
    4ffc:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
    5000:	04 c0       	rjmp	.+8      	; 0x500a <LCD_Init+0x8a>
		break;

	case _8bits:
		DIO_SetPortDirection(Data_Port, PORT_OUTPUT);// When dealing with 8 bits, the whole port is output.
    5002:	80 e0       	ldi	r24, 0x00	; 0
    5004:	6f ef       	ldi	r22, 0xFF	; 255
    5006:	0e 94 86 18 	call	0x310c	; 0x310c <DIO_SetPortDirection>
    500a:	80 e0       	ldi	r24, 0x00	; 0
    500c:	90 e0       	ldi	r25, 0x00	; 0
    500e:	a8 e4       	ldi	r26, 0x48	; 72
    5010:	b2 e4       	ldi	r27, 0x42	; 66
    5012:	8b 87       	std	Y+11, r24	; 0x0b
    5014:	9c 87       	std	Y+12, r25	; 0x0c
    5016:	ad 87       	std	Y+13, r26	; 0x0d
    5018:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    501a:	6b 85       	ldd	r22, Y+11	; 0x0b
    501c:	7c 85       	ldd	r23, Y+12	; 0x0c
    501e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5020:	9e 85       	ldd	r25, Y+14	; 0x0e
    5022:	20 e0       	ldi	r18, 0x00	; 0
    5024:	30 e0       	ldi	r19, 0x00	; 0
    5026:	4a e7       	ldi	r20, 0x7A	; 122
    5028:	55 e4       	ldi	r21, 0x45	; 69
    502a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    502e:	dc 01       	movw	r26, r24
    5030:	cb 01       	movw	r24, r22
    5032:	8f 83       	std	Y+7, r24	; 0x07
    5034:	98 87       	std	Y+8, r25	; 0x08
    5036:	a9 87       	std	Y+9, r26	; 0x09
    5038:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    503a:	6f 81       	ldd	r22, Y+7	; 0x07
    503c:	78 85       	ldd	r23, Y+8	; 0x08
    503e:	89 85       	ldd	r24, Y+9	; 0x09
    5040:	9a 85       	ldd	r25, Y+10	; 0x0a
    5042:	20 e0       	ldi	r18, 0x00	; 0
    5044:	30 e0       	ldi	r19, 0x00	; 0
    5046:	40 e8       	ldi	r20, 0x80	; 128
    5048:	5f e3       	ldi	r21, 0x3F	; 63
    504a:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    504e:	88 23       	and	r24, r24
    5050:	2c f4       	brge	.+10     	; 0x505c <LCD_Init+0xdc>
		__ticks = 1;
    5052:	81 e0       	ldi	r24, 0x01	; 1
    5054:	90 e0       	ldi	r25, 0x00	; 0
    5056:	9e 83       	std	Y+6, r25	; 0x06
    5058:	8d 83       	std	Y+5, r24	; 0x05
    505a:	3f c0       	rjmp	.+126    	; 0x50da <LCD_Init+0x15a>
	else if (__tmp > 65535)
    505c:	6f 81       	ldd	r22, Y+7	; 0x07
    505e:	78 85       	ldd	r23, Y+8	; 0x08
    5060:	89 85       	ldd	r24, Y+9	; 0x09
    5062:	9a 85       	ldd	r25, Y+10	; 0x0a
    5064:	20 e0       	ldi	r18, 0x00	; 0
    5066:	3f ef       	ldi	r19, 0xFF	; 255
    5068:	4f e7       	ldi	r20, 0x7F	; 127
    506a:	57 e4       	ldi	r21, 0x47	; 71
    506c:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    5070:	18 16       	cp	r1, r24
    5072:	4c f5       	brge	.+82     	; 0x50c6 <LCD_Init+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5074:	6b 85       	ldd	r22, Y+11	; 0x0b
    5076:	7c 85       	ldd	r23, Y+12	; 0x0c
    5078:	8d 85       	ldd	r24, Y+13	; 0x0d
    507a:	9e 85       	ldd	r25, Y+14	; 0x0e
    507c:	20 e0       	ldi	r18, 0x00	; 0
    507e:	30 e0       	ldi	r19, 0x00	; 0
    5080:	40 e2       	ldi	r20, 0x20	; 32
    5082:	51 e4       	ldi	r21, 0x41	; 65
    5084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5088:	dc 01       	movw	r26, r24
    508a:	cb 01       	movw	r24, r22
    508c:	bc 01       	movw	r22, r24
    508e:	cd 01       	movw	r24, r26
    5090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5094:	dc 01       	movw	r26, r24
    5096:	cb 01       	movw	r24, r22
    5098:	9e 83       	std	Y+6, r25	; 0x06
    509a:	8d 83       	std	Y+5, r24	; 0x05
    509c:	0f c0       	rjmp	.+30     	; 0x50bc <LCD_Init+0x13c>
    509e:	80 e9       	ldi	r24, 0x90	; 144
    50a0:	91 e0       	ldi	r25, 0x01	; 1
    50a2:	9c 83       	std	Y+4, r25	; 0x04
    50a4:	8b 83       	std	Y+3, r24	; 0x03
    50a6:	8b 81       	ldd	r24, Y+3	; 0x03
    50a8:	9c 81       	ldd	r25, Y+4	; 0x04
    50aa:	01 97       	sbiw	r24, 0x01	; 1
    50ac:	f1 f7       	brne	.-4      	; 0x50aa <LCD_Init+0x12a>
    50ae:	9c 83       	std	Y+4, r25	; 0x04
    50b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50b2:	8d 81       	ldd	r24, Y+5	; 0x05
    50b4:	9e 81       	ldd	r25, Y+6	; 0x06
    50b6:	01 97       	sbiw	r24, 0x01	; 1
    50b8:	9e 83       	std	Y+6, r25	; 0x06
    50ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50bc:	8d 81       	ldd	r24, Y+5	; 0x05
    50be:	9e 81       	ldd	r25, Y+6	; 0x06
    50c0:	00 97       	sbiw	r24, 0x00	; 0
    50c2:	69 f7       	brne	.-38     	; 0x509e <LCD_Init+0x11e>
    50c4:	14 c0       	rjmp	.+40     	; 0x50ee <LCD_Init+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50c6:	6f 81       	ldd	r22, Y+7	; 0x07
    50c8:	78 85       	ldd	r23, Y+8	; 0x08
    50ca:	89 85       	ldd	r24, Y+9	; 0x09
    50cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    50ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50d2:	dc 01       	movw	r26, r24
    50d4:	cb 01       	movw	r24, r22
    50d6:	9e 83       	std	Y+6, r25	; 0x06
    50d8:	8d 83       	std	Y+5, r24	; 0x05
    50da:	8d 81       	ldd	r24, Y+5	; 0x05
    50dc:	9e 81       	ldd	r25, Y+6	; 0x06
    50de:	9a 83       	std	Y+2, r25	; 0x02
    50e0:	89 83       	std	Y+1, r24	; 0x01
    50e2:	89 81       	ldd	r24, Y+1	; 0x01
    50e4:	9a 81       	ldd	r25, Y+2	; 0x02
    50e6:	01 97       	sbiw	r24, 0x01	; 1
    50e8:	f1 f7       	brne	.-4      	; 0x50e6 <LCD_Init+0x166>
    50ea:	9a 83       	std	Y+2, r25	; 0x02
    50ec:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	_delay_ms(50);
	LCD_ReturnHome();
    50ee:	0e 94 82 2c 	call	0x5904	; 0x5904 <LCD_ReturnHome>
	LCD_EntryModeSet(INCREMENT,SHIFT_OFF);							// Increment the addresses 1 when writing into or reading from them. No display shifting.
    50f2:	81 e0       	ldi	r24, 0x01	; 1
    50f4:	60 e0       	ldi	r22, 0x00	; 0
    50f6:	0e 94 56 2d 	call	0x5aac	; 0x5aac <LCD_EntryModeSet>
	LCD_DisplayControl(DISPLAY_ON, CURSOR_OFF, CURSOR_BLINK_OFF);	// Display is on. No cursor. No cursor blinking (when needed).
    50fa:	81 e0       	ldi	r24, 0x01	; 1
    50fc:	60 e0       	ldi	r22, 0x00	; 0
    50fe:	40 e0       	ldi	r20, 0x00	; 0
    5100:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <LCD_DisplayControl>
	LCD_FunctionSet(mode, _2_LINES, _5x8_DOTS);					// Mode is taken as an argument. 2 lines mode. 5*10 dots.
    5104:	8f 85       	ldd	r24, Y+15	; 0x0f
    5106:	61 e0       	ldi	r22, 0x01	; 1
    5108:	40 e0       	ldi	r20, 0x00	; 0
    510a:	0e 94 10 30 	call	0x6020	; 0x6020 <LCD_FunctionSet>
	LCD_Clear();
    510e:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <LCD_Clear>
}
    5112:	61 96       	adiw	r28, 0x11	; 17
    5114:	0f b6       	in	r0, 0x3f	; 63
    5116:	f8 94       	cli
    5118:	de bf       	out	0x3e, r29	; 62
    511a:	0f be       	out	0x3f, r0	; 63
    511c:	cd bf       	out	0x3d, r28	; 61
    511e:	cf 91       	pop	r28
    5120:	df 91       	pop	r29
    5122:	08 95       	ret

00005124 <LCD_SendInstruction>:

void LCD_SendInstruction(u8_t instruction){
    5124:	df 93       	push	r29
    5126:	cf 93       	push	r28
    5128:	cd b7       	in	r28, 0x3d	; 61
    512a:	de b7       	in	r29, 0x3e	; 62
    512c:	a9 97       	sbiw	r28, 0x29	; 41
    512e:	0f b6       	in	r0, 0x3f	; 63
    5130:	f8 94       	cli
    5132:	de bf       	out	0x3e, r29	; 62
    5134:	0f be       	out	0x3f, r0	; 63
    5136:	cd bf       	out	0x3d, r28	; 61
    5138:	8f a3       	std	Y+39, r24	; 0x27
	DIO_SetPinValue(Control_Port, RS, PIN_LOW);
    513a:	81 e0       	ldi	r24, 0x01	; 1
    513c:	61 e0       	ldi	r22, 0x01	; 1
    513e:	40 e0       	ldi	r20, 0x00	; 0
    5140:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
	DIO_SetPinValue(Control_Port, RW, PIN_LOW);
    5144:	81 e0       	ldi	r24, 0x01	; 1
    5146:	62 e0       	ldi	r22, 0x02	; 2
    5148:	40 e0       	ldi	r20, 0x00	; 0
    514a:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
	switch (mode_of_operation){
    514e:	80 91 ad 05 	lds	r24, 0x05AD
    5152:	28 2f       	mov	r18, r24
    5154:	30 e0       	ldi	r19, 0x00	; 0
    5156:	39 a7       	std	Y+41, r19	; 0x29
    5158:	28 a7       	std	Y+40, r18	; 0x28
    515a:	88 a5       	ldd	r24, Y+40	; 0x28
    515c:	99 a5       	ldd	r25, Y+41	; 0x29
    515e:	00 97       	sbiw	r24, 0x00	; 0
    5160:	39 f0       	breq	.+14     	; 0x5170 <LCD_SendInstruction+0x4c>
    5162:	28 a5       	ldd	r18, Y+40	; 0x28
    5164:	39 a5       	ldd	r19, Y+41	; 0x29
    5166:	21 30       	cpi	r18, 0x01	; 1
    5168:	31 05       	cpc	r19, r1
    516a:	09 f4       	brne	.+2      	; 0x516e <LCD_SendInstruction+0x4a>
    516c:	cd c0       	rjmp	.+410    	; 0x5308 <LCD_SendInstruction+0x1e4>
    516e:	d4 c0       	rjmp	.+424    	; 0x5318 <LCD_SendInstruction+0x1f4>
	case _4bits:
		/* Sending the upper nibble */
		DIO_SetPinValue(Data_Port, D7, GET_BIT(instruction, 7));
    5170:	8f a1       	ldd	r24, Y+39	; 0x27
    5172:	98 2f       	mov	r25, r24
    5174:	99 1f       	adc	r25, r25
    5176:	99 27       	eor	r25, r25
    5178:	99 1f       	adc	r25, r25
    517a:	80 e0       	ldi	r24, 0x00	; 0
    517c:	67 e0       	ldi	r22, 0x07	; 7
    517e:	49 2f       	mov	r20, r25
    5180:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
		DIO_SetPinValue(Data_Port, D6, GET_BIT(instruction, 6));
    5184:	8f a1       	ldd	r24, Y+39	; 0x27
    5186:	82 95       	swap	r24
    5188:	86 95       	lsr	r24
    518a:	86 95       	lsr	r24
    518c:	83 70       	andi	r24, 0x03	; 3
    518e:	98 2f       	mov	r25, r24
    5190:	91 70       	andi	r25, 0x01	; 1
    5192:	80 e0       	ldi	r24, 0x00	; 0
    5194:	66 e0       	ldi	r22, 0x06	; 6
    5196:	49 2f       	mov	r20, r25
    5198:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
		DIO_SetPinValue(Data_Port, D5, GET_BIT(instruction, 5));
    519c:	8f a1       	ldd	r24, Y+39	; 0x27
    519e:	82 95       	swap	r24
    51a0:	86 95       	lsr	r24
    51a2:	87 70       	andi	r24, 0x07	; 7
    51a4:	98 2f       	mov	r25, r24
    51a6:	91 70       	andi	r25, 0x01	; 1
    51a8:	80 e0       	ldi	r24, 0x00	; 0
    51aa:	65 e0       	ldi	r22, 0x05	; 5
    51ac:	49 2f       	mov	r20, r25
    51ae:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
		DIO_SetPinValue(Data_Port, D4, GET_BIT(instruction, 4));
    51b2:	8f a1       	ldd	r24, Y+39	; 0x27
    51b4:	82 95       	swap	r24
    51b6:	8f 70       	andi	r24, 0x0F	; 15
    51b8:	98 2f       	mov	r25, r24
    51ba:	91 70       	andi	r25, 0x01	; 1
    51bc:	80 e0       	ldi	r24, 0x00	; 0
    51be:	64 e0       	ldi	r22, 0x04	; 4
    51c0:	49 2f       	mov	r20, r25
    51c2:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
		LCD_EnablePulse();
    51c6:	0e 94 bb 32 	call	0x6576	; 0x6576 <LCD_EnablePulse>
		LCD_DisablePulse();
    51ca:	0e 94 45 33 	call	0x668a	; 0x668a <LCD_DisablePulse>
    51ce:	80 e0       	ldi	r24, 0x00	; 0
    51d0:	90 e0       	ldi	r25, 0x00	; 0
    51d2:	a8 ec       	ldi	r26, 0xC8	; 200
    51d4:	b2 e4       	ldi	r27, 0x42	; 66
    51d6:	8b a3       	std	Y+35, r24	; 0x23
    51d8:	9c a3       	std	Y+36, r25	; 0x24
    51da:	ad a3       	std	Y+37, r26	; 0x25
    51dc:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51de:	6b a1       	ldd	r22, Y+35	; 0x23
    51e0:	7c a1       	ldd	r23, Y+36	; 0x24
    51e2:	8d a1       	ldd	r24, Y+37	; 0x25
    51e4:	9e a1       	ldd	r25, Y+38	; 0x26
    51e6:	20 e0       	ldi	r18, 0x00	; 0
    51e8:	30 e0       	ldi	r19, 0x00	; 0
    51ea:	4a e7       	ldi	r20, 0x7A	; 122
    51ec:	55 e4       	ldi	r21, 0x45	; 69
    51ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51f2:	dc 01       	movw	r26, r24
    51f4:	cb 01       	movw	r24, r22
    51f6:	8f 8f       	std	Y+31, r24	; 0x1f
    51f8:	98 a3       	std	Y+32, r25	; 0x20
    51fa:	a9 a3       	std	Y+33, r26	; 0x21
    51fc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    51fe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5200:	78 a1       	ldd	r23, Y+32	; 0x20
    5202:	89 a1       	ldd	r24, Y+33	; 0x21
    5204:	9a a1       	ldd	r25, Y+34	; 0x22
    5206:	20 e0       	ldi	r18, 0x00	; 0
    5208:	30 e0       	ldi	r19, 0x00	; 0
    520a:	40 e8       	ldi	r20, 0x80	; 128
    520c:	5f e3       	ldi	r21, 0x3F	; 63
    520e:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    5212:	88 23       	and	r24, r24
    5214:	2c f4       	brge	.+10     	; 0x5220 <LCD_SendInstruction+0xfc>
		__ticks = 1;
    5216:	81 e0       	ldi	r24, 0x01	; 1
    5218:	90 e0       	ldi	r25, 0x00	; 0
    521a:	9e 8f       	std	Y+30, r25	; 0x1e
    521c:	8d 8f       	std	Y+29, r24	; 0x1d
    521e:	3f c0       	rjmp	.+126    	; 0x529e <LCD_SendInstruction+0x17a>
	else if (__tmp > 65535)
    5220:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5222:	78 a1       	ldd	r23, Y+32	; 0x20
    5224:	89 a1       	ldd	r24, Y+33	; 0x21
    5226:	9a a1       	ldd	r25, Y+34	; 0x22
    5228:	20 e0       	ldi	r18, 0x00	; 0
    522a:	3f ef       	ldi	r19, 0xFF	; 255
    522c:	4f e7       	ldi	r20, 0x7F	; 127
    522e:	57 e4       	ldi	r21, 0x47	; 71
    5230:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    5234:	18 16       	cp	r1, r24
    5236:	4c f5       	brge	.+82     	; 0x528a <LCD_SendInstruction+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5238:	6b a1       	ldd	r22, Y+35	; 0x23
    523a:	7c a1       	ldd	r23, Y+36	; 0x24
    523c:	8d a1       	ldd	r24, Y+37	; 0x25
    523e:	9e a1       	ldd	r25, Y+38	; 0x26
    5240:	20 e0       	ldi	r18, 0x00	; 0
    5242:	30 e0       	ldi	r19, 0x00	; 0
    5244:	40 e2       	ldi	r20, 0x20	; 32
    5246:	51 e4       	ldi	r21, 0x41	; 65
    5248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    524c:	dc 01       	movw	r26, r24
    524e:	cb 01       	movw	r24, r22
    5250:	bc 01       	movw	r22, r24
    5252:	cd 01       	movw	r24, r26
    5254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5258:	dc 01       	movw	r26, r24
    525a:	cb 01       	movw	r24, r22
    525c:	9e 8f       	std	Y+30, r25	; 0x1e
    525e:	8d 8f       	std	Y+29, r24	; 0x1d
    5260:	0f c0       	rjmp	.+30     	; 0x5280 <LCD_SendInstruction+0x15c>
    5262:	80 e9       	ldi	r24, 0x90	; 144
    5264:	91 e0       	ldi	r25, 0x01	; 1
    5266:	9c 8f       	std	Y+28, r25	; 0x1c
    5268:	8b 8f       	std	Y+27, r24	; 0x1b
    526a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    526c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    526e:	01 97       	sbiw	r24, 0x01	; 1
    5270:	f1 f7       	brne	.-4      	; 0x526e <LCD_SendInstruction+0x14a>
    5272:	9c 8f       	std	Y+28, r25	; 0x1c
    5274:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5276:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5278:	9e 8d       	ldd	r25, Y+30	; 0x1e
    527a:	01 97       	sbiw	r24, 0x01	; 1
    527c:	9e 8f       	std	Y+30, r25	; 0x1e
    527e:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5280:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5282:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5284:	00 97       	sbiw	r24, 0x00	; 0
    5286:	69 f7       	brne	.-38     	; 0x5262 <LCD_SendInstruction+0x13e>
    5288:	14 c0       	rjmp	.+40     	; 0x52b2 <LCD_SendInstruction+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    528a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    528c:	78 a1       	ldd	r23, Y+32	; 0x20
    528e:	89 a1       	ldd	r24, Y+33	; 0x21
    5290:	9a a1       	ldd	r25, Y+34	; 0x22
    5292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5296:	dc 01       	movw	r26, r24
    5298:	cb 01       	movw	r24, r22
    529a:	9e 8f       	std	Y+30, r25	; 0x1e
    529c:	8d 8f       	std	Y+29, r24	; 0x1d
    529e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    52a2:	9a 8f       	std	Y+26, r25	; 0x1a
    52a4:	89 8f       	std	Y+25, r24	; 0x19
    52a6:	89 8d       	ldd	r24, Y+25	; 0x19
    52a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    52aa:	01 97       	sbiw	r24, 0x01	; 1
    52ac:	f1 f7       	brne	.-4      	; 0x52aa <LCD_SendInstruction+0x186>
    52ae:	9a 8f       	std	Y+26, r25	; 0x1a
    52b0:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(100);
		/* Sending the lower nibble */
		DIO_SetPinValue(Data_Port, D7, GET_BIT(instruction, 3));
    52b2:	8f a1       	ldd	r24, Y+39	; 0x27
    52b4:	86 95       	lsr	r24
    52b6:	86 95       	lsr	r24
    52b8:	86 95       	lsr	r24
    52ba:	98 2f       	mov	r25, r24
    52bc:	91 70       	andi	r25, 0x01	; 1
    52be:	80 e0       	ldi	r24, 0x00	; 0
    52c0:	67 e0       	ldi	r22, 0x07	; 7
    52c2:	49 2f       	mov	r20, r25
    52c4:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
		DIO_SetPinValue(Data_Port, D6, GET_BIT(instruction, 2));
    52c8:	8f a1       	ldd	r24, Y+39	; 0x27
    52ca:	86 95       	lsr	r24
    52cc:	86 95       	lsr	r24
    52ce:	98 2f       	mov	r25, r24
    52d0:	91 70       	andi	r25, 0x01	; 1
    52d2:	80 e0       	ldi	r24, 0x00	; 0
    52d4:	66 e0       	ldi	r22, 0x06	; 6
    52d6:	49 2f       	mov	r20, r25
    52d8:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
		DIO_SetPinValue(Data_Port, D5, GET_BIT(instruction, 1));
    52dc:	8f a1       	ldd	r24, Y+39	; 0x27
    52de:	86 95       	lsr	r24
    52e0:	98 2f       	mov	r25, r24
    52e2:	91 70       	andi	r25, 0x01	; 1
    52e4:	80 e0       	ldi	r24, 0x00	; 0
    52e6:	65 e0       	ldi	r22, 0x05	; 5
    52e8:	49 2f       	mov	r20, r25
    52ea:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
		DIO_SetPinValue(Data_Port, D4, GET_BIT(instruction, 0));
    52ee:	8f a1       	ldd	r24, Y+39	; 0x27
    52f0:	98 2f       	mov	r25, r24
    52f2:	91 70       	andi	r25, 0x01	; 1
    52f4:	80 e0       	ldi	r24, 0x00	; 0
    52f6:	64 e0       	ldi	r22, 0x04	; 4
    52f8:	49 2f       	mov	r20, r25
    52fa:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
		LCD_EnablePulse();
    52fe:	0e 94 bb 32 	call	0x6576	; 0x6576 <LCD_EnablePulse>
		LCD_DisablePulse();
    5302:	0e 94 45 33 	call	0x668a	; 0x668a <LCD_DisablePulse>
    5306:	08 c0       	rjmp	.+16     	; 0x5318 <LCD_SendInstruction+0x1f4>
		break;

	case _8bits:
		/* Sending the whole instruction in one stage */
		LCD_EnablePulse();
    5308:	0e 94 bb 32 	call	0x6576	; 0x6576 <LCD_EnablePulse>
		DIO_SetPortValue(Data_Port, instruction);
    530c:	80 e0       	ldi	r24, 0x00	; 0
    530e:	6f a1       	ldd	r22, Y+39	; 0x27
    5310:	0e 94 c7 18 	call	0x318e	; 0x318e <DIO_SetPortValue>
		LCD_DisablePulse();
    5314:	0e 94 45 33 	call	0x668a	; 0x668a <LCD_DisablePulse>
    5318:	80 e0       	ldi	r24, 0x00	; 0
    531a:	90 e0       	ldi	r25, 0x00	; 0
    531c:	a8 e4       	ldi	r26, 0x48	; 72
    531e:	b2 e4       	ldi	r27, 0x42	; 66
    5320:	8d 8b       	std	Y+21, r24	; 0x15
    5322:	9e 8b       	std	Y+22, r25	; 0x16
    5324:	af 8b       	std	Y+23, r26	; 0x17
    5326:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5328:	6d 89       	ldd	r22, Y+21	; 0x15
    532a:	7e 89       	ldd	r23, Y+22	; 0x16
    532c:	8f 89       	ldd	r24, Y+23	; 0x17
    532e:	98 8d       	ldd	r25, Y+24	; 0x18
    5330:	2b ea       	ldi	r18, 0xAB	; 171
    5332:	3a ea       	ldi	r19, 0xAA	; 170
    5334:	4a ea       	ldi	r20, 0xAA	; 170
    5336:	50 e4       	ldi	r21, 0x40	; 64
    5338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    533c:	dc 01       	movw	r26, r24
    533e:	cb 01       	movw	r24, r22
    5340:	89 8b       	std	Y+17, r24	; 0x11
    5342:	9a 8b       	std	Y+18, r25	; 0x12
    5344:	ab 8b       	std	Y+19, r26	; 0x13
    5346:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5348:	69 89       	ldd	r22, Y+17	; 0x11
    534a:	7a 89       	ldd	r23, Y+18	; 0x12
    534c:	8b 89       	ldd	r24, Y+19	; 0x13
    534e:	9c 89       	ldd	r25, Y+20	; 0x14
    5350:	20 e0       	ldi	r18, 0x00	; 0
    5352:	30 e0       	ldi	r19, 0x00	; 0
    5354:	40 e8       	ldi	r20, 0x80	; 128
    5356:	5f e3       	ldi	r21, 0x3F	; 63
    5358:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    535c:	88 23       	and	r24, r24
    535e:	1c f4       	brge	.+6      	; 0x5366 <LCD_SendInstruction+0x242>
		__ticks = 1;
    5360:	81 e0       	ldi	r24, 0x01	; 1
    5362:	88 8b       	std	Y+16, r24	; 0x10
    5364:	91 c0       	rjmp	.+290    	; 0x5488 <LCD_SendInstruction+0x364>
	else if (__tmp > 255)
    5366:	69 89       	ldd	r22, Y+17	; 0x11
    5368:	7a 89       	ldd	r23, Y+18	; 0x12
    536a:	8b 89       	ldd	r24, Y+19	; 0x13
    536c:	9c 89       	ldd	r25, Y+20	; 0x14
    536e:	20 e0       	ldi	r18, 0x00	; 0
    5370:	30 e0       	ldi	r19, 0x00	; 0
    5372:	4f e7       	ldi	r20, 0x7F	; 127
    5374:	53 e4       	ldi	r21, 0x43	; 67
    5376:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    537a:	18 16       	cp	r1, r24
    537c:	0c f0       	brlt	.+2      	; 0x5380 <LCD_SendInstruction+0x25c>
    537e:	7b c0       	rjmp	.+246    	; 0x5476 <LCD_SendInstruction+0x352>
	{
		_delay_ms(__us / 1000.0);
    5380:	6d 89       	ldd	r22, Y+21	; 0x15
    5382:	7e 89       	ldd	r23, Y+22	; 0x16
    5384:	8f 89       	ldd	r24, Y+23	; 0x17
    5386:	98 8d       	ldd	r25, Y+24	; 0x18
    5388:	20 e0       	ldi	r18, 0x00	; 0
    538a:	30 e0       	ldi	r19, 0x00	; 0
    538c:	4a e7       	ldi	r20, 0x7A	; 122
    538e:	54 e4       	ldi	r21, 0x44	; 68
    5390:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5394:	dc 01       	movw	r26, r24
    5396:	cb 01       	movw	r24, r22
    5398:	8c 87       	std	Y+12, r24	; 0x0c
    539a:	9d 87       	std	Y+13, r25	; 0x0d
    539c:	ae 87       	std	Y+14, r26	; 0x0e
    539e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53a0:	6c 85       	ldd	r22, Y+12	; 0x0c
    53a2:	7d 85       	ldd	r23, Y+13	; 0x0d
    53a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    53a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    53a8:	20 e0       	ldi	r18, 0x00	; 0
    53aa:	30 e0       	ldi	r19, 0x00	; 0
    53ac:	4a e7       	ldi	r20, 0x7A	; 122
    53ae:	55 e4       	ldi	r21, 0x45	; 69
    53b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53b4:	dc 01       	movw	r26, r24
    53b6:	cb 01       	movw	r24, r22
    53b8:	88 87       	std	Y+8, r24	; 0x08
    53ba:	99 87       	std	Y+9, r25	; 0x09
    53bc:	aa 87       	std	Y+10, r26	; 0x0a
    53be:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    53c0:	68 85       	ldd	r22, Y+8	; 0x08
    53c2:	79 85       	ldd	r23, Y+9	; 0x09
    53c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    53c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    53c8:	20 e0       	ldi	r18, 0x00	; 0
    53ca:	30 e0       	ldi	r19, 0x00	; 0
    53cc:	40 e8       	ldi	r20, 0x80	; 128
    53ce:	5f e3       	ldi	r21, 0x3F	; 63
    53d0:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    53d4:	88 23       	and	r24, r24
    53d6:	2c f4       	brge	.+10     	; 0x53e2 <LCD_SendInstruction+0x2be>
		__ticks = 1;
    53d8:	81 e0       	ldi	r24, 0x01	; 1
    53da:	90 e0       	ldi	r25, 0x00	; 0
    53dc:	9f 83       	std	Y+7, r25	; 0x07
    53de:	8e 83       	std	Y+6, r24	; 0x06
    53e0:	3f c0       	rjmp	.+126    	; 0x5460 <LCD_SendInstruction+0x33c>
	else if (__tmp > 65535)
    53e2:	68 85       	ldd	r22, Y+8	; 0x08
    53e4:	79 85       	ldd	r23, Y+9	; 0x09
    53e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    53e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    53ea:	20 e0       	ldi	r18, 0x00	; 0
    53ec:	3f ef       	ldi	r19, 0xFF	; 255
    53ee:	4f e7       	ldi	r20, 0x7F	; 127
    53f0:	57 e4       	ldi	r21, 0x47	; 71
    53f2:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    53f6:	18 16       	cp	r1, r24
    53f8:	4c f5       	brge	.+82     	; 0x544c <LCD_SendInstruction+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    53fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    53fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    5400:	9f 85       	ldd	r25, Y+15	; 0x0f
    5402:	20 e0       	ldi	r18, 0x00	; 0
    5404:	30 e0       	ldi	r19, 0x00	; 0
    5406:	40 e2       	ldi	r20, 0x20	; 32
    5408:	51 e4       	ldi	r21, 0x41	; 65
    540a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    540e:	dc 01       	movw	r26, r24
    5410:	cb 01       	movw	r24, r22
    5412:	bc 01       	movw	r22, r24
    5414:	cd 01       	movw	r24, r26
    5416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    541a:	dc 01       	movw	r26, r24
    541c:	cb 01       	movw	r24, r22
    541e:	9f 83       	std	Y+7, r25	; 0x07
    5420:	8e 83       	std	Y+6, r24	; 0x06
    5422:	0f c0       	rjmp	.+30     	; 0x5442 <LCD_SendInstruction+0x31e>
    5424:	80 e9       	ldi	r24, 0x90	; 144
    5426:	91 e0       	ldi	r25, 0x01	; 1
    5428:	9d 83       	std	Y+5, r25	; 0x05
    542a:	8c 83       	std	Y+4, r24	; 0x04
    542c:	8c 81       	ldd	r24, Y+4	; 0x04
    542e:	9d 81       	ldd	r25, Y+5	; 0x05
    5430:	01 97       	sbiw	r24, 0x01	; 1
    5432:	f1 f7       	brne	.-4      	; 0x5430 <LCD_SendInstruction+0x30c>
    5434:	9d 83       	std	Y+5, r25	; 0x05
    5436:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5438:	8e 81       	ldd	r24, Y+6	; 0x06
    543a:	9f 81       	ldd	r25, Y+7	; 0x07
    543c:	01 97       	sbiw	r24, 0x01	; 1
    543e:	9f 83       	std	Y+7, r25	; 0x07
    5440:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5442:	8e 81       	ldd	r24, Y+6	; 0x06
    5444:	9f 81       	ldd	r25, Y+7	; 0x07
    5446:	00 97       	sbiw	r24, 0x00	; 0
    5448:	69 f7       	brne	.-38     	; 0x5424 <LCD_SendInstruction+0x300>
    544a:	24 c0       	rjmp	.+72     	; 0x5494 <LCD_SendInstruction+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    544c:	68 85       	ldd	r22, Y+8	; 0x08
    544e:	79 85       	ldd	r23, Y+9	; 0x09
    5450:	8a 85       	ldd	r24, Y+10	; 0x0a
    5452:	9b 85       	ldd	r25, Y+11	; 0x0b
    5454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5458:	dc 01       	movw	r26, r24
    545a:	cb 01       	movw	r24, r22
    545c:	9f 83       	std	Y+7, r25	; 0x07
    545e:	8e 83       	std	Y+6, r24	; 0x06
    5460:	8e 81       	ldd	r24, Y+6	; 0x06
    5462:	9f 81       	ldd	r25, Y+7	; 0x07
    5464:	9b 83       	std	Y+3, r25	; 0x03
    5466:	8a 83       	std	Y+2, r24	; 0x02
    5468:	8a 81       	ldd	r24, Y+2	; 0x02
    546a:	9b 81       	ldd	r25, Y+3	; 0x03
    546c:	01 97       	sbiw	r24, 0x01	; 1
    546e:	f1 f7       	brne	.-4      	; 0x546c <LCD_SendInstruction+0x348>
    5470:	9b 83       	std	Y+3, r25	; 0x03
    5472:	8a 83       	std	Y+2, r24	; 0x02
    5474:	0f c0       	rjmp	.+30     	; 0x5494 <LCD_SendInstruction+0x370>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5476:	69 89       	ldd	r22, Y+17	; 0x11
    5478:	7a 89       	ldd	r23, Y+18	; 0x12
    547a:	8b 89       	ldd	r24, Y+19	; 0x13
    547c:	9c 89       	ldd	r25, Y+20	; 0x14
    547e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5482:	dc 01       	movw	r26, r24
    5484:	cb 01       	movw	r24, r22
    5486:	88 8b       	std	Y+16, r24	; 0x10
    5488:	88 89       	ldd	r24, Y+16	; 0x10
    548a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    548c:	89 81       	ldd	r24, Y+1	; 0x01
    548e:	8a 95       	dec	r24
    5490:	f1 f7       	brne	.-4      	; 0x548e <LCD_SendInstruction+0x36a>
    5492:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	_delay_us(50);

}
    5494:	a9 96       	adiw	r28, 0x29	; 41
    5496:	0f b6       	in	r0, 0x3f	; 63
    5498:	f8 94       	cli
    549a:	de bf       	out	0x3e, r29	; 62
    549c:	0f be       	out	0x3f, r0	; 63
    549e:	cd bf       	out	0x3d, r28	; 61
    54a0:	cf 91       	pop	r28
    54a2:	df 91       	pop	r29
    54a4:	08 95       	ret

000054a6 <LCD_SendChar>:

void LCD_SendChar(unsigned char character){
    54a6:	df 93       	push	r29
    54a8:	cf 93       	push	r28
    54aa:	00 d0       	rcall	.+0      	; 0x54ac <LCD_SendChar+0x6>
    54ac:	0f 92       	push	r0
    54ae:	cd b7       	in	r28, 0x3d	; 61
    54b0:	de b7       	in	r29, 0x3e	; 62
    54b2:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinValue(Control_Port, RS, PIN_HIGH);
    54b4:	81 e0       	ldi	r24, 0x01	; 1
    54b6:	61 e0       	ldi	r22, 0x01	; 1
    54b8:	41 e0       	ldi	r20, 0x01	; 1
    54ba:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
	DIO_SetPinValue(Control_Port, RW, PIN_LOW);
    54be:	81 e0       	ldi	r24, 0x01	; 1
    54c0:	62 e0       	ldi	r22, 0x02	; 2
    54c2:	40 e0       	ldi	r20, 0x00	; 0
    54c4:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
	switch (mode_of_operation){
    54c8:	80 91 ad 05 	lds	r24, 0x05AD
    54cc:	28 2f       	mov	r18, r24
    54ce:	30 e0       	ldi	r19, 0x00	; 0
    54d0:	3b 83       	std	Y+3, r19	; 0x03
    54d2:	2a 83       	std	Y+2, r18	; 0x02
    54d4:	8a 81       	ldd	r24, Y+2	; 0x02
    54d6:	9b 81       	ldd	r25, Y+3	; 0x03
    54d8:	00 97       	sbiw	r24, 0x00	; 0
    54da:	39 f0       	breq	.+14     	; 0x54ea <LCD_SendChar+0x44>
    54dc:	2a 81       	ldd	r18, Y+2	; 0x02
    54de:	3b 81       	ldd	r19, Y+3	; 0x03
    54e0:	21 30       	cpi	r18, 0x01	; 1
    54e2:	31 05       	cpc	r19, r1
    54e4:	09 f4       	brne	.+2      	; 0x54e8 <LCD_SendChar+0x42>
    54e6:	5b c0       	rjmp	.+182    	; 0x559e <LCD_SendChar+0xf8>
    54e8:	62 c0       	rjmp	.+196    	; 0x55ae <LCD_SendChar+0x108>
	case _4bits:
		/* Sending the upper nibble */
		DIO_SetPinValue(Data_Port, D7, GET_BIT(character, 7));
    54ea:	89 81       	ldd	r24, Y+1	; 0x01
    54ec:	98 2f       	mov	r25, r24
    54ee:	99 1f       	adc	r25, r25
    54f0:	99 27       	eor	r25, r25
    54f2:	99 1f       	adc	r25, r25
    54f4:	80 e0       	ldi	r24, 0x00	; 0
    54f6:	67 e0       	ldi	r22, 0x07	; 7
    54f8:	49 2f       	mov	r20, r25
    54fa:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
		DIO_SetPinValue(Data_Port, D6, GET_BIT(character, 6));
    54fe:	89 81       	ldd	r24, Y+1	; 0x01
    5500:	82 95       	swap	r24
    5502:	86 95       	lsr	r24
    5504:	86 95       	lsr	r24
    5506:	83 70       	andi	r24, 0x03	; 3
    5508:	98 2f       	mov	r25, r24
    550a:	91 70       	andi	r25, 0x01	; 1
    550c:	80 e0       	ldi	r24, 0x00	; 0
    550e:	66 e0       	ldi	r22, 0x06	; 6
    5510:	49 2f       	mov	r20, r25
    5512:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
		DIO_SetPinValue(Data_Port, D5, GET_BIT(character, 5));
    5516:	89 81       	ldd	r24, Y+1	; 0x01
    5518:	82 95       	swap	r24
    551a:	86 95       	lsr	r24
    551c:	87 70       	andi	r24, 0x07	; 7
    551e:	98 2f       	mov	r25, r24
    5520:	91 70       	andi	r25, 0x01	; 1
    5522:	80 e0       	ldi	r24, 0x00	; 0
    5524:	65 e0       	ldi	r22, 0x05	; 5
    5526:	49 2f       	mov	r20, r25
    5528:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
		DIO_SetPinValue(Data_Port, D4, GET_BIT(character, 4));
    552c:	89 81       	ldd	r24, Y+1	; 0x01
    552e:	82 95       	swap	r24
    5530:	8f 70       	andi	r24, 0x0F	; 15
    5532:	98 2f       	mov	r25, r24
    5534:	91 70       	andi	r25, 0x01	; 1
    5536:	80 e0       	ldi	r24, 0x00	; 0
    5538:	64 e0       	ldi	r22, 0x04	; 4
    553a:	49 2f       	mov	r20, r25
    553c:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
		LCD_EnablePulse();
    5540:	0e 94 bb 32 	call	0x6576	; 0x6576 <LCD_EnablePulse>
		LCD_DisablePulse();
    5544:	0e 94 45 33 	call	0x668a	; 0x668a <LCD_DisablePulse>
		/* Sending the lower nibble */
		DIO_SetPinValue(Data_Port, D7, GET_BIT(character, 3));
    5548:	89 81       	ldd	r24, Y+1	; 0x01
    554a:	86 95       	lsr	r24
    554c:	86 95       	lsr	r24
    554e:	86 95       	lsr	r24
    5550:	98 2f       	mov	r25, r24
    5552:	91 70       	andi	r25, 0x01	; 1
    5554:	80 e0       	ldi	r24, 0x00	; 0
    5556:	67 e0       	ldi	r22, 0x07	; 7
    5558:	49 2f       	mov	r20, r25
    555a:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
		DIO_SetPinValue(Data_Port, D6, GET_BIT(character, 2));
    555e:	89 81       	ldd	r24, Y+1	; 0x01
    5560:	86 95       	lsr	r24
    5562:	86 95       	lsr	r24
    5564:	98 2f       	mov	r25, r24
    5566:	91 70       	andi	r25, 0x01	; 1
    5568:	80 e0       	ldi	r24, 0x00	; 0
    556a:	66 e0       	ldi	r22, 0x06	; 6
    556c:	49 2f       	mov	r20, r25
    556e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
		DIO_SetPinValue(Data_Port, D5, GET_BIT(character, 1));
    5572:	89 81       	ldd	r24, Y+1	; 0x01
    5574:	86 95       	lsr	r24
    5576:	98 2f       	mov	r25, r24
    5578:	91 70       	andi	r25, 0x01	; 1
    557a:	80 e0       	ldi	r24, 0x00	; 0
    557c:	65 e0       	ldi	r22, 0x05	; 5
    557e:	49 2f       	mov	r20, r25
    5580:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
		DIO_SetPinValue(Data_Port, D4, GET_BIT(character, 0));
    5584:	89 81       	ldd	r24, Y+1	; 0x01
    5586:	98 2f       	mov	r25, r24
    5588:	91 70       	andi	r25, 0x01	; 1
    558a:	80 e0       	ldi	r24, 0x00	; 0
    558c:	64 e0       	ldi	r22, 0x04	; 4
    558e:	49 2f       	mov	r20, r25
    5590:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
		LCD_EnablePulse();
    5594:	0e 94 bb 32 	call	0x6576	; 0x6576 <LCD_EnablePulse>
		LCD_DisablePulse();
    5598:	0e 94 45 33 	call	0x668a	; 0x668a <LCD_DisablePulse>
    559c:	08 c0       	rjmp	.+16     	; 0x55ae <LCD_SendChar+0x108>
		break;
	case _8bits:
		LCD_EnablePulse();
    559e:	0e 94 bb 32 	call	0x6576	; 0x6576 <LCD_EnablePulse>
		DIO_SetPortValue(Data_Port, character);
    55a2:	80 e0       	ldi	r24, 0x00	; 0
    55a4:	69 81       	ldd	r22, Y+1	; 0x01
    55a6:	0e 94 c7 18 	call	0x318e	; 0x318e <DIO_SetPortValue>
		LCD_DisablePulse();
    55aa:	0e 94 45 33 	call	0x668a	; 0x668a <LCD_DisablePulse>
		break;
	}
}
    55ae:	0f 90       	pop	r0
    55b0:	0f 90       	pop	r0
    55b2:	0f 90       	pop	r0
    55b4:	cf 91       	pop	r28
    55b6:	df 91       	pop	r29
    55b8:	08 95       	ret

000055ba <LCD_SendString>:

void LCD_SendString(u8_t * c){
    55ba:	df 93       	push	r29
    55bc:	cf 93       	push	r28
    55be:	00 d0       	rcall	.+0      	; 0x55c0 <LCD_SendString+0x6>
    55c0:	0f 92       	push	r0
    55c2:	cd b7       	in	r28, 0x3d	; 61
    55c4:	de b7       	in	r29, 0x3e	; 62
    55c6:	9b 83       	std	Y+3, r25	; 0x03
    55c8:	8a 83       	std	Y+2, r24	; 0x02
	for (u8_t i = 0; c[i]; i++){	// Iterates until c[i] is false meaning that it is a null operator '\0'
    55ca:	19 82       	std	Y+1, r1	; 0x01
    55cc:	0e c0       	rjmp	.+28     	; 0x55ea <LCD_SendString+0x30>
		LCD_SendChar(c[i]);
    55ce:	89 81       	ldd	r24, Y+1	; 0x01
    55d0:	28 2f       	mov	r18, r24
    55d2:	30 e0       	ldi	r19, 0x00	; 0
    55d4:	8a 81       	ldd	r24, Y+2	; 0x02
    55d6:	9b 81       	ldd	r25, Y+3	; 0x03
    55d8:	fc 01       	movw	r30, r24
    55da:	e2 0f       	add	r30, r18
    55dc:	f3 1f       	adc	r31, r19
    55de:	80 81       	ld	r24, Z
    55e0:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <LCD_SendChar>
		break;
	}
}

void LCD_SendString(u8_t * c){
	for (u8_t i = 0; c[i]; i++){	// Iterates until c[i] is false meaning that it is a null operator '\0'
    55e4:	89 81       	ldd	r24, Y+1	; 0x01
    55e6:	8f 5f       	subi	r24, 0xFF	; 255
    55e8:	89 83       	std	Y+1, r24	; 0x01
    55ea:	89 81       	ldd	r24, Y+1	; 0x01
    55ec:	28 2f       	mov	r18, r24
    55ee:	30 e0       	ldi	r19, 0x00	; 0
    55f0:	8a 81       	ldd	r24, Y+2	; 0x02
    55f2:	9b 81       	ldd	r25, Y+3	; 0x03
    55f4:	fc 01       	movw	r30, r24
    55f6:	e2 0f       	add	r30, r18
    55f8:	f3 1f       	adc	r31, r19
    55fa:	80 81       	ld	r24, Z
    55fc:	88 23       	and	r24, r24
    55fe:	39 f7       	brne	.-50     	; 0x55ce <LCD_SendString+0x14>
		LCD_SendChar(c[i]);
	}
}
    5600:	0f 90       	pop	r0
    5602:	0f 90       	pop	r0
    5604:	0f 90       	pop	r0
    5606:	cf 91       	pop	r28
    5608:	df 91       	pop	r29
    560a:	08 95       	ret

0000560c <LCD_SendNumber>:

void LCD_SendNumber(double num){
    560c:	0f 93       	push	r16
    560e:	1f 93       	push	r17
    5610:	df 93       	push	r29
    5612:	cf 93       	push	r28
    5614:	cd b7       	in	r28, 0x3d	; 61
    5616:	de b7       	in	r29, 0x3e	; 62
    5618:	a2 97       	sbiw	r28, 0x22	; 34
    561a:	0f b6       	in	r0, 0x3f	; 63
    561c:	f8 94       	cli
    561e:	de bf       	out	0x3e, r29	; 62
    5620:	0f be       	out	0x3f, r0	; 63
    5622:	cd bf       	out	0x3d, r28	; 61
    5624:	6e 8f       	std	Y+30, r22	; 0x1e
    5626:	7f 8f       	std	Y+31, r23	; 0x1f
    5628:	88 a3       	std	Y+32, r24	; 0x20
    562a:	99 a3       	std	Y+33, r25	; 0x21
	u32_t truncated = (u32_t) num;
    562c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    562e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    5630:	88 a1       	ldd	r24, Y+32	; 0x20
    5632:	99 a1       	ldd	r25, Y+33	; 0x21
    5634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5638:	dc 01       	movw	r26, r24
    563a:	cb 01       	movw	r24, r22
    563c:	8c 87       	std	Y+12, r24	; 0x0c
    563e:	9d 87       	std	Y+13, r25	; 0x0d
    5640:	ae 87       	std	Y+14, r26	; 0x0e
    5642:	bf 87       	std	Y+15, r27	; 0x0f
	u8_t counter = 0;
    5644:	1b 86       	std	Y+11, r1	; 0x0b
	if (truncated == num){
    5646:	6c 85       	ldd	r22, Y+12	; 0x0c
    5648:	7d 85       	ldd	r23, Y+13	; 0x0d
    564a:	8e 85       	ldd	r24, Y+14	; 0x0e
    564c:	9f 85       	ldd	r25, Y+15	; 0x0f
    564e:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    5652:	dc 01       	movw	r26, r24
    5654:	cb 01       	movw	r24, r22
    5656:	bc 01       	movw	r22, r24
    5658:	cd 01       	movw	r24, r26
    565a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    565c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    565e:	48 a1       	ldd	r20, Y+32	; 0x20
    5660:	59 a1       	ldd	r21, Y+33	; 0x21
    5662:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    5666:	88 23       	and	r24, r24
    5668:	09 f0       	breq	.+2      	; 0x566c <LCD_SendNumber+0x60>
    566a:	62 c0       	rjmp	.+196    	; 0x5730 <LCD_SendNumber+0x124>
		u32_t copy_truncated = truncated;
    566c:	8c 85       	ldd	r24, Y+12	; 0x0c
    566e:	9d 85       	ldd	r25, Y+13	; 0x0d
    5670:	ae 85       	ldd	r26, Y+14	; 0x0e
    5672:	bf 85       	ldd	r27, Y+15	; 0x0f
    5674:	8f 83       	std	Y+7, r24	; 0x07
    5676:	98 87       	std	Y+8, r25	; 0x08
    5678:	a9 87       	std	Y+9, r26	; 0x09
    567a:	ba 87       	std	Y+10, r27	; 0x0a
		u8_t int_list [10];
		if (copy_truncated == 0) {
    567c:	8f 81       	ldd	r24, Y+7	; 0x07
    567e:	98 85       	ldd	r25, Y+8	; 0x08
    5680:	a9 85       	ldd	r26, Y+9	; 0x09
    5682:	ba 85       	ldd	r27, Y+10	; 0x0a
    5684:	00 97       	sbiw	r24, 0x00	; 0
    5686:	a1 05       	cpc	r26, r1
    5688:	b1 05       	cpc	r27, r1
    568a:	91 f5       	brne	.+100    	; 0x56f0 <LCD_SendNumber+0xe4>
			LCD_SendChar('0');
    568c:	80 e3       	ldi	r24, 0x30	; 48
    568e:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <LCD_SendChar>
    5692:	2e c0       	rjmp	.+92     	; 0x56f0 <LCD_SendNumber+0xe4>
		}
		while(copy_truncated){
			int_list[counter] = copy_truncated % 10 + '0';
    5694:	8b 85       	ldd	r24, Y+11	; 0x0b
    5696:	08 2f       	mov	r16, r24
    5698:	10 e0       	ldi	r17, 0x00	; 0
    569a:	8f 81       	ldd	r24, Y+7	; 0x07
    569c:	98 85       	ldd	r25, Y+8	; 0x08
    569e:	a9 85       	ldd	r26, Y+9	; 0x09
    56a0:	ba 85       	ldd	r27, Y+10	; 0x0a
    56a2:	2a e0       	ldi	r18, 0x0A	; 10
    56a4:	30 e0       	ldi	r19, 0x00	; 0
    56a6:	40 e0       	ldi	r20, 0x00	; 0
    56a8:	50 e0       	ldi	r21, 0x00	; 0
    56aa:	bc 01       	movw	r22, r24
    56ac:	cd 01       	movw	r24, r26
    56ae:	0e 94 c9 35 	call	0x6b92	; 0x6b92 <__udivmodsi4>
    56b2:	dc 01       	movw	r26, r24
    56b4:	cb 01       	movw	r24, r22
    56b6:	28 2f       	mov	r18, r24
    56b8:	20 5d       	subi	r18, 0xD0	; 208
    56ba:	ce 01       	movw	r24, r28
    56bc:	40 96       	adiw	r24, 0x10	; 16
    56be:	fc 01       	movw	r30, r24
    56c0:	e0 0f       	add	r30, r16
    56c2:	f1 1f       	adc	r31, r17
    56c4:	20 83       	st	Z, r18
			copy_truncated /= 10;
    56c6:	8f 81       	ldd	r24, Y+7	; 0x07
    56c8:	98 85       	ldd	r25, Y+8	; 0x08
    56ca:	a9 85       	ldd	r26, Y+9	; 0x09
    56cc:	ba 85       	ldd	r27, Y+10	; 0x0a
    56ce:	2a e0       	ldi	r18, 0x0A	; 10
    56d0:	30 e0       	ldi	r19, 0x00	; 0
    56d2:	40 e0       	ldi	r20, 0x00	; 0
    56d4:	50 e0       	ldi	r21, 0x00	; 0
    56d6:	bc 01       	movw	r22, r24
    56d8:	cd 01       	movw	r24, r26
    56da:	0e 94 c9 35 	call	0x6b92	; 0x6b92 <__udivmodsi4>
    56de:	da 01       	movw	r26, r20
    56e0:	c9 01       	movw	r24, r18
    56e2:	8f 83       	std	Y+7, r24	; 0x07
    56e4:	98 87       	std	Y+8, r25	; 0x08
    56e6:	a9 87       	std	Y+9, r26	; 0x09
    56e8:	ba 87       	std	Y+10, r27	; 0x0a
			counter ++;
    56ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    56ec:	8f 5f       	subi	r24, 0xFF	; 255
    56ee:	8b 87       	std	Y+11, r24	; 0x0b
		u32_t copy_truncated = truncated;
		u8_t int_list [10];
		if (copy_truncated == 0) {
			LCD_SendChar('0');
		}
		while(copy_truncated){
    56f0:	8f 81       	ldd	r24, Y+7	; 0x07
    56f2:	98 85       	ldd	r25, Y+8	; 0x08
    56f4:	a9 85       	ldd	r26, Y+9	; 0x09
    56f6:	ba 85       	ldd	r27, Y+10	; 0x0a
    56f8:	00 97       	sbiw	r24, 0x00	; 0
    56fa:	a1 05       	cpc	r26, r1
    56fc:	b1 05       	cpc	r27, r1
    56fe:	51 f6       	brne	.-108    	; 0x5694 <LCD_SendNumber+0x88>
			int_list[counter] = copy_truncated % 10 + '0';
			copy_truncated /= 10;
			counter ++;
		}
		for (u8_t i = counter; i > 0; i--){
    5700:	8b 85       	ldd	r24, Y+11	; 0x0b
    5702:	8e 83       	std	Y+6, r24	; 0x06
    5704:	11 c0       	rjmp	.+34     	; 0x5728 <LCD_SendNumber+0x11c>
			LCD_SendChar(int_list[i-1]);
    5706:	8e 81       	ldd	r24, Y+6	; 0x06
    5708:	88 2f       	mov	r24, r24
    570a:	90 e0       	ldi	r25, 0x00	; 0
    570c:	9c 01       	movw	r18, r24
    570e:	21 50       	subi	r18, 0x01	; 1
    5710:	30 40       	sbci	r19, 0x00	; 0
    5712:	ce 01       	movw	r24, r28
    5714:	40 96       	adiw	r24, 0x10	; 16
    5716:	fc 01       	movw	r30, r24
    5718:	e2 0f       	add	r30, r18
    571a:	f3 1f       	adc	r31, r19
    571c:	80 81       	ld	r24, Z
    571e:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <LCD_SendChar>
		while(copy_truncated){
			int_list[counter] = copy_truncated % 10 + '0';
			copy_truncated /= 10;
			counter ++;
		}
		for (u8_t i = counter; i > 0; i--){
    5722:	8e 81       	ldd	r24, Y+6	; 0x06
    5724:	81 50       	subi	r24, 0x01	; 1
    5726:	8e 83       	std	Y+6, r24	; 0x06
    5728:	8e 81       	ldd	r24, Y+6	; 0x06
    572a:	88 23       	and	r24, r24
    572c:	61 f7       	brne	.-40     	; 0x5706 <LCD_SendNumber+0xfa>
    572e:	af c0       	rjmp	.+350    	; 0x588e <LCD_SendNumber+0x282>
			LCD_SendChar(int_list[i-1]);
		}
	}
	else{
		LCD_SendNumber(truncated);
    5730:	6c 85       	ldd	r22, Y+12	; 0x0c
    5732:	7d 85       	ldd	r23, Y+13	; 0x0d
    5734:	8e 85       	ldd	r24, Y+14	; 0x0e
    5736:	9f 85       	ldd	r25, Y+15	; 0x0f
    5738:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    573c:	dc 01       	movw	r26, r24
    573e:	cb 01       	movw	r24, r22
    5740:	bc 01       	movw	r22, r24
    5742:	cd 01       	movw	r24, r26
    5744:	0e 94 06 2b 	call	0x560c	; 0x560c <LCD_SendNumber>
		u8_t fractional_list [4];
		double fractional = num - truncated + 0.00001;
    5748:	6c 85       	ldd	r22, Y+12	; 0x0c
    574a:	7d 85       	ldd	r23, Y+13	; 0x0d
    574c:	8e 85       	ldd	r24, Y+14	; 0x0e
    574e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5750:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    5754:	9b 01       	movw	r18, r22
    5756:	ac 01       	movw	r20, r24
    5758:	6e 8d       	ldd	r22, Y+30	; 0x1e
    575a:	7f 8d       	ldd	r23, Y+31	; 0x1f
    575c:	88 a1       	ldd	r24, Y+32	; 0x20
    575e:	99 a1       	ldd	r25, Y+33	; 0x21
    5760:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5764:	dc 01       	movw	r26, r24
    5766:	cb 01       	movw	r24, r22
    5768:	bc 01       	movw	r22, r24
    576a:	cd 01       	movw	r24, r26
    576c:	2c ea       	ldi	r18, 0xAC	; 172
    576e:	35 ec       	ldi	r19, 0xC5	; 197
    5770:	47 e2       	ldi	r20, 0x27	; 39
    5772:	57 e3       	ldi	r21, 0x37	; 55
    5774:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5778:	dc 01       	movw	r26, r24
    577a:	cb 01       	movw	r24, r22
    577c:	8a 83       	std	Y+2, r24	; 0x02
    577e:	9b 83       	std	Y+3, r25	; 0x03
    5780:	ac 83       	std	Y+4, r26	; 0x04
    5782:	bd 83       	std	Y+5, r27	; 0x05
		counter = 0;
    5784:	1b 86       	std	Y+11, r1	; 0x0b
		do{
			fractional *= 10;
    5786:	6a 81       	ldd	r22, Y+2	; 0x02
    5788:	7b 81       	ldd	r23, Y+3	; 0x03
    578a:	8c 81       	ldd	r24, Y+4	; 0x04
    578c:	9d 81       	ldd	r25, Y+5	; 0x05
    578e:	20 e0       	ldi	r18, 0x00	; 0
    5790:	30 e0       	ldi	r19, 0x00	; 0
    5792:	40 e2       	ldi	r20, 0x20	; 32
    5794:	51 e4       	ldi	r21, 0x41	; 65
    5796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    579a:	dc 01       	movw	r26, r24
    579c:	cb 01       	movw	r24, r22
    579e:	8a 83       	std	Y+2, r24	; 0x02
    57a0:	9b 83       	std	Y+3, r25	; 0x03
    57a2:	ac 83       	std	Y+4, r26	; 0x04
    57a4:	bd 83       	std	Y+5, r27	; 0x05
			truncated = (u8_t) fractional;
    57a6:	6a 81       	ldd	r22, Y+2	; 0x02
    57a8:	7b 81       	ldd	r23, Y+3	; 0x03
    57aa:	8c 81       	ldd	r24, Y+4	; 0x04
    57ac:	9d 81       	ldd	r25, Y+5	; 0x05
    57ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57b2:	dc 01       	movw	r26, r24
    57b4:	cb 01       	movw	r24, r22
    57b6:	88 2f       	mov	r24, r24
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	a0 e0       	ldi	r26, 0x00	; 0
    57bc:	b0 e0       	ldi	r27, 0x00	; 0
    57be:	8c 87       	std	Y+12, r24	; 0x0c
    57c0:	9d 87       	std	Y+13, r25	; 0x0d
    57c2:	ae 87       	std	Y+14, r26	; 0x0e
    57c4:	bf 87       	std	Y+15, r27	; 0x0f
			fractional_list[counter] = truncated + '0';
    57c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    57c8:	28 2f       	mov	r18, r24
    57ca:	30 e0       	ldi	r19, 0x00	; 0
    57cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    57ce:	48 2f       	mov	r20, r24
    57d0:	40 5d       	subi	r20, 0xD0	; 208
    57d2:	ce 01       	movw	r24, r28
    57d4:	4a 96       	adiw	r24, 0x1a	; 26
    57d6:	fc 01       	movw	r30, r24
    57d8:	e2 0f       	add	r30, r18
    57da:	f3 1f       	adc	r31, r19
    57dc:	40 83       	st	Z, r20
			fractional -= truncated;
    57de:	6c 85       	ldd	r22, Y+12	; 0x0c
    57e0:	7d 85       	ldd	r23, Y+13	; 0x0d
    57e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    57e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    57e6:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    57ea:	9b 01       	movw	r18, r22
    57ec:	ac 01       	movw	r20, r24
    57ee:	6a 81       	ldd	r22, Y+2	; 0x02
    57f0:	7b 81       	ldd	r23, Y+3	; 0x03
    57f2:	8c 81       	ldd	r24, Y+4	; 0x04
    57f4:	9d 81       	ldd	r25, Y+5	; 0x05
    57f6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    57fa:	dc 01       	movw	r26, r24
    57fc:	cb 01       	movw	r24, r22
    57fe:	8a 83       	std	Y+2, r24	; 0x02
    5800:	9b 83       	std	Y+3, r25	; 0x03
    5802:	ac 83       	std	Y+4, r26	; 0x04
    5804:	bd 83       	std	Y+5, r27	; 0x05
			counter ++;
    5806:	8b 85       	ldd	r24, Y+11	; 0x0b
    5808:	8f 5f       	subi	r24, 0xFF	; 255
    580a:	8b 87       	std	Y+11, r24	; 0x0b
		}
		while(fractional != 0 && counter < 4);
    580c:	1a a2       	std	Y+34, r1	; 0x22
    580e:	6a 81       	ldd	r22, Y+2	; 0x02
    5810:	7b 81       	ldd	r23, Y+3	; 0x03
    5812:	8c 81       	ldd	r24, Y+4	; 0x04
    5814:	9d 81       	ldd	r25, Y+5	; 0x05
    5816:	20 e0       	ldi	r18, 0x00	; 0
    5818:	30 e0       	ldi	r19, 0x00	; 0
    581a:	40 e0       	ldi	r20, 0x00	; 0
    581c:	50 e0       	ldi	r21, 0x00	; 0
    581e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__nesf2>
    5822:	88 23       	and	r24, r24
    5824:	11 f0       	breq	.+4      	; 0x582a <LCD_SendNumber+0x21e>
    5826:	81 e0       	ldi	r24, 0x01	; 1
    5828:	8a a3       	std	Y+34, r24	; 0x22
    582a:	81 e0       	ldi	r24, 0x01	; 1
    582c:	9a a1       	ldd	r25, Y+34	; 0x22
    582e:	89 27       	eor	r24, r25
    5830:	88 23       	and	r24, r24
    5832:	21 f4       	brne	.+8      	; 0x583c <LCD_SendNumber+0x230>
    5834:	8b 85       	ldd	r24, Y+11	; 0x0b
    5836:	84 30       	cpi	r24, 0x04	; 4
    5838:	08 f4       	brcc	.+2      	; 0x583c <LCD_SendNumber+0x230>
    583a:	a5 cf       	rjmp	.-182    	; 0x5786 <LCD_SendNumber+0x17a>
		LCD_SendChar('.');				// Print the decimal point
    583c:	8e e2       	ldi	r24, 0x2E	; 46
    583e:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <LCD_SendChar>
    5842:	03 c0       	rjmp	.+6      	; 0x584a <LCD_SendNumber+0x23e>
		while (fractional_list [counter - 1] == '0'){
			counter--;
    5844:	8b 85       	ldd	r24, Y+11	; 0x0b
    5846:	81 50       	subi	r24, 0x01	; 1
    5848:	8b 87       	std	Y+11, r24	; 0x0b
			fractional -= truncated;
			counter ++;
		}
		while(fractional != 0 && counter < 4);
		LCD_SendChar('.');				// Print the decimal point
		while (fractional_list [counter - 1] == '0'){
    584a:	8b 85       	ldd	r24, Y+11	; 0x0b
    584c:	88 2f       	mov	r24, r24
    584e:	90 e0       	ldi	r25, 0x00	; 0
    5850:	9c 01       	movw	r18, r24
    5852:	21 50       	subi	r18, 0x01	; 1
    5854:	30 40       	sbci	r19, 0x00	; 0
    5856:	ce 01       	movw	r24, r28
    5858:	4a 96       	adiw	r24, 0x1a	; 26
    585a:	fc 01       	movw	r30, r24
    585c:	e2 0f       	add	r30, r18
    585e:	f3 1f       	adc	r31, r19
    5860:	80 81       	ld	r24, Z
    5862:	80 33       	cpi	r24, 0x30	; 48
    5864:	79 f3       	breq	.-34     	; 0x5844 <LCD_SendNumber+0x238>
			counter--;
		}
		for (u8_t i = 0; i < counter; i++){
    5866:	19 82       	std	Y+1, r1	; 0x01
    5868:	0e c0       	rjmp	.+28     	; 0x5886 <LCD_SendNumber+0x27a>
			LCD_SendChar(fractional_list[i]);
    586a:	89 81       	ldd	r24, Y+1	; 0x01
    586c:	28 2f       	mov	r18, r24
    586e:	30 e0       	ldi	r19, 0x00	; 0
    5870:	ce 01       	movw	r24, r28
    5872:	4a 96       	adiw	r24, 0x1a	; 26
    5874:	fc 01       	movw	r30, r24
    5876:	e2 0f       	add	r30, r18
    5878:	f3 1f       	adc	r31, r19
    587a:	80 81       	ld	r24, Z
    587c:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <LCD_SendChar>
		while(fractional != 0 && counter < 4);
		LCD_SendChar('.');				// Print the decimal point
		while (fractional_list [counter - 1] == '0'){
			counter--;
		}
		for (u8_t i = 0; i < counter; i++){
    5880:	89 81       	ldd	r24, Y+1	; 0x01
    5882:	8f 5f       	subi	r24, 0xFF	; 255
    5884:	89 83       	std	Y+1, r24	; 0x01
    5886:	99 81       	ldd	r25, Y+1	; 0x01
    5888:	8b 85       	ldd	r24, Y+11	; 0x0b
    588a:	98 17       	cp	r25, r24
    588c:	70 f3       	brcs	.-36     	; 0x586a <LCD_SendNumber+0x25e>
			LCD_SendChar(fractional_list[i]);
		}
	}
}
    588e:	a2 96       	adiw	r28, 0x22	; 34
    5890:	0f b6       	in	r0, 0x3f	; 63
    5892:	f8 94       	cli
    5894:	de bf       	out	0x3e, r29	; 62
    5896:	0f be       	out	0x3f, r0	; 63
    5898:	cd bf       	out	0x3d, r28	; 61
    589a:	cf 91       	pop	r28
    589c:	df 91       	pop	r29
    589e:	1f 91       	pop	r17
    58a0:	0f 91       	pop	r16
    58a2:	08 95       	ret

000058a4 <LCD_GoToPosition>:

void LCD_GoToPosition(LCD_rows row, u8_t col){
    58a4:	df 93       	push	r29
    58a6:	cf 93       	push	r28
    58a8:	00 d0       	rcall	.+0      	; 0x58aa <LCD_GoToPosition+0x6>
    58aa:	00 d0       	rcall	.+0      	; 0x58ac <LCD_GoToPosition+0x8>
    58ac:	cd b7       	in	r28, 0x3d	; 61
    58ae:	de b7       	in	r29, 0x3e	; 62
    58b0:	89 83       	std	Y+1, r24	; 0x01
    58b2:	6a 83       	std	Y+2, r22	; 0x02
	switch (row){
    58b4:	89 81       	ldd	r24, Y+1	; 0x01
    58b6:	28 2f       	mov	r18, r24
    58b8:	30 e0       	ldi	r19, 0x00	; 0
    58ba:	3c 83       	std	Y+4, r19	; 0x04
    58bc:	2b 83       	std	Y+3, r18	; 0x03
    58be:	8b 81       	ldd	r24, Y+3	; 0x03
    58c0:	9c 81       	ldd	r25, Y+4	; 0x04
    58c2:	00 97       	sbiw	r24, 0x00	; 0
    58c4:	31 f0       	breq	.+12     	; 0x58d2 <LCD_GoToPosition+0x2e>
    58c6:	2b 81       	ldd	r18, Y+3	; 0x03
    58c8:	3c 81       	ldd	r19, Y+4	; 0x04
    58ca:	21 30       	cpi	r18, 0x01	; 1
    58cc:	31 05       	cpc	r19, r1
    58ce:	29 f0       	breq	.+10     	; 0x58da <LCD_GoToPosition+0x36>
    58d0:	08 c0       	rjmp	.+16     	; 0x58e2 <LCD_GoToPosition+0x3e>
	// Upper row positions ranges from 0x00 (col = 0) to 0x0f (col = 15)
	case UPPER_ROW:
		LCD_SetDDRAMAddress(col);
    58d2:	8a 81       	ldd	r24, Y+2	; 0x02
    58d4:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <LCD_SetDDRAMAddress>
    58d8:	04 c0       	rjmp	.+8      	; 0x58e2 <LCD_GoToPosition+0x3e>
		break;
	// Upper row positions ranges from 0x40 (col = 0) to 0x4f (col = 15)
	case LOWER_ROW:
		LCD_SetDDRAMAddress(0x40 + col);
    58da:	8a 81       	ldd	r24, Y+2	; 0x02
    58dc:	80 5c       	subi	r24, 0xC0	; 192
    58de:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <LCD_SetDDRAMAddress>
		break;
	}
}
    58e2:	0f 90       	pop	r0
    58e4:	0f 90       	pop	r0
    58e6:	0f 90       	pop	r0
    58e8:	0f 90       	pop	r0
    58ea:	cf 91       	pop	r28
    58ec:	df 91       	pop	r29
    58ee:	08 95       	ret

000058f0 <LCD_Clear>:

void LCD_Clear(void){
    58f0:	df 93       	push	r29
    58f2:	cf 93       	push	r28
    58f4:	cd b7       	in	r28, 0x3d	; 61
    58f6:	de b7       	in	r29, 0x3e	; 62
	LCD_SendInstruction(1<<D0);
    58f8:	81 e0       	ldi	r24, 0x01	; 1
    58fa:	0e 94 92 28 	call	0x5124	; 0x5124 <LCD_SendInstruction>
}
    58fe:	cf 91       	pop	r28
    5900:	df 91       	pop	r29
    5902:	08 95       	ret

00005904 <LCD_ReturnHome>:

void LCD_ReturnHome(void){
    5904:	df 93       	push	r29
    5906:	cf 93       	push	r28
    5908:	cd b7       	in	r28, 0x3d	; 61
    590a:	de b7       	in	r29, 0x3e	; 62
    590c:	68 97       	sbiw	r28, 0x18	; 24
    590e:	0f b6       	in	r0, 0x3f	; 63
    5910:	f8 94       	cli
    5912:	de bf       	out	0x3e, r29	; 62
    5914:	0f be       	out	0x3f, r0	; 63
    5916:	cd bf       	out	0x3d, r28	; 61
	LCD_SendInstruction(1<<D1);
    5918:	82 e0       	ldi	r24, 0x02	; 2
    591a:	0e 94 92 28 	call	0x5124	; 0x5124 <LCD_SendInstruction>
    591e:	80 e0       	ldi	r24, 0x00	; 0
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	a0 e0       	ldi	r26, 0x00	; 0
    5924:	b0 e0       	ldi	r27, 0x00	; 0
    5926:	8d 8b       	std	Y+21, r24	; 0x15
    5928:	9e 8b       	std	Y+22, r25	; 0x16
    592a:	af 8b       	std	Y+23, r26	; 0x17
    592c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    592e:	6d 89       	ldd	r22, Y+21	; 0x15
    5930:	7e 89       	ldd	r23, Y+22	; 0x16
    5932:	8f 89       	ldd	r24, Y+23	; 0x17
    5934:	98 8d       	ldd	r25, Y+24	; 0x18
    5936:	2b ea       	ldi	r18, 0xAB	; 171
    5938:	3a ea       	ldi	r19, 0xAA	; 170
    593a:	4a ea       	ldi	r20, 0xAA	; 170
    593c:	50 e4       	ldi	r21, 0x40	; 64
    593e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5942:	dc 01       	movw	r26, r24
    5944:	cb 01       	movw	r24, r22
    5946:	89 8b       	std	Y+17, r24	; 0x11
    5948:	9a 8b       	std	Y+18, r25	; 0x12
    594a:	ab 8b       	std	Y+19, r26	; 0x13
    594c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    594e:	69 89       	ldd	r22, Y+17	; 0x11
    5950:	7a 89       	ldd	r23, Y+18	; 0x12
    5952:	8b 89       	ldd	r24, Y+19	; 0x13
    5954:	9c 89       	ldd	r25, Y+20	; 0x14
    5956:	20 e0       	ldi	r18, 0x00	; 0
    5958:	30 e0       	ldi	r19, 0x00	; 0
    595a:	40 e8       	ldi	r20, 0x80	; 128
    595c:	5f e3       	ldi	r21, 0x3F	; 63
    595e:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    5962:	88 23       	and	r24, r24
    5964:	1c f4       	brge	.+6      	; 0x596c <LCD_ReturnHome+0x68>
		__ticks = 1;
    5966:	81 e0       	ldi	r24, 0x01	; 1
    5968:	88 8b       	std	Y+16, r24	; 0x10
    596a:	91 c0       	rjmp	.+290    	; 0x5a8e <LCD_ReturnHome+0x18a>
	else if (__tmp > 255)
    596c:	69 89       	ldd	r22, Y+17	; 0x11
    596e:	7a 89       	ldd	r23, Y+18	; 0x12
    5970:	8b 89       	ldd	r24, Y+19	; 0x13
    5972:	9c 89       	ldd	r25, Y+20	; 0x14
    5974:	20 e0       	ldi	r18, 0x00	; 0
    5976:	30 e0       	ldi	r19, 0x00	; 0
    5978:	4f e7       	ldi	r20, 0x7F	; 127
    597a:	53 e4       	ldi	r21, 0x43	; 67
    597c:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    5980:	18 16       	cp	r1, r24
    5982:	0c f0       	brlt	.+2      	; 0x5986 <LCD_ReturnHome+0x82>
    5984:	7b c0       	rjmp	.+246    	; 0x5a7c <LCD_ReturnHome+0x178>
	{
		_delay_ms(__us / 1000.0);
    5986:	6d 89       	ldd	r22, Y+21	; 0x15
    5988:	7e 89       	ldd	r23, Y+22	; 0x16
    598a:	8f 89       	ldd	r24, Y+23	; 0x17
    598c:	98 8d       	ldd	r25, Y+24	; 0x18
    598e:	20 e0       	ldi	r18, 0x00	; 0
    5990:	30 e0       	ldi	r19, 0x00	; 0
    5992:	4a e7       	ldi	r20, 0x7A	; 122
    5994:	54 e4       	ldi	r21, 0x44	; 68
    5996:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    599a:	dc 01       	movw	r26, r24
    599c:	cb 01       	movw	r24, r22
    599e:	8c 87       	std	Y+12, r24	; 0x0c
    59a0:	9d 87       	std	Y+13, r25	; 0x0d
    59a2:	ae 87       	std	Y+14, r26	; 0x0e
    59a4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59a6:	6c 85       	ldd	r22, Y+12	; 0x0c
    59a8:	7d 85       	ldd	r23, Y+13	; 0x0d
    59aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    59ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    59ae:	20 e0       	ldi	r18, 0x00	; 0
    59b0:	30 e0       	ldi	r19, 0x00	; 0
    59b2:	4a e7       	ldi	r20, 0x7A	; 122
    59b4:	55 e4       	ldi	r21, 0x45	; 69
    59b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59ba:	dc 01       	movw	r26, r24
    59bc:	cb 01       	movw	r24, r22
    59be:	88 87       	std	Y+8, r24	; 0x08
    59c0:	99 87       	std	Y+9, r25	; 0x09
    59c2:	aa 87       	std	Y+10, r26	; 0x0a
    59c4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    59c6:	68 85       	ldd	r22, Y+8	; 0x08
    59c8:	79 85       	ldd	r23, Y+9	; 0x09
    59ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    59cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    59ce:	20 e0       	ldi	r18, 0x00	; 0
    59d0:	30 e0       	ldi	r19, 0x00	; 0
    59d2:	40 e8       	ldi	r20, 0x80	; 128
    59d4:	5f e3       	ldi	r21, 0x3F	; 63
    59d6:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    59da:	88 23       	and	r24, r24
    59dc:	2c f4       	brge	.+10     	; 0x59e8 <LCD_ReturnHome+0xe4>
		__ticks = 1;
    59de:	81 e0       	ldi	r24, 0x01	; 1
    59e0:	90 e0       	ldi	r25, 0x00	; 0
    59e2:	9f 83       	std	Y+7, r25	; 0x07
    59e4:	8e 83       	std	Y+6, r24	; 0x06
    59e6:	3f c0       	rjmp	.+126    	; 0x5a66 <LCD_ReturnHome+0x162>
	else if (__tmp > 65535)
    59e8:	68 85       	ldd	r22, Y+8	; 0x08
    59ea:	79 85       	ldd	r23, Y+9	; 0x09
    59ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    59ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    59f0:	20 e0       	ldi	r18, 0x00	; 0
    59f2:	3f ef       	ldi	r19, 0xFF	; 255
    59f4:	4f e7       	ldi	r20, 0x7F	; 127
    59f6:	57 e4       	ldi	r21, 0x47	; 71
    59f8:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    59fc:	18 16       	cp	r1, r24
    59fe:	4c f5       	brge	.+82     	; 0x5a52 <LCD_ReturnHome+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a00:	6c 85       	ldd	r22, Y+12	; 0x0c
    5a02:	7d 85       	ldd	r23, Y+13	; 0x0d
    5a04:	8e 85       	ldd	r24, Y+14	; 0x0e
    5a06:	9f 85       	ldd	r25, Y+15	; 0x0f
    5a08:	20 e0       	ldi	r18, 0x00	; 0
    5a0a:	30 e0       	ldi	r19, 0x00	; 0
    5a0c:	40 e2       	ldi	r20, 0x20	; 32
    5a0e:	51 e4       	ldi	r21, 0x41	; 65
    5a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a14:	dc 01       	movw	r26, r24
    5a16:	cb 01       	movw	r24, r22
    5a18:	bc 01       	movw	r22, r24
    5a1a:	cd 01       	movw	r24, r26
    5a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a20:	dc 01       	movw	r26, r24
    5a22:	cb 01       	movw	r24, r22
    5a24:	9f 83       	std	Y+7, r25	; 0x07
    5a26:	8e 83       	std	Y+6, r24	; 0x06
    5a28:	0f c0       	rjmp	.+30     	; 0x5a48 <LCD_ReturnHome+0x144>
    5a2a:	80 e9       	ldi	r24, 0x90	; 144
    5a2c:	91 e0       	ldi	r25, 0x01	; 1
    5a2e:	9d 83       	std	Y+5, r25	; 0x05
    5a30:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5a32:	8c 81       	ldd	r24, Y+4	; 0x04
    5a34:	9d 81       	ldd	r25, Y+5	; 0x05
    5a36:	01 97       	sbiw	r24, 0x01	; 1
    5a38:	f1 f7       	brne	.-4      	; 0x5a36 <LCD_ReturnHome+0x132>
    5a3a:	9d 83       	std	Y+5, r25	; 0x05
    5a3c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a3e:	8e 81       	ldd	r24, Y+6	; 0x06
    5a40:	9f 81       	ldd	r25, Y+7	; 0x07
    5a42:	01 97       	sbiw	r24, 0x01	; 1
    5a44:	9f 83       	std	Y+7, r25	; 0x07
    5a46:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a48:	8e 81       	ldd	r24, Y+6	; 0x06
    5a4a:	9f 81       	ldd	r25, Y+7	; 0x07
    5a4c:	00 97       	sbiw	r24, 0x00	; 0
    5a4e:	69 f7       	brne	.-38     	; 0x5a2a <LCD_ReturnHome+0x126>
    5a50:	24 c0       	rjmp	.+72     	; 0x5a9a <LCD_ReturnHome+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a52:	68 85       	ldd	r22, Y+8	; 0x08
    5a54:	79 85       	ldd	r23, Y+9	; 0x09
    5a56:	8a 85       	ldd	r24, Y+10	; 0x0a
    5a58:	9b 85       	ldd	r25, Y+11	; 0x0b
    5a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a5e:	dc 01       	movw	r26, r24
    5a60:	cb 01       	movw	r24, r22
    5a62:	9f 83       	std	Y+7, r25	; 0x07
    5a64:	8e 83       	std	Y+6, r24	; 0x06
    5a66:	8e 81       	ldd	r24, Y+6	; 0x06
    5a68:	9f 81       	ldd	r25, Y+7	; 0x07
    5a6a:	9b 83       	std	Y+3, r25	; 0x03
    5a6c:	8a 83       	std	Y+2, r24	; 0x02
    5a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    5a70:	9b 81       	ldd	r25, Y+3	; 0x03
    5a72:	01 97       	sbiw	r24, 0x01	; 1
    5a74:	f1 f7       	brne	.-4      	; 0x5a72 <LCD_ReturnHome+0x16e>
    5a76:	9b 83       	std	Y+3, r25	; 0x03
    5a78:	8a 83       	std	Y+2, r24	; 0x02
    5a7a:	0f c0       	rjmp	.+30     	; 0x5a9a <LCD_ReturnHome+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5a7c:	69 89       	ldd	r22, Y+17	; 0x11
    5a7e:	7a 89       	ldd	r23, Y+18	; 0x12
    5a80:	8b 89       	ldd	r24, Y+19	; 0x13
    5a82:	9c 89       	ldd	r25, Y+20	; 0x14
    5a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a88:	dc 01       	movw	r26, r24
    5a8a:	cb 01       	movw	r24, r22
    5a8c:	88 8b       	std	Y+16, r24	; 0x10
    5a8e:	88 89       	ldd	r24, Y+16	; 0x10
    5a90:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5a92:	89 81       	ldd	r24, Y+1	; 0x01
    5a94:	8a 95       	dec	r24
    5a96:	f1 f7       	brne	.-4      	; 0x5a94 <LCD_ReturnHome+0x190>
    5a98:	89 83       	std	Y+1, r24	; 0x01
	// The maximum execution time is 1520us for 270KHz f(OSC), So it is converted to match our 16MHz f(OSC).
	_delay_us(1520*(float)(270/16000));
}
    5a9a:	68 96       	adiw	r28, 0x18	; 24
    5a9c:	0f b6       	in	r0, 0x3f	; 63
    5a9e:	f8 94       	cli
    5aa0:	de bf       	out	0x3e, r29	; 62
    5aa2:	0f be       	out	0x3f, r0	; 63
    5aa4:	cd bf       	out	0x3d, r28	; 61
    5aa6:	cf 91       	pop	r28
    5aa8:	df 91       	pop	r29
    5aaa:	08 95       	ret

00005aac <LCD_EntryModeSet>:

void LCD_EntryModeSet(u8_t cursor_move, u8_t display_shift){
    5aac:	df 93       	push	r29
    5aae:	cf 93       	push	r28
    5ab0:	cd b7       	in	r28, 0x3d	; 61
    5ab2:	de b7       	in	r29, 0x3e	; 62
    5ab4:	6a 97       	sbiw	r28, 0x1a	; 26
    5ab6:	0f b6       	in	r0, 0x3f	; 63
    5ab8:	f8 94       	cli
    5aba:	de bf       	out	0x3e, r29	; 62
    5abc:	0f be       	out	0x3f, r0	; 63
    5abe:	cd bf       	out	0x3d, r28	; 61
    5ac0:	89 8f       	std	Y+25, r24	; 0x19
    5ac2:	6a 8f       	std	Y+26, r22	; 0x1a
	LCD_SendInstruction((1 << D2) | ((1 & cursor_move) << D1) | ((1 & display_shift) << D0));
    5ac4:	89 8d       	ldd	r24, Y+25	; 0x19
    5ac6:	88 2f       	mov	r24, r24
    5ac8:	90 e0       	ldi	r25, 0x00	; 0
    5aca:	81 70       	andi	r24, 0x01	; 1
    5acc:	90 70       	andi	r25, 0x00	; 0
    5ace:	88 0f       	add	r24, r24
    5ad0:	99 1f       	adc	r25, r25
    5ad2:	98 2f       	mov	r25, r24
    5ad4:	94 60       	ori	r25, 0x04	; 4
    5ad6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5ad8:	81 70       	andi	r24, 0x01	; 1
    5ada:	89 2b       	or	r24, r25
    5adc:	0e 94 92 28 	call	0x5124	; 0x5124 <LCD_SendInstruction>
    5ae0:	80 e0       	ldi	r24, 0x00	; 0
    5ae2:	90 e0       	ldi	r25, 0x00	; 0
    5ae4:	a0 e8       	ldi	r26, 0x80	; 128
    5ae6:	bf e3       	ldi	r27, 0x3F	; 63
    5ae8:	8d 8b       	std	Y+21, r24	; 0x15
    5aea:	9e 8b       	std	Y+22, r25	; 0x16
    5aec:	af 8b       	std	Y+23, r26	; 0x17
    5aee:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5af0:	6d 89       	ldd	r22, Y+21	; 0x15
    5af2:	7e 89       	ldd	r23, Y+22	; 0x16
    5af4:	8f 89       	ldd	r24, Y+23	; 0x17
    5af6:	98 8d       	ldd	r25, Y+24	; 0x18
    5af8:	2b ea       	ldi	r18, 0xAB	; 171
    5afa:	3a ea       	ldi	r19, 0xAA	; 170
    5afc:	4a ea       	ldi	r20, 0xAA	; 170
    5afe:	50 e4       	ldi	r21, 0x40	; 64
    5b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b04:	dc 01       	movw	r26, r24
    5b06:	cb 01       	movw	r24, r22
    5b08:	89 8b       	std	Y+17, r24	; 0x11
    5b0a:	9a 8b       	std	Y+18, r25	; 0x12
    5b0c:	ab 8b       	std	Y+19, r26	; 0x13
    5b0e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5b10:	69 89       	ldd	r22, Y+17	; 0x11
    5b12:	7a 89       	ldd	r23, Y+18	; 0x12
    5b14:	8b 89       	ldd	r24, Y+19	; 0x13
    5b16:	9c 89       	ldd	r25, Y+20	; 0x14
    5b18:	20 e0       	ldi	r18, 0x00	; 0
    5b1a:	30 e0       	ldi	r19, 0x00	; 0
    5b1c:	40 e8       	ldi	r20, 0x80	; 128
    5b1e:	5f e3       	ldi	r21, 0x3F	; 63
    5b20:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    5b24:	88 23       	and	r24, r24
    5b26:	1c f4       	brge	.+6      	; 0x5b2e <LCD_EntryModeSet+0x82>
		__ticks = 1;
    5b28:	81 e0       	ldi	r24, 0x01	; 1
    5b2a:	88 8b       	std	Y+16, r24	; 0x10
    5b2c:	91 c0       	rjmp	.+290    	; 0x5c50 <LCD_EntryModeSet+0x1a4>
	else if (__tmp > 255)
    5b2e:	69 89       	ldd	r22, Y+17	; 0x11
    5b30:	7a 89       	ldd	r23, Y+18	; 0x12
    5b32:	8b 89       	ldd	r24, Y+19	; 0x13
    5b34:	9c 89       	ldd	r25, Y+20	; 0x14
    5b36:	20 e0       	ldi	r18, 0x00	; 0
    5b38:	30 e0       	ldi	r19, 0x00	; 0
    5b3a:	4f e7       	ldi	r20, 0x7F	; 127
    5b3c:	53 e4       	ldi	r21, 0x43	; 67
    5b3e:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    5b42:	18 16       	cp	r1, r24
    5b44:	0c f0       	brlt	.+2      	; 0x5b48 <LCD_EntryModeSet+0x9c>
    5b46:	7b c0       	rjmp	.+246    	; 0x5c3e <LCD_EntryModeSet+0x192>
	{
		_delay_ms(__us / 1000.0);
    5b48:	6d 89       	ldd	r22, Y+21	; 0x15
    5b4a:	7e 89       	ldd	r23, Y+22	; 0x16
    5b4c:	8f 89       	ldd	r24, Y+23	; 0x17
    5b4e:	98 8d       	ldd	r25, Y+24	; 0x18
    5b50:	20 e0       	ldi	r18, 0x00	; 0
    5b52:	30 e0       	ldi	r19, 0x00	; 0
    5b54:	4a e7       	ldi	r20, 0x7A	; 122
    5b56:	54 e4       	ldi	r21, 0x44	; 68
    5b58:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5b5c:	dc 01       	movw	r26, r24
    5b5e:	cb 01       	movw	r24, r22
    5b60:	8c 87       	std	Y+12, r24	; 0x0c
    5b62:	9d 87       	std	Y+13, r25	; 0x0d
    5b64:	ae 87       	std	Y+14, r26	; 0x0e
    5b66:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b68:	6c 85       	ldd	r22, Y+12	; 0x0c
    5b6a:	7d 85       	ldd	r23, Y+13	; 0x0d
    5b6c:	8e 85       	ldd	r24, Y+14	; 0x0e
    5b6e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5b70:	20 e0       	ldi	r18, 0x00	; 0
    5b72:	30 e0       	ldi	r19, 0x00	; 0
    5b74:	4a e7       	ldi	r20, 0x7A	; 122
    5b76:	55 e4       	ldi	r21, 0x45	; 69
    5b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b7c:	dc 01       	movw	r26, r24
    5b7e:	cb 01       	movw	r24, r22
    5b80:	88 87       	std	Y+8, r24	; 0x08
    5b82:	99 87       	std	Y+9, r25	; 0x09
    5b84:	aa 87       	std	Y+10, r26	; 0x0a
    5b86:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5b88:	68 85       	ldd	r22, Y+8	; 0x08
    5b8a:	79 85       	ldd	r23, Y+9	; 0x09
    5b8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    5b8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5b90:	20 e0       	ldi	r18, 0x00	; 0
    5b92:	30 e0       	ldi	r19, 0x00	; 0
    5b94:	40 e8       	ldi	r20, 0x80	; 128
    5b96:	5f e3       	ldi	r21, 0x3F	; 63
    5b98:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    5b9c:	88 23       	and	r24, r24
    5b9e:	2c f4       	brge	.+10     	; 0x5baa <LCD_EntryModeSet+0xfe>
		__ticks = 1;
    5ba0:	81 e0       	ldi	r24, 0x01	; 1
    5ba2:	90 e0       	ldi	r25, 0x00	; 0
    5ba4:	9f 83       	std	Y+7, r25	; 0x07
    5ba6:	8e 83       	std	Y+6, r24	; 0x06
    5ba8:	3f c0       	rjmp	.+126    	; 0x5c28 <LCD_EntryModeSet+0x17c>
	else if (__tmp > 65535)
    5baa:	68 85       	ldd	r22, Y+8	; 0x08
    5bac:	79 85       	ldd	r23, Y+9	; 0x09
    5bae:	8a 85       	ldd	r24, Y+10	; 0x0a
    5bb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    5bb2:	20 e0       	ldi	r18, 0x00	; 0
    5bb4:	3f ef       	ldi	r19, 0xFF	; 255
    5bb6:	4f e7       	ldi	r20, 0x7F	; 127
    5bb8:	57 e4       	ldi	r21, 0x47	; 71
    5bba:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    5bbe:	18 16       	cp	r1, r24
    5bc0:	4c f5       	brge	.+82     	; 0x5c14 <LCD_EntryModeSet+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bc2:	6c 85       	ldd	r22, Y+12	; 0x0c
    5bc4:	7d 85       	ldd	r23, Y+13	; 0x0d
    5bc6:	8e 85       	ldd	r24, Y+14	; 0x0e
    5bc8:	9f 85       	ldd	r25, Y+15	; 0x0f
    5bca:	20 e0       	ldi	r18, 0x00	; 0
    5bcc:	30 e0       	ldi	r19, 0x00	; 0
    5bce:	40 e2       	ldi	r20, 0x20	; 32
    5bd0:	51 e4       	ldi	r21, 0x41	; 65
    5bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bd6:	dc 01       	movw	r26, r24
    5bd8:	cb 01       	movw	r24, r22
    5bda:	bc 01       	movw	r22, r24
    5bdc:	cd 01       	movw	r24, r26
    5bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5be2:	dc 01       	movw	r26, r24
    5be4:	cb 01       	movw	r24, r22
    5be6:	9f 83       	std	Y+7, r25	; 0x07
    5be8:	8e 83       	std	Y+6, r24	; 0x06
    5bea:	0f c0       	rjmp	.+30     	; 0x5c0a <LCD_EntryModeSet+0x15e>
    5bec:	80 e9       	ldi	r24, 0x90	; 144
    5bee:	91 e0       	ldi	r25, 0x01	; 1
    5bf0:	9d 83       	std	Y+5, r25	; 0x05
    5bf2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    5bf6:	9d 81       	ldd	r25, Y+5	; 0x05
    5bf8:	01 97       	sbiw	r24, 0x01	; 1
    5bfa:	f1 f7       	brne	.-4      	; 0x5bf8 <LCD_EntryModeSet+0x14c>
    5bfc:	9d 83       	std	Y+5, r25	; 0x05
    5bfe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c00:	8e 81       	ldd	r24, Y+6	; 0x06
    5c02:	9f 81       	ldd	r25, Y+7	; 0x07
    5c04:	01 97       	sbiw	r24, 0x01	; 1
    5c06:	9f 83       	std	Y+7, r25	; 0x07
    5c08:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c0a:	8e 81       	ldd	r24, Y+6	; 0x06
    5c0c:	9f 81       	ldd	r25, Y+7	; 0x07
    5c0e:	00 97       	sbiw	r24, 0x00	; 0
    5c10:	69 f7       	brne	.-38     	; 0x5bec <LCD_EntryModeSet+0x140>
    5c12:	24 c0       	rjmp	.+72     	; 0x5c5c <LCD_EntryModeSet+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c14:	68 85       	ldd	r22, Y+8	; 0x08
    5c16:	79 85       	ldd	r23, Y+9	; 0x09
    5c18:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c20:	dc 01       	movw	r26, r24
    5c22:	cb 01       	movw	r24, r22
    5c24:	9f 83       	std	Y+7, r25	; 0x07
    5c26:	8e 83       	std	Y+6, r24	; 0x06
    5c28:	8e 81       	ldd	r24, Y+6	; 0x06
    5c2a:	9f 81       	ldd	r25, Y+7	; 0x07
    5c2c:	9b 83       	std	Y+3, r25	; 0x03
    5c2e:	8a 83       	std	Y+2, r24	; 0x02
    5c30:	8a 81       	ldd	r24, Y+2	; 0x02
    5c32:	9b 81       	ldd	r25, Y+3	; 0x03
    5c34:	01 97       	sbiw	r24, 0x01	; 1
    5c36:	f1 f7       	brne	.-4      	; 0x5c34 <LCD_EntryModeSet+0x188>
    5c38:	9b 83       	std	Y+3, r25	; 0x03
    5c3a:	8a 83       	std	Y+2, r24	; 0x02
    5c3c:	0f c0       	rjmp	.+30     	; 0x5c5c <LCD_EntryModeSet+0x1b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5c3e:	69 89       	ldd	r22, Y+17	; 0x11
    5c40:	7a 89       	ldd	r23, Y+18	; 0x12
    5c42:	8b 89       	ldd	r24, Y+19	; 0x13
    5c44:	9c 89       	ldd	r25, Y+20	; 0x14
    5c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c4a:	dc 01       	movw	r26, r24
    5c4c:	cb 01       	movw	r24, r22
    5c4e:	88 8b       	std	Y+16, r24	; 0x10
    5c50:	88 89       	ldd	r24, Y+16	; 0x10
    5c52:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5c54:	89 81       	ldd	r24, Y+1	; 0x01
    5c56:	8a 95       	dec	r24
    5c58:	f1 f7       	brne	.-4      	; 0x5c56 <LCD_EntryModeSet+0x1aa>
    5c5a:	89 83       	std	Y+1, r24	; 0x01
	// The maximum execution time is in nanoseconds for our 16MHz f(OSC), so it could be approximated to be 1us.
	_delay_us(1);
}
    5c5c:	6a 96       	adiw	r28, 0x1a	; 26
    5c5e:	0f b6       	in	r0, 0x3f	; 63
    5c60:	f8 94       	cli
    5c62:	de bf       	out	0x3e, r29	; 62
    5c64:	0f be       	out	0x3f, r0	; 63
    5c66:	cd bf       	out	0x3d, r28	; 61
    5c68:	cf 91       	pop	r28
    5c6a:	df 91       	pop	r29
    5c6c:	08 95       	ret

00005c6e <LCD_DisplayControl>:

void LCD_DisplayControl(u8_t display_mode, u8_t cursor_display, u8_t cursor_blink){
    5c6e:	df 93       	push	r29
    5c70:	cf 93       	push	r28
    5c72:	cd b7       	in	r28, 0x3d	; 61
    5c74:	de b7       	in	r29, 0x3e	; 62
    5c76:	6b 97       	sbiw	r28, 0x1b	; 27
    5c78:	0f b6       	in	r0, 0x3f	; 63
    5c7a:	f8 94       	cli
    5c7c:	de bf       	out	0x3e, r29	; 62
    5c7e:	0f be       	out	0x3f, r0	; 63
    5c80:	cd bf       	out	0x3d, r28	; 61
    5c82:	89 8f       	std	Y+25, r24	; 0x19
    5c84:	6a 8f       	std	Y+26, r22	; 0x1a
    5c86:	4b 8f       	std	Y+27, r20	; 0x1b
	LCD_SendInstruction((1 << D3) | ((1 & display_mode) << D2) | ((1 & cursor_display) << D1) | ((1 & cursor_blink) << D0));
    5c88:	89 8d       	ldd	r24, Y+25	; 0x19
    5c8a:	88 2f       	mov	r24, r24
    5c8c:	90 e0       	ldi	r25, 0x00	; 0
    5c8e:	81 70       	andi	r24, 0x01	; 1
    5c90:	90 70       	andi	r25, 0x00	; 0
    5c92:	88 0f       	add	r24, r24
    5c94:	99 1f       	adc	r25, r25
    5c96:	88 0f       	add	r24, r24
    5c98:	99 1f       	adc	r25, r25
    5c9a:	28 2f       	mov	r18, r24
    5c9c:	28 60       	ori	r18, 0x08	; 8
    5c9e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5ca0:	88 2f       	mov	r24, r24
    5ca2:	90 e0       	ldi	r25, 0x00	; 0
    5ca4:	81 70       	andi	r24, 0x01	; 1
    5ca6:	90 70       	andi	r25, 0x00	; 0
    5ca8:	88 0f       	add	r24, r24
    5caa:	99 1f       	adc	r25, r25
    5cac:	92 2f       	mov	r25, r18
    5cae:	98 2b       	or	r25, r24
    5cb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5cb2:	81 70       	andi	r24, 0x01	; 1
    5cb4:	89 2b       	or	r24, r25
    5cb6:	0e 94 92 28 	call	0x5124	; 0x5124 <LCD_SendInstruction>
    5cba:	80 e0       	ldi	r24, 0x00	; 0
    5cbc:	90 e0       	ldi	r25, 0x00	; 0
    5cbe:	a0 e8       	ldi	r26, 0x80	; 128
    5cc0:	bf e3       	ldi	r27, 0x3F	; 63
    5cc2:	8d 8b       	std	Y+21, r24	; 0x15
    5cc4:	9e 8b       	std	Y+22, r25	; 0x16
    5cc6:	af 8b       	std	Y+23, r26	; 0x17
    5cc8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5cca:	6d 89       	ldd	r22, Y+21	; 0x15
    5ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    5cce:	8f 89       	ldd	r24, Y+23	; 0x17
    5cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    5cd2:	2b ea       	ldi	r18, 0xAB	; 171
    5cd4:	3a ea       	ldi	r19, 0xAA	; 170
    5cd6:	4a ea       	ldi	r20, 0xAA	; 170
    5cd8:	50 e4       	ldi	r21, 0x40	; 64
    5cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cde:	dc 01       	movw	r26, r24
    5ce0:	cb 01       	movw	r24, r22
    5ce2:	89 8b       	std	Y+17, r24	; 0x11
    5ce4:	9a 8b       	std	Y+18, r25	; 0x12
    5ce6:	ab 8b       	std	Y+19, r26	; 0x13
    5ce8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5cea:	69 89       	ldd	r22, Y+17	; 0x11
    5cec:	7a 89       	ldd	r23, Y+18	; 0x12
    5cee:	8b 89       	ldd	r24, Y+19	; 0x13
    5cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    5cf2:	20 e0       	ldi	r18, 0x00	; 0
    5cf4:	30 e0       	ldi	r19, 0x00	; 0
    5cf6:	40 e8       	ldi	r20, 0x80	; 128
    5cf8:	5f e3       	ldi	r21, 0x3F	; 63
    5cfa:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    5cfe:	88 23       	and	r24, r24
    5d00:	1c f4       	brge	.+6      	; 0x5d08 <LCD_DisplayControl+0x9a>
		__ticks = 1;
    5d02:	81 e0       	ldi	r24, 0x01	; 1
    5d04:	88 8b       	std	Y+16, r24	; 0x10
    5d06:	91 c0       	rjmp	.+290    	; 0x5e2a <LCD_DisplayControl+0x1bc>
	else if (__tmp > 255)
    5d08:	69 89       	ldd	r22, Y+17	; 0x11
    5d0a:	7a 89       	ldd	r23, Y+18	; 0x12
    5d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    5d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    5d10:	20 e0       	ldi	r18, 0x00	; 0
    5d12:	30 e0       	ldi	r19, 0x00	; 0
    5d14:	4f e7       	ldi	r20, 0x7F	; 127
    5d16:	53 e4       	ldi	r21, 0x43	; 67
    5d18:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    5d1c:	18 16       	cp	r1, r24
    5d1e:	0c f0       	brlt	.+2      	; 0x5d22 <LCD_DisplayControl+0xb4>
    5d20:	7b c0       	rjmp	.+246    	; 0x5e18 <LCD_DisplayControl+0x1aa>
	{
		_delay_ms(__us / 1000.0);
    5d22:	6d 89       	ldd	r22, Y+21	; 0x15
    5d24:	7e 89       	ldd	r23, Y+22	; 0x16
    5d26:	8f 89       	ldd	r24, Y+23	; 0x17
    5d28:	98 8d       	ldd	r25, Y+24	; 0x18
    5d2a:	20 e0       	ldi	r18, 0x00	; 0
    5d2c:	30 e0       	ldi	r19, 0x00	; 0
    5d2e:	4a e7       	ldi	r20, 0x7A	; 122
    5d30:	54 e4       	ldi	r21, 0x44	; 68
    5d32:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5d36:	dc 01       	movw	r26, r24
    5d38:	cb 01       	movw	r24, r22
    5d3a:	8c 87       	std	Y+12, r24	; 0x0c
    5d3c:	9d 87       	std	Y+13, r25	; 0x0d
    5d3e:	ae 87       	std	Y+14, r26	; 0x0e
    5d40:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d42:	6c 85       	ldd	r22, Y+12	; 0x0c
    5d44:	7d 85       	ldd	r23, Y+13	; 0x0d
    5d46:	8e 85       	ldd	r24, Y+14	; 0x0e
    5d48:	9f 85       	ldd	r25, Y+15	; 0x0f
    5d4a:	20 e0       	ldi	r18, 0x00	; 0
    5d4c:	30 e0       	ldi	r19, 0x00	; 0
    5d4e:	4a e7       	ldi	r20, 0x7A	; 122
    5d50:	55 e4       	ldi	r21, 0x45	; 69
    5d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d56:	dc 01       	movw	r26, r24
    5d58:	cb 01       	movw	r24, r22
    5d5a:	88 87       	std	Y+8, r24	; 0x08
    5d5c:	99 87       	std	Y+9, r25	; 0x09
    5d5e:	aa 87       	std	Y+10, r26	; 0x0a
    5d60:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5d62:	68 85       	ldd	r22, Y+8	; 0x08
    5d64:	79 85       	ldd	r23, Y+9	; 0x09
    5d66:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d68:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d6a:	20 e0       	ldi	r18, 0x00	; 0
    5d6c:	30 e0       	ldi	r19, 0x00	; 0
    5d6e:	40 e8       	ldi	r20, 0x80	; 128
    5d70:	5f e3       	ldi	r21, 0x3F	; 63
    5d72:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    5d76:	88 23       	and	r24, r24
    5d78:	2c f4       	brge	.+10     	; 0x5d84 <LCD_DisplayControl+0x116>
		__ticks = 1;
    5d7a:	81 e0       	ldi	r24, 0x01	; 1
    5d7c:	90 e0       	ldi	r25, 0x00	; 0
    5d7e:	9f 83       	std	Y+7, r25	; 0x07
    5d80:	8e 83       	std	Y+6, r24	; 0x06
    5d82:	3f c0       	rjmp	.+126    	; 0x5e02 <LCD_DisplayControl+0x194>
	else if (__tmp > 65535)
    5d84:	68 85       	ldd	r22, Y+8	; 0x08
    5d86:	79 85       	ldd	r23, Y+9	; 0x09
    5d88:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d8c:	20 e0       	ldi	r18, 0x00	; 0
    5d8e:	3f ef       	ldi	r19, 0xFF	; 255
    5d90:	4f e7       	ldi	r20, 0x7F	; 127
    5d92:	57 e4       	ldi	r21, 0x47	; 71
    5d94:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    5d98:	18 16       	cp	r1, r24
    5d9a:	4c f5       	brge	.+82     	; 0x5dee <LCD_DisplayControl+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d9c:	6c 85       	ldd	r22, Y+12	; 0x0c
    5d9e:	7d 85       	ldd	r23, Y+13	; 0x0d
    5da0:	8e 85       	ldd	r24, Y+14	; 0x0e
    5da2:	9f 85       	ldd	r25, Y+15	; 0x0f
    5da4:	20 e0       	ldi	r18, 0x00	; 0
    5da6:	30 e0       	ldi	r19, 0x00	; 0
    5da8:	40 e2       	ldi	r20, 0x20	; 32
    5daa:	51 e4       	ldi	r21, 0x41	; 65
    5dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5db0:	dc 01       	movw	r26, r24
    5db2:	cb 01       	movw	r24, r22
    5db4:	bc 01       	movw	r22, r24
    5db6:	cd 01       	movw	r24, r26
    5db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dbc:	dc 01       	movw	r26, r24
    5dbe:	cb 01       	movw	r24, r22
    5dc0:	9f 83       	std	Y+7, r25	; 0x07
    5dc2:	8e 83       	std	Y+6, r24	; 0x06
    5dc4:	0f c0       	rjmp	.+30     	; 0x5de4 <LCD_DisplayControl+0x176>
    5dc6:	80 e9       	ldi	r24, 0x90	; 144
    5dc8:	91 e0       	ldi	r25, 0x01	; 1
    5dca:	9d 83       	std	Y+5, r25	; 0x05
    5dcc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5dce:	8c 81       	ldd	r24, Y+4	; 0x04
    5dd0:	9d 81       	ldd	r25, Y+5	; 0x05
    5dd2:	01 97       	sbiw	r24, 0x01	; 1
    5dd4:	f1 f7       	brne	.-4      	; 0x5dd2 <LCD_DisplayControl+0x164>
    5dd6:	9d 83       	std	Y+5, r25	; 0x05
    5dd8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5dda:	8e 81       	ldd	r24, Y+6	; 0x06
    5ddc:	9f 81       	ldd	r25, Y+7	; 0x07
    5dde:	01 97       	sbiw	r24, 0x01	; 1
    5de0:	9f 83       	std	Y+7, r25	; 0x07
    5de2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5de4:	8e 81       	ldd	r24, Y+6	; 0x06
    5de6:	9f 81       	ldd	r25, Y+7	; 0x07
    5de8:	00 97       	sbiw	r24, 0x00	; 0
    5dea:	69 f7       	brne	.-38     	; 0x5dc6 <LCD_DisplayControl+0x158>
    5dec:	24 c0       	rjmp	.+72     	; 0x5e36 <LCD_DisplayControl+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dee:	68 85       	ldd	r22, Y+8	; 0x08
    5df0:	79 85       	ldd	r23, Y+9	; 0x09
    5df2:	8a 85       	ldd	r24, Y+10	; 0x0a
    5df4:	9b 85       	ldd	r25, Y+11	; 0x0b
    5df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dfa:	dc 01       	movw	r26, r24
    5dfc:	cb 01       	movw	r24, r22
    5dfe:	9f 83       	std	Y+7, r25	; 0x07
    5e00:	8e 83       	std	Y+6, r24	; 0x06
    5e02:	8e 81       	ldd	r24, Y+6	; 0x06
    5e04:	9f 81       	ldd	r25, Y+7	; 0x07
    5e06:	9b 83       	std	Y+3, r25	; 0x03
    5e08:	8a 83       	std	Y+2, r24	; 0x02
    5e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    5e0e:	01 97       	sbiw	r24, 0x01	; 1
    5e10:	f1 f7       	brne	.-4      	; 0x5e0e <LCD_DisplayControl+0x1a0>
    5e12:	9b 83       	std	Y+3, r25	; 0x03
    5e14:	8a 83       	std	Y+2, r24	; 0x02
    5e16:	0f c0       	rjmp	.+30     	; 0x5e36 <LCD_DisplayControl+0x1c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5e18:	69 89       	ldd	r22, Y+17	; 0x11
    5e1a:	7a 89       	ldd	r23, Y+18	; 0x12
    5e1c:	8b 89       	ldd	r24, Y+19	; 0x13
    5e1e:	9c 89       	ldd	r25, Y+20	; 0x14
    5e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e24:	dc 01       	movw	r26, r24
    5e26:	cb 01       	movw	r24, r22
    5e28:	88 8b       	std	Y+16, r24	; 0x10
    5e2a:	88 89       	ldd	r24, Y+16	; 0x10
    5e2c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5e2e:	89 81       	ldd	r24, Y+1	; 0x01
    5e30:	8a 95       	dec	r24
    5e32:	f1 f7       	brne	.-4      	; 0x5e30 <LCD_DisplayControl+0x1c2>
    5e34:	89 83       	std	Y+1, r24	; 0x01
	// The maximum execution time is in nanoseconds for our 16MHz f(OSC), so it could be approximated to be 1us.
	_delay_us(1);
}
    5e36:	6b 96       	adiw	r28, 0x1b	; 27
    5e38:	0f b6       	in	r0, 0x3f	; 63
    5e3a:	f8 94       	cli
    5e3c:	de bf       	out	0x3e, r29	; 62
    5e3e:	0f be       	out	0x3f, r0	; 63
    5e40:	cd bf       	out	0x3d, r28	; 61
    5e42:	cf 91       	pop	r28
    5e44:	df 91       	pop	r29
    5e46:	08 95       	ret

00005e48 <LCD_CursorOrDisplayShift>:

void LCD_CursorOrDisplayShift(u8_t cursor_or_display, u8_t right_or_left){
    5e48:	df 93       	push	r29
    5e4a:	cf 93       	push	r28
    5e4c:	cd b7       	in	r28, 0x3d	; 61
    5e4e:	de b7       	in	r29, 0x3e	; 62
    5e50:	6a 97       	sbiw	r28, 0x1a	; 26
    5e52:	0f b6       	in	r0, 0x3f	; 63
    5e54:	f8 94       	cli
    5e56:	de bf       	out	0x3e, r29	; 62
    5e58:	0f be       	out	0x3f, r0	; 63
    5e5a:	cd bf       	out	0x3d, r28	; 61
    5e5c:	89 8f       	std	Y+25, r24	; 0x19
    5e5e:	6a 8f       	std	Y+26, r22	; 0x1a
	LCD_SendInstruction((1 << D4) | ((1 & cursor_or_display) << D3) | ((1 & right_or_left) << D2));
    5e60:	89 8d       	ldd	r24, Y+25	; 0x19
    5e62:	88 2f       	mov	r24, r24
    5e64:	90 e0       	ldi	r25, 0x00	; 0
    5e66:	81 70       	andi	r24, 0x01	; 1
    5e68:	90 70       	andi	r25, 0x00	; 0
    5e6a:	88 0f       	add	r24, r24
    5e6c:	99 1f       	adc	r25, r25
    5e6e:	88 0f       	add	r24, r24
    5e70:	99 1f       	adc	r25, r25
    5e72:	88 0f       	add	r24, r24
    5e74:	99 1f       	adc	r25, r25
    5e76:	28 2f       	mov	r18, r24
    5e78:	20 61       	ori	r18, 0x10	; 16
    5e7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5e7c:	88 2f       	mov	r24, r24
    5e7e:	90 e0       	ldi	r25, 0x00	; 0
    5e80:	81 70       	andi	r24, 0x01	; 1
    5e82:	90 70       	andi	r25, 0x00	; 0
    5e84:	88 0f       	add	r24, r24
    5e86:	99 1f       	adc	r25, r25
    5e88:	88 0f       	add	r24, r24
    5e8a:	99 1f       	adc	r25, r25
    5e8c:	82 2b       	or	r24, r18
    5e8e:	0e 94 92 28 	call	0x5124	; 0x5124 <LCD_SendInstruction>
    5e92:	80 e0       	ldi	r24, 0x00	; 0
    5e94:	90 e0       	ldi	r25, 0x00	; 0
    5e96:	a0 e8       	ldi	r26, 0x80	; 128
    5e98:	bf e3       	ldi	r27, 0x3F	; 63
    5e9a:	8d 8b       	std	Y+21, r24	; 0x15
    5e9c:	9e 8b       	std	Y+22, r25	; 0x16
    5e9e:	af 8b       	std	Y+23, r26	; 0x17
    5ea0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5ea2:	6d 89       	ldd	r22, Y+21	; 0x15
    5ea4:	7e 89       	ldd	r23, Y+22	; 0x16
    5ea6:	8f 89       	ldd	r24, Y+23	; 0x17
    5ea8:	98 8d       	ldd	r25, Y+24	; 0x18
    5eaa:	2b ea       	ldi	r18, 0xAB	; 171
    5eac:	3a ea       	ldi	r19, 0xAA	; 170
    5eae:	4a ea       	ldi	r20, 0xAA	; 170
    5eb0:	50 e4       	ldi	r21, 0x40	; 64
    5eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5eb6:	dc 01       	movw	r26, r24
    5eb8:	cb 01       	movw	r24, r22
    5eba:	89 8b       	std	Y+17, r24	; 0x11
    5ebc:	9a 8b       	std	Y+18, r25	; 0x12
    5ebe:	ab 8b       	std	Y+19, r26	; 0x13
    5ec0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5ec2:	69 89       	ldd	r22, Y+17	; 0x11
    5ec4:	7a 89       	ldd	r23, Y+18	; 0x12
    5ec6:	8b 89       	ldd	r24, Y+19	; 0x13
    5ec8:	9c 89       	ldd	r25, Y+20	; 0x14
    5eca:	20 e0       	ldi	r18, 0x00	; 0
    5ecc:	30 e0       	ldi	r19, 0x00	; 0
    5ece:	40 e8       	ldi	r20, 0x80	; 128
    5ed0:	5f e3       	ldi	r21, 0x3F	; 63
    5ed2:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    5ed6:	88 23       	and	r24, r24
    5ed8:	1c f4       	brge	.+6      	; 0x5ee0 <LCD_CursorOrDisplayShift+0x98>
		__ticks = 1;
    5eda:	81 e0       	ldi	r24, 0x01	; 1
    5edc:	88 8b       	std	Y+16, r24	; 0x10
    5ede:	91 c0       	rjmp	.+290    	; 0x6002 <LCD_CursorOrDisplayShift+0x1ba>
	else if (__tmp > 255)
    5ee0:	69 89       	ldd	r22, Y+17	; 0x11
    5ee2:	7a 89       	ldd	r23, Y+18	; 0x12
    5ee4:	8b 89       	ldd	r24, Y+19	; 0x13
    5ee6:	9c 89       	ldd	r25, Y+20	; 0x14
    5ee8:	20 e0       	ldi	r18, 0x00	; 0
    5eea:	30 e0       	ldi	r19, 0x00	; 0
    5eec:	4f e7       	ldi	r20, 0x7F	; 127
    5eee:	53 e4       	ldi	r21, 0x43	; 67
    5ef0:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    5ef4:	18 16       	cp	r1, r24
    5ef6:	0c f0       	brlt	.+2      	; 0x5efa <LCD_CursorOrDisplayShift+0xb2>
    5ef8:	7b c0       	rjmp	.+246    	; 0x5ff0 <LCD_CursorOrDisplayShift+0x1a8>
	{
		_delay_ms(__us / 1000.0);
    5efa:	6d 89       	ldd	r22, Y+21	; 0x15
    5efc:	7e 89       	ldd	r23, Y+22	; 0x16
    5efe:	8f 89       	ldd	r24, Y+23	; 0x17
    5f00:	98 8d       	ldd	r25, Y+24	; 0x18
    5f02:	20 e0       	ldi	r18, 0x00	; 0
    5f04:	30 e0       	ldi	r19, 0x00	; 0
    5f06:	4a e7       	ldi	r20, 0x7A	; 122
    5f08:	54 e4       	ldi	r21, 0x44	; 68
    5f0a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5f0e:	dc 01       	movw	r26, r24
    5f10:	cb 01       	movw	r24, r22
    5f12:	8c 87       	std	Y+12, r24	; 0x0c
    5f14:	9d 87       	std	Y+13, r25	; 0x0d
    5f16:	ae 87       	std	Y+14, r26	; 0x0e
    5f18:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f1a:	6c 85       	ldd	r22, Y+12	; 0x0c
    5f1c:	7d 85       	ldd	r23, Y+13	; 0x0d
    5f1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f20:	9f 85       	ldd	r25, Y+15	; 0x0f
    5f22:	20 e0       	ldi	r18, 0x00	; 0
    5f24:	30 e0       	ldi	r19, 0x00	; 0
    5f26:	4a e7       	ldi	r20, 0x7A	; 122
    5f28:	55 e4       	ldi	r21, 0x45	; 69
    5f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f2e:	dc 01       	movw	r26, r24
    5f30:	cb 01       	movw	r24, r22
    5f32:	88 87       	std	Y+8, r24	; 0x08
    5f34:	99 87       	std	Y+9, r25	; 0x09
    5f36:	aa 87       	std	Y+10, r26	; 0x0a
    5f38:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5f3a:	68 85       	ldd	r22, Y+8	; 0x08
    5f3c:	79 85       	ldd	r23, Y+9	; 0x09
    5f3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f40:	9b 85       	ldd	r25, Y+11	; 0x0b
    5f42:	20 e0       	ldi	r18, 0x00	; 0
    5f44:	30 e0       	ldi	r19, 0x00	; 0
    5f46:	40 e8       	ldi	r20, 0x80	; 128
    5f48:	5f e3       	ldi	r21, 0x3F	; 63
    5f4a:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    5f4e:	88 23       	and	r24, r24
    5f50:	2c f4       	brge	.+10     	; 0x5f5c <LCD_CursorOrDisplayShift+0x114>
		__ticks = 1;
    5f52:	81 e0       	ldi	r24, 0x01	; 1
    5f54:	90 e0       	ldi	r25, 0x00	; 0
    5f56:	9f 83       	std	Y+7, r25	; 0x07
    5f58:	8e 83       	std	Y+6, r24	; 0x06
    5f5a:	3f c0       	rjmp	.+126    	; 0x5fda <LCD_CursorOrDisplayShift+0x192>
	else if (__tmp > 65535)
    5f5c:	68 85       	ldd	r22, Y+8	; 0x08
    5f5e:	79 85       	ldd	r23, Y+9	; 0x09
    5f60:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f62:	9b 85       	ldd	r25, Y+11	; 0x0b
    5f64:	20 e0       	ldi	r18, 0x00	; 0
    5f66:	3f ef       	ldi	r19, 0xFF	; 255
    5f68:	4f e7       	ldi	r20, 0x7F	; 127
    5f6a:	57 e4       	ldi	r21, 0x47	; 71
    5f6c:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    5f70:	18 16       	cp	r1, r24
    5f72:	4c f5       	brge	.+82     	; 0x5fc6 <LCD_CursorOrDisplayShift+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f74:	6c 85       	ldd	r22, Y+12	; 0x0c
    5f76:	7d 85       	ldd	r23, Y+13	; 0x0d
    5f78:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f7a:	9f 85       	ldd	r25, Y+15	; 0x0f
    5f7c:	20 e0       	ldi	r18, 0x00	; 0
    5f7e:	30 e0       	ldi	r19, 0x00	; 0
    5f80:	40 e2       	ldi	r20, 0x20	; 32
    5f82:	51 e4       	ldi	r21, 0x41	; 65
    5f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f88:	dc 01       	movw	r26, r24
    5f8a:	cb 01       	movw	r24, r22
    5f8c:	bc 01       	movw	r22, r24
    5f8e:	cd 01       	movw	r24, r26
    5f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f94:	dc 01       	movw	r26, r24
    5f96:	cb 01       	movw	r24, r22
    5f98:	9f 83       	std	Y+7, r25	; 0x07
    5f9a:	8e 83       	std	Y+6, r24	; 0x06
    5f9c:	0f c0       	rjmp	.+30     	; 0x5fbc <LCD_CursorOrDisplayShift+0x174>
    5f9e:	80 e9       	ldi	r24, 0x90	; 144
    5fa0:	91 e0       	ldi	r25, 0x01	; 1
    5fa2:	9d 83       	std	Y+5, r25	; 0x05
    5fa4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    5fa8:	9d 81       	ldd	r25, Y+5	; 0x05
    5faa:	01 97       	sbiw	r24, 0x01	; 1
    5fac:	f1 f7       	brne	.-4      	; 0x5faa <LCD_CursorOrDisplayShift+0x162>
    5fae:	9d 83       	std	Y+5, r25	; 0x05
    5fb0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5fb2:	8e 81       	ldd	r24, Y+6	; 0x06
    5fb4:	9f 81       	ldd	r25, Y+7	; 0x07
    5fb6:	01 97       	sbiw	r24, 0x01	; 1
    5fb8:	9f 83       	std	Y+7, r25	; 0x07
    5fba:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5fbc:	8e 81       	ldd	r24, Y+6	; 0x06
    5fbe:	9f 81       	ldd	r25, Y+7	; 0x07
    5fc0:	00 97       	sbiw	r24, 0x00	; 0
    5fc2:	69 f7       	brne	.-38     	; 0x5f9e <LCD_CursorOrDisplayShift+0x156>
    5fc4:	24 c0       	rjmp	.+72     	; 0x600e <LCD_CursorOrDisplayShift+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5fc6:	68 85       	ldd	r22, Y+8	; 0x08
    5fc8:	79 85       	ldd	r23, Y+9	; 0x09
    5fca:	8a 85       	ldd	r24, Y+10	; 0x0a
    5fcc:	9b 85       	ldd	r25, Y+11	; 0x0b
    5fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fd2:	dc 01       	movw	r26, r24
    5fd4:	cb 01       	movw	r24, r22
    5fd6:	9f 83       	std	Y+7, r25	; 0x07
    5fd8:	8e 83       	std	Y+6, r24	; 0x06
    5fda:	8e 81       	ldd	r24, Y+6	; 0x06
    5fdc:	9f 81       	ldd	r25, Y+7	; 0x07
    5fde:	9b 83       	std	Y+3, r25	; 0x03
    5fe0:	8a 83       	std	Y+2, r24	; 0x02
    5fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    5fe4:	9b 81       	ldd	r25, Y+3	; 0x03
    5fe6:	01 97       	sbiw	r24, 0x01	; 1
    5fe8:	f1 f7       	brne	.-4      	; 0x5fe6 <LCD_CursorOrDisplayShift+0x19e>
    5fea:	9b 83       	std	Y+3, r25	; 0x03
    5fec:	8a 83       	std	Y+2, r24	; 0x02
    5fee:	0f c0       	rjmp	.+30     	; 0x600e <LCD_CursorOrDisplayShift+0x1c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5ff0:	69 89       	ldd	r22, Y+17	; 0x11
    5ff2:	7a 89       	ldd	r23, Y+18	; 0x12
    5ff4:	8b 89       	ldd	r24, Y+19	; 0x13
    5ff6:	9c 89       	ldd	r25, Y+20	; 0x14
    5ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ffc:	dc 01       	movw	r26, r24
    5ffe:	cb 01       	movw	r24, r22
    6000:	88 8b       	std	Y+16, r24	; 0x10
    6002:	88 89       	ldd	r24, Y+16	; 0x10
    6004:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6006:	89 81       	ldd	r24, Y+1	; 0x01
    6008:	8a 95       	dec	r24
    600a:	f1 f7       	brne	.-4      	; 0x6008 <LCD_CursorOrDisplayShift+0x1c0>
    600c:	89 83       	std	Y+1, r24	; 0x01
	// The maximum execution time is in nanoseconds for our 16MHz f(OSC), so it could be approximated to be 1us.
	_delay_us(1);
}
    600e:	6a 96       	adiw	r28, 0x1a	; 26
    6010:	0f b6       	in	r0, 0x3f	; 63
    6012:	f8 94       	cli
    6014:	de bf       	out	0x3e, r29	; 62
    6016:	0f be       	out	0x3f, r0	; 63
    6018:	cd bf       	out	0x3d, r28	; 61
    601a:	cf 91       	pop	r28
    601c:	df 91       	pop	r29
    601e:	08 95       	ret

00006020 <LCD_FunctionSet>:

void LCD_FunctionSet(u8_t data_length, u8_t display_lines_num, u8_t char_font){
    6020:	df 93       	push	r29
    6022:	cf 93       	push	r28
    6024:	cd b7       	in	r28, 0x3d	; 61
    6026:	de b7       	in	r29, 0x3e	; 62
    6028:	6b 97       	sbiw	r28, 0x1b	; 27
    602a:	0f b6       	in	r0, 0x3f	; 63
    602c:	f8 94       	cli
    602e:	de bf       	out	0x3e, r29	; 62
    6030:	0f be       	out	0x3f, r0	; 63
    6032:	cd bf       	out	0x3d, r28	; 61
    6034:	89 8f       	std	Y+25, r24	; 0x19
    6036:	6a 8f       	std	Y+26, r22	; 0x1a
    6038:	4b 8f       	std	Y+27, r20	; 0x1b
	LCD_SendInstruction((1 << D5) | ((1 & data_length) << D4) | ((1 & display_lines_num) << D3) | ((1 & char_font) << D2));
    603a:	89 8d       	ldd	r24, Y+25	; 0x19
    603c:	88 2f       	mov	r24, r24
    603e:	90 e0       	ldi	r25, 0x00	; 0
    6040:	81 70       	andi	r24, 0x01	; 1
    6042:	90 70       	andi	r25, 0x00	; 0
    6044:	82 95       	swap	r24
    6046:	92 95       	swap	r25
    6048:	90 7f       	andi	r25, 0xF0	; 240
    604a:	98 27       	eor	r25, r24
    604c:	80 7f       	andi	r24, 0xF0	; 240
    604e:	98 27       	eor	r25, r24
    6050:	28 2f       	mov	r18, r24
    6052:	20 62       	ori	r18, 0x20	; 32
    6054:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6056:	88 2f       	mov	r24, r24
    6058:	90 e0       	ldi	r25, 0x00	; 0
    605a:	81 70       	andi	r24, 0x01	; 1
    605c:	90 70       	andi	r25, 0x00	; 0
    605e:	88 0f       	add	r24, r24
    6060:	99 1f       	adc	r25, r25
    6062:	88 0f       	add	r24, r24
    6064:	99 1f       	adc	r25, r25
    6066:	88 0f       	add	r24, r24
    6068:	99 1f       	adc	r25, r25
    606a:	28 2b       	or	r18, r24
    606c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    606e:	88 2f       	mov	r24, r24
    6070:	90 e0       	ldi	r25, 0x00	; 0
    6072:	81 70       	andi	r24, 0x01	; 1
    6074:	90 70       	andi	r25, 0x00	; 0
    6076:	88 0f       	add	r24, r24
    6078:	99 1f       	adc	r25, r25
    607a:	88 0f       	add	r24, r24
    607c:	99 1f       	adc	r25, r25
    607e:	82 2b       	or	r24, r18
    6080:	0e 94 92 28 	call	0x5124	; 0x5124 <LCD_SendInstruction>
    6084:	80 e0       	ldi	r24, 0x00	; 0
    6086:	90 e0       	ldi	r25, 0x00	; 0
    6088:	a0 e8       	ldi	r26, 0x80	; 128
    608a:	bf e3       	ldi	r27, 0x3F	; 63
    608c:	8d 8b       	std	Y+21, r24	; 0x15
    608e:	9e 8b       	std	Y+22, r25	; 0x16
    6090:	af 8b       	std	Y+23, r26	; 0x17
    6092:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    6094:	6d 89       	ldd	r22, Y+21	; 0x15
    6096:	7e 89       	ldd	r23, Y+22	; 0x16
    6098:	8f 89       	ldd	r24, Y+23	; 0x17
    609a:	98 8d       	ldd	r25, Y+24	; 0x18
    609c:	2b ea       	ldi	r18, 0xAB	; 171
    609e:	3a ea       	ldi	r19, 0xAA	; 170
    60a0:	4a ea       	ldi	r20, 0xAA	; 170
    60a2:	50 e4       	ldi	r21, 0x40	; 64
    60a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60a8:	dc 01       	movw	r26, r24
    60aa:	cb 01       	movw	r24, r22
    60ac:	89 8b       	std	Y+17, r24	; 0x11
    60ae:	9a 8b       	std	Y+18, r25	; 0x12
    60b0:	ab 8b       	std	Y+19, r26	; 0x13
    60b2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    60b4:	69 89       	ldd	r22, Y+17	; 0x11
    60b6:	7a 89       	ldd	r23, Y+18	; 0x12
    60b8:	8b 89       	ldd	r24, Y+19	; 0x13
    60ba:	9c 89       	ldd	r25, Y+20	; 0x14
    60bc:	20 e0       	ldi	r18, 0x00	; 0
    60be:	30 e0       	ldi	r19, 0x00	; 0
    60c0:	40 e8       	ldi	r20, 0x80	; 128
    60c2:	5f e3       	ldi	r21, 0x3F	; 63
    60c4:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    60c8:	88 23       	and	r24, r24
    60ca:	1c f4       	brge	.+6      	; 0x60d2 <LCD_FunctionSet+0xb2>
		__ticks = 1;
    60cc:	81 e0       	ldi	r24, 0x01	; 1
    60ce:	88 8b       	std	Y+16, r24	; 0x10
    60d0:	91 c0       	rjmp	.+290    	; 0x61f4 <LCD_FunctionSet+0x1d4>
	else if (__tmp > 255)
    60d2:	69 89       	ldd	r22, Y+17	; 0x11
    60d4:	7a 89       	ldd	r23, Y+18	; 0x12
    60d6:	8b 89       	ldd	r24, Y+19	; 0x13
    60d8:	9c 89       	ldd	r25, Y+20	; 0x14
    60da:	20 e0       	ldi	r18, 0x00	; 0
    60dc:	30 e0       	ldi	r19, 0x00	; 0
    60de:	4f e7       	ldi	r20, 0x7F	; 127
    60e0:	53 e4       	ldi	r21, 0x43	; 67
    60e2:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    60e6:	18 16       	cp	r1, r24
    60e8:	0c f0       	brlt	.+2      	; 0x60ec <LCD_FunctionSet+0xcc>
    60ea:	7b c0       	rjmp	.+246    	; 0x61e2 <LCD_FunctionSet+0x1c2>
	{
		_delay_ms(__us / 1000.0);
    60ec:	6d 89       	ldd	r22, Y+21	; 0x15
    60ee:	7e 89       	ldd	r23, Y+22	; 0x16
    60f0:	8f 89       	ldd	r24, Y+23	; 0x17
    60f2:	98 8d       	ldd	r25, Y+24	; 0x18
    60f4:	20 e0       	ldi	r18, 0x00	; 0
    60f6:	30 e0       	ldi	r19, 0x00	; 0
    60f8:	4a e7       	ldi	r20, 0x7A	; 122
    60fa:	54 e4       	ldi	r21, 0x44	; 68
    60fc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6100:	dc 01       	movw	r26, r24
    6102:	cb 01       	movw	r24, r22
    6104:	8c 87       	std	Y+12, r24	; 0x0c
    6106:	9d 87       	std	Y+13, r25	; 0x0d
    6108:	ae 87       	std	Y+14, r26	; 0x0e
    610a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    610c:	6c 85       	ldd	r22, Y+12	; 0x0c
    610e:	7d 85       	ldd	r23, Y+13	; 0x0d
    6110:	8e 85       	ldd	r24, Y+14	; 0x0e
    6112:	9f 85       	ldd	r25, Y+15	; 0x0f
    6114:	20 e0       	ldi	r18, 0x00	; 0
    6116:	30 e0       	ldi	r19, 0x00	; 0
    6118:	4a e7       	ldi	r20, 0x7A	; 122
    611a:	55 e4       	ldi	r21, 0x45	; 69
    611c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6120:	dc 01       	movw	r26, r24
    6122:	cb 01       	movw	r24, r22
    6124:	88 87       	std	Y+8, r24	; 0x08
    6126:	99 87       	std	Y+9, r25	; 0x09
    6128:	aa 87       	std	Y+10, r26	; 0x0a
    612a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    612c:	68 85       	ldd	r22, Y+8	; 0x08
    612e:	79 85       	ldd	r23, Y+9	; 0x09
    6130:	8a 85       	ldd	r24, Y+10	; 0x0a
    6132:	9b 85       	ldd	r25, Y+11	; 0x0b
    6134:	20 e0       	ldi	r18, 0x00	; 0
    6136:	30 e0       	ldi	r19, 0x00	; 0
    6138:	40 e8       	ldi	r20, 0x80	; 128
    613a:	5f e3       	ldi	r21, 0x3F	; 63
    613c:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    6140:	88 23       	and	r24, r24
    6142:	2c f4       	brge	.+10     	; 0x614e <LCD_FunctionSet+0x12e>
		__ticks = 1;
    6144:	81 e0       	ldi	r24, 0x01	; 1
    6146:	90 e0       	ldi	r25, 0x00	; 0
    6148:	9f 83       	std	Y+7, r25	; 0x07
    614a:	8e 83       	std	Y+6, r24	; 0x06
    614c:	3f c0       	rjmp	.+126    	; 0x61cc <LCD_FunctionSet+0x1ac>
	else if (__tmp > 65535)
    614e:	68 85       	ldd	r22, Y+8	; 0x08
    6150:	79 85       	ldd	r23, Y+9	; 0x09
    6152:	8a 85       	ldd	r24, Y+10	; 0x0a
    6154:	9b 85       	ldd	r25, Y+11	; 0x0b
    6156:	20 e0       	ldi	r18, 0x00	; 0
    6158:	3f ef       	ldi	r19, 0xFF	; 255
    615a:	4f e7       	ldi	r20, 0x7F	; 127
    615c:	57 e4       	ldi	r21, 0x47	; 71
    615e:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    6162:	18 16       	cp	r1, r24
    6164:	4c f5       	brge	.+82     	; 0x61b8 <LCD_FunctionSet+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6166:	6c 85       	ldd	r22, Y+12	; 0x0c
    6168:	7d 85       	ldd	r23, Y+13	; 0x0d
    616a:	8e 85       	ldd	r24, Y+14	; 0x0e
    616c:	9f 85       	ldd	r25, Y+15	; 0x0f
    616e:	20 e0       	ldi	r18, 0x00	; 0
    6170:	30 e0       	ldi	r19, 0x00	; 0
    6172:	40 e2       	ldi	r20, 0x20	; 32
    6174:	51 e4       	ldi	r21, 0x41	; 65
    6176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    617a:	dc 01       	movw	r26, r24
    617c:	cb 01       	movw	r24, r22
    617e:	bc 01       	movw	r22, r24
    6180:	cd 01       	movw	r24, r26
    6182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6186:	dc 01       	movw	r26, r24
    6188:	cb 01       	movw	r24, r22
    618a:	9f 83       	std	Y+7, r25	; 0x07
    618c:	8e 83       	std	Y+6, r24	; 0x06
    618e:	0f c0       	rjmp	.+30     	; 0x61ae <LCD_FunctionSet+0x18e>
    6190:	80 e9       	ldi	r24, 0x90	; 144
    6192:	91 e0       	ldi	r25, 0x01	; 1
    6194:	9d 83       	std	Y+5, r25	; 0x05
    6196:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6198:	8c 81       	ldd	r24, Y+4	; 0x04
    619a:	9d 81       	ldd	r25, Y+5	; 0x05
    619c:	01 97       	sbiw	r24, 0x01	; 1
    619e:	f1 f7       	brne	.-4      	; 0x619c <LCD_FunctionSet+0x17c>
    61a0:	9d 83       	std	Y+5, r25	; 0x05
    61a2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61a4:	8e 81       	ldd	r24, Y+6	; 0x06
    61a6:	9f 81       	ldd	r25, Y+7	; 0x07
    61a8:	01 97       	sbiw	r24, 0x01	; 1
    61aa:	9f 83       	std	Y+7, r25	; 0x07
    61ac:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61ae:	8e 81       	ldd	r24, Y+6	; 0x06
    61b0:	9f 81       	ldd	r25, Y+7	; 0x07
    61b2:	00 97       	sbiw	r24, 0x00	; 0
    61b4:	69 f7       	brne	.-38     	; 0x6190 <LCD_FunctionSet+0x170>
    61b6:	24 c0       	rjmp	.+72     	; 0x6200 <LCD_FunctionSet+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61b8:	68 85       	ldd	r22, Y+8	; 0x08
    61ba:	79 85       	ldd	r23, Y+9	; 0x09
    61bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    61be:	9b 85       	ldd	r25, Y+11	; 0x0b
    61c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61c4:	dc 01       	movw	r26, r24
    61c6:	cb 01       	movw	r24, r22
    61c8:	9f 83       	std	Y+7, r25	; 0x07
    61ca:	8e 83       	std	Y+6, r24	; 0x06
    61cc:	8e 81       	ldd	r24, Y+6	; 0x06
    61ce:	9f 81       	ldd	r25, Y+7	; 0x07
    61d0:	9b 83       	std	Y+3, r25	; 0x03
    61d2:	8a 83       	std	Y+2, r24	; 0x02
    61d4:	8a 81       	ldd	r24, Y+2	; 0x02
    61d6:	9b 81       	ldd	r25, Y+3	; 0x03
    61d8:	01 97       	sbiw	r24, 0x01	; 1
    61da:	f1 f7       	brne	.-4      	; 0x61d8 <LCD_FunctionSet+0x1b8>
    61dc:	9b 83       	std	Y+3, r25	; 0x03
    61de:	8a 83       	std	Y+2, r24	; 0x02
    61e0:	0f c0       	rjmp	.+30     	; 0x6200 <LCD_FunctionSet+0x1e0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    61e2:	69 89       	ldd	r22, Y+17	; 0x11
    61e4:	7a 89       	ldd	r23, Y+18	; 0x12
    61e6:	8b 89       	ldd	r24, Y+19	; 0x13
    61e8:	9c 89       	ldd	r25, Y+20	; 0x14
    61ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61ee:	dc 01       	movw	r26, r24
    61f0:	cb 01       	movw	r24, r22
    61f2:	88 8b       	std	Y+16, r24	; 0x10
    61f4:	88 89       	ldd	r24, Y+16	; 0x10
    61f6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    61f8:	89 81       	ldd	r24, Y+1	; 0x01
    61fa:	8a 95       	dec	r24
    61fc:	f1 f7       	brne	.-4      	; 0x61fa <LCD_FunctionSet+0x1da>
    61fe:	89 83       	std	Y+1, r24	; 0x01
	// The maximum execution time is in nanoseconds for our 16MHz f(OSC), so it could be approximated to be 1us.
	_delay_us(1);
}
    6200:	6b 96       	adiw	r28, 0x1b	; 27
    6202:	0f b6       	in	r0, 0x3f	; 63
    6204:	f8 94       	cli
    6206:	de bf       	out	0x3e, r29	; 62
    6208:	0f be       	out	0x3f, r0	; 63
    620a:	cd bf       	out	0x3d, r28	; 61
    620c:	cf 91       	pop	r28
    620e:	df 91       	pop	r29
    6210:	08 95       	ret

00006212 <LCD_SetCGRAMAddress>:

void LCD_SetCGRAMAddress(u8_t address){
    6212:	df 93       	push	r29
    6214:	cf 93       	push	r28
    6216:	cd b7       	in	r28, 0x3d	; 61
    6218:	de b7       	in	r29, 0x3e	; 62
    621a:	69 97       	sbiw	r28, 0x19	; 25
    621c:	0f b6       	in	r0, 0x3f	; 63
    621e:	f8 94       	cli
    6220:	de bf       	out	0x3e, r29	; 62
    6222:	0f be       	out	0x3f, r0	; 63
    6224:	cd bf       	out	0x3d, r28	; 61
    6226:	89 8f       	std	Y+25, r24	; 0x19
	address &= 0b00111111; // Address is ANDed with 0b111111 to ensure it is in the range(0:31)
    6228:	89 8d       	ldd	r24, Y+25	; 0x19
    622a:	8f 73       	andi	r24, 0x3F	; 63
    622c:	89 8f       	std	Y+25, r24	; 0x19
	LCD_SendInstruction((1 << D6) | address);
    622e:	89 8d       	ldd	r24, Y+25	; 0x19
    6230:	80 64       	ori	r24, 0x40	; 64
    6232:	0e 94 92 28 	call	0x5124	; 0x5124 <LCD_SendInstruction>
    6236:	80 e0       	ldi	r24, 0x00	; 0
    6238:	90 e0       	ldi	r25, 0x00	; 0
    623a:	a0 e8       	ldi	r26, 0x80	; 128
    623c:	bf e3       	ldi	r27, 0x3F	; 63
    623e:	8d 8b       	std	Y+21, r24	; 0x15
    6240:	9e 8b       	std	Y+22, r25	; 0x16
    6242:	af 8b       	std	Y+23, r26	; 0x17
    6244:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    6246:	6d 89       	ldd	r22, Y+21	; 0x15
    6248:	7e 89       	ldd	r23, Y+22	; 0x16
    624a:	8f 89       	ldd	r24, Y+23	; 0x17
    624c:	98 8d       	ldd	r25, Y+24	; 0x18
    624e:	2b ea       	ldi	r18, 0xAB	; 171
    6250:	3a ea       	ldi	r19, 0xAA	; 170
    6252:	4a ea       	ldi	r20, 0xAA	; 170
    6254:	50 e4       	ldi	r21, 0x40	; 64
    6256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    625a:	dc 01       	movw	r26, r24
    625c:	cb 01       	movw	r24, r22
    625e:	89 8b       	std	Y+17, r24	; 0x11
    6260:	9a 8b       	std	Y+18, r25	; 0x12
    6262:	ab 8b       	std	Y+19, r26	; 0x13
    6264:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    6266:	69 89       	ldd	r22, Y+17	; 0x11
    6268:	7a 89       	ldd	r23, Y+18	; 0x12
    626a:	8b 89       	ldd	r24, Y+19	; 0x13
    626c:	9c 89       	ldd	r25, Y+20	; 0x14
    626e:	20 e0       	ldi	r18, 0x00	; 0
    6270:	30 e0       	ldi	r19, 0x00	; 0
    6272:	40 e8       	ldi	r20, 0x80	; 128
    6274:	5f e3       	ldi	r21, 0x3F	; 63
    6276:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    627a:	88 23       	and	r24, r24
    627c:	1c f4       	brge	.+6      	; 0x6284 <LCD_SetCGRAMAddress+0x72>
		__ticks = 1;
    627e:	81 e0       	ldi	r24, 0x01	; 1
    6280:	88 8b       	std	Y+16, r24	; 0x10
    6282:	91 c0       	rjmp	.+290    	; 0x63a6 <LCD_SetCGRAMAddress+0x194>
	else if (__tmp > 255)
    6284:	69 89       	ldd	r22, Y+17	; 0x11
    6286:	7a 89       	ldd	r23, Y+18	; 0x12
    6288:	8b 89       	ldd	r24, Y+19	; 0x13
    628a:	9c 89       	ldd	r25, Y+20	; 0x14
    628c:	20 e0       	ldi	r18, 0x00	; 0
    628e:	30 e0       	ldi	r19, 0x00	; 0
    6290:	4f e7       	ldi	r20, 0x7F	; 127
    6292:	53 e4       	ldi	r21, 0x43	; 67
    6294:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    6298:	18 16       	cp	r1, r24
    629a:	0c f0       	brlt	.+2      	; 0x629e <LCD_SetCGRAMAddress+0x8c>
    629c:	7b c0       	rjmp	.+246    	; 0x6394 <LCD_SetCGRAMAddress+0x182>
	{
		_delay_ms(__us / 1000.0);
    629e:	6d 89       	ldd	r22, Y+21	; 0x15
    62a0:	7e 89       	ldd	r23, Y+22	; 0x16
    62a2:	8f 89       	ldd	r24, Y+23	; 0x17
    62a4:	98 8d       	ldd	r25, Y+24	; 0x18
    62a6:	20 e0       	ldi	r18, 0x00	; 0
    62a8:	30 e0       	ldi	r19, 0x00	; 0
    62aa:	4a e7       	ldi	r20, 0x7A	; 122
    62ac:	54 e4       	ldi	r21, 0x44	; 68
    62ae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    62b2:	dc 01       	movw	r26, r24
    62b4:	cb 01       	movw	r24, r22
    62b6:	8c 87       	std	Y+12, r24	; 0x0c
    62b8:	9d 87       	std	Y+13, r25	; 0x0d
    62ba:	ae 87       	std	Y+14, r26	; 0x0e
    62bc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62be:	6c 85       	ldd	r22, Y+12	; 0x0c
    62c0:	7d 85       	ldd	r23, Y+13	; 0x0d
    62c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    62c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    62c6:	20 e0       	ldi	r18, 0x00	; 0
    62c8:	30 e0       	ldi	r19, 0x00	; 0
    62ca:	4a e7       	ldi	r20, 0x7A	; 122
    62cc:	55 e4       	ldi	r21, 0x45	; 69
    62ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62d2:	dc 01       	movw	r26, r24
    62d4:	cb 01       	movw	r24, r22
    62d6:	88 87       	std	Y+8, r24	; 0x08
    62d8:	99 87       	std	Y+9, r25	; 0x09
    62da:	aa 87       	std	Y+10, r26	; 0x0a
    62dc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    62de:	68 85       	ldd	r22, Y+8	; 0x08
    62e0:	79 85       	ldd	r23, Y+9	; 0x09
    62e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    62e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    62e6:	20 e0       	ldi	r18, 0x00	; 0
    62e8:	30 e0       	ldi	r19, 0x00	; 0
    62ea:	40 e8       	ldi	r20, 0x80	; 128
    62ec:	5f e3       	ldi	r21, 0x3F	; 63
    62ee:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    62f2:	88 23       	and	r24, r24
    62f4:	2c f4       	brge	.+10     	; 0x6300 <LCD_SetCGRAMAddress+0xee>
		__ticks = 1;
    62f6:	81 e0       	ldi	r24, 0x01	; 1
    62f8:	90 e0       	ldi	r25, 0x00	; 0
    62fa:	9f 83       	std	Y+7, r25	; 0x07
    62fc:	8e 83       	std	Y+6, r24	; 0x06
    62fe:	3f c0       	rjmp	.+126    	; 0x637e <LCD_SetCGRAMAddress+0x16c>
	else if (__tmp > 65535)
    6300:	68 85       	ldd	r22, Y+8	; 0x08
    6302:	79 85       	ldd	r23, Y+9	; 0x09
    6304:	8a 85       	ldd	r24, Y+10	; 0x0a
    6306:	9b 85       	ldd	r25, Y+11	; 0x0b
    6308:	20 e0       	ldi	r18, 0x00	; 0
    630a:	3f ef       	ldi	r19, 0xFF	; 255
    630c:	4f e7       	ldi	r20, 0x7F	; 127
    630e:	57 e4       	ldi	r21, 0x47	; 71
    6310:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    6314:	18 16       	cp	r1, r24
    6316:	4c f5       	brge	.+82     	; 0x636a <LCD_SetCGRAMAddress+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6318:	6c 85       	ldd	r22, Y+12	; 0x0c
    631a:	7d 85       	ldd	r23, Y+13	; 0x0d
    631c:	8e 85       	ldd	r24, Y+14	; 0x0e
    631e:	9f 85       	ldd	r25, Y+15	; 0x0f
    6320:	20 e0       	ldi	r18, 0x00	; 0
    6322:	30 e0       	ldi	r19, 0x00	; 0
    6324:	40 e2       	ldi	r20, 0x20	; 32
    6326:	51 e4       	ldi	r21, 0x41	; 65
    6328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    632c:	dc 01       	movw	r26, r24
    632e:	cb 01       	movw	r24, r22
    6330:	bc 01       	movw	r22, r24
    6332:	cd 01       	movw	r24, r26
    6334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6338:	dc 01       	movw	r26, r24
    633a:	cb 01       	movw	r24, r22
    633c:	9f 83       	std	Y+7, r25	; 0x07
    633e:	8e 83       	std	Y+6, r24	; 0x06
    6340:	0f c0       	rjmp	.+30     	; 0x6360 <LCD_SetCGRAMAddress+0x14e>
    6342:	80 e9       	ldi	r24, 0x90	; 144
    6344:	91 e0       	ldi	r25, 0x01	; 1
    6346:	9d 83       	std	Y+5, r25	; 0x05
    6348:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    634a:	8c 81       	ldd	r24, Y+4	; 0x04
    634c:	9d 81       	ldd	r25, Y+5	; 0x05
    634e:	01 97       	sbiw	r24, 0x01	; 1
    6350:	f1 f7       	brne	.-4      	; 0x634e <LCD_SetCGRAMAddress+0x13c>
    6352:	9d 83       	std	Y+5, r25	; 0x05
    6354:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6356:	8e 81       	ldd	r24, Y+6	; 0x06
    6358:	9f 81       	ldd	r25, Y+7	; 0x07
    635a:	01 97       	sbiw	r24, 0x01	; 1
    635c:	9f 83       	std	Y+7, r25	; 0x07
    635e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6360:	8e 81       	ldd	r24, Y+6	; 0x06
    6362:	9f 81       	ldd	r25, Y+7	; 0x07
    6364:	00 97       	sbiw	r24, 0x00	; 0
    6366:	69 f7       	brne	.-38     	; 0x6342 <LCD_SetCGRAMAddress+0x130>
    6368:	24 c0       	rjmp	.+72     	; 0x63b2 <LCD_SetCGRAMAddress+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    636a:	68 85       	ldd	r22, Y+8	; 0x08
    636c:	79 85       	ldd	r23, Y+9	; 0x09
    636e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6370:	9b 85       	ldd	r25, Y+11	; 0x0b
    6372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6376:	dc 01       	movw	r26, r24
    6378:	cb 01       	movw	r24, r22
    637a:	9f 83       	std	Y+7, r25	; 0x07
    637c:	8e 83       	std	Y+6, r24	; 0x06
    637e:	8e 81       	ldd	r24, Y+6	; 0x06
    6380:	9f 81       	ldd	r25, Y+7	; 0x07
    6382:	9b 83       	std	Y+3, r25	; 0x03
    6384:	8a 83       	std	Y+2, r24	; 0x02
    6386:	8a 81       	ldd	r24, Y+2	; 0x02
    6388:	9b 81       	ldd	r25, Y+3	; 0x03
    638a:	01 97       	sbiw	r24, 0x01	; 1
    638c:	f1 f7       	brne	.-4      	; 0x638a <LCD_SetCGRAMAddress+0x178>
    638e:	9b 83       	std	Y+3, r25	; 0x03
    6390:	8a 83       	std	Y+2, r24	; 0x02
    6392:	0f c0       	rjmp	.+30     	; 0x63b2 <LCD_SetCGRAMAddress+0x1a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6394:	69 89       	ldd	r22, Y+17	; 0x11
    6396:	7a 89       	ldd	r23, Y+18	; 0x12
    6398:	8b 89       	ldd	r24, Y+19	; 0x13
    639a:	9c 89       	ldd	r25, Y+20	; 0x14
    639c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63a0:	dc 01       	movw	r26, r24
    63a2:	cb 01       	movw	r24, r22
    63a4:	88 8b       	std	Y+16, r24	; 0x10
    63a6:	88 89       	ldd	r24, Y+16	; 0x10
    63a8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    63aa:	89 81       	ldd	r24, Y+1	; 0x01
    63ac:	8a 95       	dec	r24
    63ae:	f1 f7       	brne	.-4      	; 0x63ac <LCD_SetCGRAMAddress+0x19a>
    63b0:	89 83       	std	Y+1, r24	; 0x01
	// The maximum execution time is in nanoseconds for our 16MHz f(OSC), so it could be approximated to be 1us.
	_delay_us(1);
}
    63b2:	69 96       	adiw	r28, 0x19	; 25
    63b4:	0f b6       	in	r0, 0x3f	; 63
    63b6:	f8 94       	cli
    63b8:	de bf       	out	0x3e, r29	; 62
    63ba:	0f be       	out	0x3f, r0	; 63
    63bc:	cd bf       	out	0x3d, r28	; 61
    63be:	cf 91       	pop	r28
    63c0:	df 91       	pop	r29
    63c2:	08 95       	ret

000063c4 <LCD_SetDDRAMAddress>:

void LCD_SetDDRAMAddress(u8_t address){
    63c4:	df 93       	push	r29
    63c6:	cf 93       	push	r28
    63c8:	cd b7       	in	r28, 0x3d	; 61
    63ca:	de b7       	in	r29, 0x3e	; 62
    63cc:	69 97       	sbiw	r28, 0x19	; 25
    63ce:	0f b6       	in	r0, 0x3f	; 63
    63d0:	f8 94       	cli
    63d2:	de bf       	out	0x3e, r29	; 62
    63d4:	0f be       	out	0x3f, r0	; 63
    63d6:	cd bf       	out	0x3d, r28	; 61
    63d8:	89 8f       	std	Y+25, r24	; 0x19
	address &= 0b01111111; // Address is ANDed with 0b111111 to ensure it is in the range(0:63)
    63da:	89 8d       	ldd	r24, Y+25	; 0x19
    63dc:	8f 77       	andi	r24, 0x7F	; 127
    63de:	89 8f       	std	Y+25, r24	; 0x19
	LCD_SendInstruction((1 << D7) | address);
    63e0:	89 8d       	ldd	r24, Y+25	; 0x19
    63e2:	80 68       	ori	r24, 0x80	; 128
    63e4:	0e 94 92 28 	call	0x5124	; 0x5124 <LCD_SendInstruction>
    63e8:	80 e0       	ldi	r24, 0x00	; 0
    63ea:	90 e0       	ldi	r25, 0x00	; 0
    63ec:	a0 e8       	ldi	r26, 0x80	; 128
    63ee:	bf e3       	ldi	r27, 0x3F	; 63
    63f0:	8d 8b       	std	Y+21, r24	; 0x15
    63f2:	9e 8b       	std	Y+22, r25	; 0x16
    63f4:	af 8b       	std	Y+23, r26	; 0x17
    63f6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    63f8:	6d 89       	ldd	r22, Y+21	; 0x15
    63fa:	7e 89       	ldd	r23, Y+22	; 0x16
    63fc:	8f 89       	ldd	r24, Y+23	; 0x17
    63fe:	98 8d       	ldd	r25, Y+24	; 0x18
    6400:	2b ea       	ldi	r18, 0xAB	; 171
    6402:	3a ea       	ldi	r19, 0xAA	; 170
    6404:	4a ea       	ldi	r20, 0xAA	; 170
    6406:	50 e4       	ldi	r21, 0x40	; 64
    6408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    640c:	dc 01       	movw	r26, r24
    640e:	cb 01       	movw	r24, r22
    6410:	89 8b       	std	Y+17, r24	; 0x11
    6412:	9a 8b       	std	Y+18, r25	; 0x12
    6414:	ab 8b       	std	Y+19, r26	; 0x13
    6416:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    6418:	69 89       	ldd	r22, Y+17	; 0x11
    641a:	7a 89       	ldd	r23, Y+18	; 0x12
    641c:	8b 89       	ldd	r24, Y+19	; 0x13
    641e:	9c 89       	ldd	r25, Y+20	; 0x14
    6420:	20 e0       	ldi	r18, 0x00	; 0
    6422:	30 e0       	ldi	r19, 0x00	; 0
    6424:	40 e8       	ldi	r20, 0x80	; 128
    6426:	5f e3       	ldi	r21, 0x3F	; 63
    6428:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    642c:	88 23       	and	r24, r24
    642e:	1c f4       	brge	.+6      	; 0x6436 <LCD_SetDDRAMAddress+0x72>
		__ticks = 1;
    6430:	81 e0       	ldi	r24, 0x01	; 1
    6432:	88 8b       	std	Y+16, r24	; 0x10
    6434:	91 c0       	rjmp	.+290    	; 0x6558 <LCD_SetDDRAMAddress+0x194>
	else if (__tmp > 255)
    6436:	69 89       	ldd	r22, Y+17	; 0x11
    6438:	7a 89       	ldd	r23, Y+18	; 0x12
    643a:	8b 89       	ldd	r24, Y+19	; 0x13
    643c:	9c 89       	ldd	r25, Y+20	; 0x14
    643e:	20 e0       	ldi	r18, 0x00	; 0
    6440:	30 e0       	ldi	r19, 0x00	; 0
    6442:	4f e7       	ldi	r20, 0x7F	; 127
    6444:	53 e4       	ldi	r21, 0x43	; 67
    6446:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    644a:	18 16       	cp	r1, r24
    644c:	0c f0       	brlt	.+2      	; 0x6450 <LCD_SetDDRAMAddress+0x8c>
    644e:	7b c0       	rjmp	.+246    	; 0x6546 <LCD_SetDDRAMAddress+0x182>
	{
		_delay_ms(__us / 1000.0);
    6450:	6d 89       	ldd	r22, Y+21	; 0x15
    6452:	7e 89       	ldd	r23, Y+22	; 0x16
    6454:	8f 89       	ldd	r24, Y+23	; 0x17
    6456:	98 8d       	ldd	r25, Y+24	; 0x18
    6458:	20 e0       	ldi	r18, 0x00	; 0
    645a:	30 e0       	ldi	r19, 0x00	; 0
    645c:	4a e7       	ldi	r20, 0x7A	; 122
    645e:	54 e4       	ldi	r21, 0x44	; 68
    6460:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6464:	dc 01       	movw	r26, r24
    6466:	cb 01       	movw	r24, r22
    6468:	8c 87       	std	Y+12, r24	; 0x0c
    646a:	9d 87       	std	Y+13, r25	; 0x0d
    646c:	ae 87       	std	Y+14, r26	; 0x0e
    646e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6470:	6c 85       	ldd	r22, Y+12	; 0x0c
    6472:	7d 85       	ldd	r23, Y+13	; 0x0d
    6474:	8e 85       	ldd	r24, Y+14	; 0x0e
    6476:	9f 85       	ldd	r25, Y+15	; 0x0f
    6478:	20 e0       	ldi	r18, 0x00	; 0
    647a:	30 e0       	ldi	r19, 0x00	; 0
    647c:	4a e7       	ldi	r20, 0x7A	; 122
    647e:	55 e4       	ldi	r21, 0x45	; 69
    6480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6484:	dc 01       	movw	r26, r24
    6486:	cb 01       	movw	r24, r22
    6488:	88 87       	std	Y+8, r24	; 0x08
    648a:	99 87       	std	Y+9, r25	; 0x09
    648c:	aa 87       	std	Y+10, r26	; 0x0a
    648e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    6490:	68 85       	ldd	r22, Y+8	; 0x08
    6492:	79 85       	ldd	r23, Y+9	; 0x09
    6494:	8a 85       	ldd	r24, Y+10	; 0x0a
    6496:	9b 85       	ldd	r25, Y+11	; 0x0b
    6498:	20 e0       	ldi	r18, 0x00	; 0
    649a:	30 e0       	ldi	r19, 0x00	; 0
    649c:	40 e8       	ldi	r20, 0x80	; 128
    649e:	5f e3       	ldi	r21, 0x3F	; 63
    64a0:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    64a4:	88 23       	and	r24, r24
    64a6:	2c f4       	brge	.+10     	; 0x64b2 <LCD_SetDDRAMAddress+0xee>
		__ticks = 1;
    64a8:	81 e0       	ldi	r24, 0x01	; 1
    64aa:	90 e0       	ldi	r25, 0x00	; 0
    64ac:	9f 83       	std	Y+7, r25	; 0x07
    64ae:	8e 83       	std	Y+6, r24	; 0x06
    64b0:	3f c0       	rjmp	.+126    	; 0x6530 <LCD_SetDDRAMAddress+0x16c>
	else if (__tmp > 65535)
    64b2:	68 85       	ldd	r22, Y+8	; 0x08
    64b4:	79 85       	ldd	r23, Y+9	; 0x09
    64b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    64b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    64ba:	20 e0       	ldi	r18, 0x00	; 0
    64bc:	3f ef       	ldi	r19, 0xFF	; 255
    64be:	4f e7       	ldi	r20, 0x7F	; 127
    64c0:	57 e4       	ldi	r21, 0x47	; 71
    64c2:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    64c6:	18 16       	cp	r1, r24
    64c8:	4c f5       	brge	.+82     	; 0x651c <LCD_SetDDRAMAddress+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    64ca:	6c 85       	ldd	r22, Y+12	; 0x0c
    64cc:	7d 85       	ldd	r23, Y+13	; 0x0d
    64ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    64d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    64d2:	20 e0       	ldi	r18, 0x00	; 0
    64d4:	30 e0       	ldi	r19, 0x00	; 0
    64d6:	40 e2       	ldi	r20, 0x20	; 32
    64d8:	51 e4       	ldi	r21, 0x41	; 65
    64da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    64de:	dc 01       	movw	r26, r24
    64e0:	cb 01       	movw	r24, r22
    64e2:	bc 01       	movw	r22, r24
    64e4:	cd 01       	movw	r24, r26
    64e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64ea:	dc 01       	movw	r26, r24
    64ec:	cb 01       	movw	r24, r22
    64ee:	9f 83       	std	Y+7, r25	; 0x07
    64f0:	8e 83       	std	Y+6, r24	; 0x06
    64f2:	0f c0       	rjmp	.+30     	; 0x6512 <LCD_SetDDRAMAddress+0x14e>
    64f4:	80 e9       	ldi	r24, 0x90	; 144
    64f6:	91 e0       	ldi	r25, 0x01	; 1
    64f8:	9d 83       	std	Y+5, r25	; 0x05
    64fa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    64fc:	8c 81       	ldd	r24, Y+4	; 0x04
    64fe:	9d 81       	ldd	r25, Y+5	; 0x05
    6500:	01 97       	sbiw	r24, 0x01	; 1
    6502:	f1 f7       	brne	.-4      	; 0x6500 <LCD_SetDDRAMAddress+0x13c>
    6504:	9d 83       	std	Y+5, r25	; 0x05
    6506:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6508:	8e 81       	ldd	r24, Y+6	; 0x06
    650a:	9f 81       	ldd	r25, Y+7	; 0x07
    650c:	01 97       	sbiw	r24, 0x01	; 1
    650e:	9f 83       	std	Y+7, r25	; 0x07
    6510:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6512:	8e 81       	ldd	r24, Y+6	; 0x06
    6514:	9f 81       	ldd	r25, Y+7	; 0x07
    6516:	00 97       	sbiw	r24, 0x00	; 0
    6518:	69 f7       	brne	.-38     	; 0x64f4 <LCD_SetDDRAMAddress+0x130>
    651a:	24 c0       	rjmp	.+72     	; 0x6564 <LCD_SetDDRAMAddress+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    651c:	68 85       	ldd	r22, Y+8	; 0x08
    651e:	79 85       	ldd	r23, Y+9	; 0x09
    6520:	8a 85       	ldd	r24, Y+10	; 0x0a
    6522:	9b 85       	ldd	r25, Y+11	; 0x0b
    6524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6528:	dc 01       	movw	r26, r24
    652a:	cb 01       	movw	r24, r22
    652c:	9f 83       	std	Y+7, r25	; 0x07
    652e:	8e 83       	std	Y+6, r24	; 0x06
    6530:	8e 81       	ldd	r24, Y+6	; 0x06
    6532:	9f 81       	ldd	r25, Y+7	; 0x07
    6534:	9b 83       	std	Y+3, r25	; 0x03
    6536:	8a 83       	std	Y+2, r24	; 0x02
    6538:	8a 81       	ldd	r24, Y+2	; 0x02
    653a:	9b 81       	ldd	r25, Y+3	; 0x03
    653c:	01 97       	sbiw	r24, 0x01	; 1
    653e:	f1 f7       	brne	.-4      	; 0x653c <LCD_SetDDRAMAddress+0x178>
    6540:	9b 83       	std	Y+3, r25	; 0x03
    6542:	8a 83       	std	Y+2, r24	; 0x02
    6544:	0f c0       	rjmp	.+30     	; 0x6564 <LCD_SetDDRAMAddress+0x1a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6546:	69 89       	ldd	r22, Y+17	; 0x11
    6548:	7a 89       	ldd	r23, Y+18	; 0x12
    654a:	8b 89       	ldd	r24, Y+19	; 0x13
    654c:	9c 89       	ldd	r25, Y+20	; 0x14
    654e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6552:	dc 01       	movw	r26, r24
    6554:	cb 01       	movw	r24, r22
    6556:	88 8b       	std	Y+16, r24	; 0x10
    6558:	88 89       	ldd	r24, Y+16	; 0x10
    655a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    655c:	89 81       	ldd	r24, Y+1	; 0x01
    655e:	8a 95       	dec	r24
    6560:	f1 f7       	brne	.-4      	; 0x655e <LCD_SetDDRAMAddress+0x19a>
    6562:	89 83       	std	Y+1, r24	; 0x01
	// The maximum execution time is in nanoseconds for our 16MHz f(OSC), so it could be approximated to be 1us.
	_delay_us(1);
}
    6564:	69 96       	adiw	r28, 0x19	; 25
    6566:	0f b6       	in	r0, 0x3f	; 63
    6568:	f8 94       	cli
    656a:	de bf       	out	0x3e, r29	; 62
    656c:	0f be       	out	0x3f, r0	; 63
    656e:	cd bf       	out	0x3d, r28	; 61
    6570:	cf 91       	pop	r28
    6572:	df 91       	pop	r29
    6574:	08 95       	ret

00006576 <LCD_EnablePulse>:

void LCD_EnablePulse(void){
    6576:	df 93       	push	r29
    6578:	cf 93       	push	r28
    657a:	cd b7       	in	r28, 0x3d	; 61
    657c:	de b7       	in	r29, 0x3e	; 62
    657e:	2e 97       	sbiw	r28, 0x0e	; 14
    6580:	0f b6       	in	r0, 0x3f	; 63
    6582:	f8 94       	cli
    6584:	de bf       	out	0x3e, r29	; 62
    6586:	0f be       	out	0x3f, r0	; 63
    6588:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinValue(Control_Port, E, PIN_HIGH);
    658a:	81 e0       	ldi	r24, 0x01	; 1
    658c:	63 e0       	ldi	r22, 0x03	; 3
    658e:	41 e0       	ldi	r20, 0x01	; 1
    6590:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
    6594:	80 e0       	ldi	r24, 0x00	; 0
    6596:	90 e0       	ldi	r25, 0x00	; 0
    6598:	a0 e8       	ldi	r26, 0x80	; 128
    659a:	bf e3       	ldi	r27, 0x3F	; 63
    659c:	8b 87       	std	Y+11, r24	; 0x0b
    659e:	9c 87       	std	Y+12, r25	; 0x0c
    65a0:	ad 87       	std	Y+13, r26	; 0x0d
    65a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    65a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    65a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    65a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    65aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    65ac:	20 e0       	ldi	r18, 0x00	; 0
    65ae:	30 e0       	ldi	r19, 0x00	; 0
    65b0:	4a e7       	ldi	r20, 0x7A	; 122
    65b2:	55 e4       	ldi	r21, 0x45	; 69
    65b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    65b8:	dc 01       	movw	r26, r24
    65ba:	cb 01       	movw	r24, r22
    65bc:	8f 83       	std	Y+7, r24	; 0x07
    65be:	98 87       	std	Y+8, r25	; 0x08
    65c0:	a9 87       	std	Y+9, r26	; 0x09
    65c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    65c4:	6f 81       	ldd	r22, Y+7	; 0x07
    65c6:	78 85       	ldd	r23, Y+8	; 0x08
    65c8:	89 85       	ldd	r24, Y+9	; 0x09
    65ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    65cc:	20 e0       	ldi	r18, 0x00	; 0
    65ce:	30 e0       	ldi	r19, 0x00	; 0
    65d0:	40 e8       	ldi	r20, 0x80	; 128
    65d2:	5f e3       	ldi	r21, 0x3F	; 63
    65d4:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    65d8:	88 23       	and	r24, r24
    65da:	2c f4       	brge	.+10     	; 0x65e6 <LCD_EnablePulse+0x70>
		__ticks = 1;
    65dc:	81 e0       	ldi	r24, 0x01	; 1
    65de:	90 e0       	ldi	r25, 0x00	; 0
    65e0:	9e 83       	std	Y+6, r25	; 0x06
    65e2:	8d 83       	std	Y+5, r24	; 0x05
    65e4:	3f c0       	rjmp	.+126    	; 0x6664 <LCD_EnablePulse+0xee>
	else if (__tmp > 65535)
    65e6:	6f 81       	ldd	r22, Y+7	; 0x07
    65e8:	78 85       	ldd	r23, Y+8	; 0x08
    65ea:	89 85       	ldd	r24, Y+9	; 0x09
    65ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    65ee:	20 e0       	ldi	r18, 0x00	; 0
    65f0:	3f ef       	ldi	r19, 0xFF	; 255
    65f2:	4f e7       	ldi	r20, 0x7F	; 127
    65f4:	57 e4       	ldi	r21, 0x47	; 71
    65f6:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    65fa:	18 16       	cp	r1, r24
    65fc:	4c f5       	brge	.+82     	; 0x6650 <LCD_EnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    6600:	7c 85       	ldd	r23, Y+12	; 0x0c
    6602:	8d 85       	ldd	r24, Y+13	; 0x0d
    6604:	9e 85       	ldd	r25, Y+14	; 0x0e
    6606:	20 e0       	ldi	r18, 0x00	; 0
    6608:	30 e0       	ldi	r19, 0x00	; 0
    660a:	40 e2       	ldi	r20, 0x20	; 32
    660c:	51 e4       	ldi	r21, 0x41	; 65
    660e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6612:	dc 01       	movw	r26, r24
    6614:	cb 01       	movw	r24, r22
    6616:	bc 01       	movw	r22, r24
    6618:	cd 01       	movw	r24, r26
    661a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    661e:	dc 01       	movw	r26, r24
    6620:	cb 01       	movw	r24, r22
    6622:	9e 83       	std	Y+6, r25	; 0x06
    6624:	8d 83       	std	Y+5, r24	; 0x05
    6626:	0f c0       	rjmp	.+30     	; 0x6646 <LCD_EnablePulse+0xd0>
    6628:	80 e9       	ldi	r24, 0x90	; 144
    662a:	91 e0       	ldi	r25, 0x01	; 1
    662c:	9c 83       	std	Y+4, r25	; 0x04
    662e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6630:	8b 81       	ldd	r24, Y+3	; 0x03
    6632:	9c 81       	ldd	r25, Y+4	; 0x04
    6634:	01 97       	sbiw	r24, 0x01	; 1
    6636:	f1 f7       	brne	.-4      	; 0x6634 <LCD_EnablePulse+0xbe>
    6638:	9c 83       	std	Y+4, r25	; 0x04
    663a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    663c:	8d 81       	ldd	r24, Y+5	; 0x05
    663e:	9e 81       	ldd	r25, Y+6	; 0x06
    6640:	01 97       	sbiw	r24, 0x01	; 1
    6642:	9e 83       	std	Y+6, r25	; 0x06
    6644:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6646:	8d 81       	ldd	r24, Y+5	; 0x05
    6648:	9e 81       	ldd	r25, Y+6	; 0x06
    664a:	00 97       	sbiw	r24, 0x00	; 0
    664c:	69 f7       	brne	.-38     	; 0x6628 <LCD_EnablePulse+0xb2>
    664e:	14 c0       	rjmp	.+40     	; 0x6678 <LCD_EnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6650:	6f 81       	ldd	r22, Y+7	; 0x07
    6652:	78 85       	ldd	r23, Y+8	; 0x08
    6654:	89 85       	ldd	r24, Y+9	; 0x09
    6656:	9a 85       	ldd	r25, Y+10	; 0x0a
    6658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    665c:	dc 01       	movw	r26, r24
    665e:	cb 01       	movw	r24, r22
    6660:	9e 83       	std	Y+6, r25	; 0x06
    6662:	8d 83       	std	Y+5, r24	; 0x05
    6664:	8d 81       	ldd	r24, Y+5	; 0x05
    6666:	9e 81       	ldd	r25, Y+6	; 0x06
    6668:	9a 83       	std	Y+2, r25	; 0x02
    666a:	89 83       	std	Y+1, r24	; 0x01
    666c:	89 81       	ldd	r24, Y+1	; 0x01
    666e:	9a 81       	ldd	r25, Y+2	; 0x02
    6670:	01 97       	sbiw	r24, 0x01	; 1
    6672:	f1 f7       	brne	.-4      	; 0x6670 <LCD_EnablePulse+0xfa>
    6674:	9a 83       	std	Y+2, r25	; 0x02
    6676:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    6678:	2e 96       	adiw	r28, 0x0e	; 14
    667a:	0f b6       	in	r0, 0x3f	; 63
    667c:	f8 94       	cli
    667e:	de bf       	out	0x3e, r29	; 62
    6680:	0f be       	out	0x3f, r0	; 63
    6682:	cd bf       	out	0x3d, r28	; 61
    6684:	cf 91       	pop	r28
    6686:	df 91       	pop	r29
    6688:	08 95       	ret

0000668a <LCD_DisablePulse>:

void LCD_DisablePulse(void){
    668a:	df 93       	push	r29
    668c:	cf 93       	push	r28
    668e:	cd b7       	in	r28, 0x3d	; 61
    6690:	de b7       	in	r29, 0x3e	; 62
    6692:	2e 97       	sbiw	r28, 0x0e	; 14
    6694:	0f b6       	in	r0, 0x3f	; 63
    6696:	f8 94       	cli
    6698:	de bf       	out	0x3e, r29	; 62
    669a:	0f be       	out	0x3f, r0	; 63
    669c:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinValue(Control_Port, E ,PIN_LOW);
    669e:	81 e0       	ldi	r24, 0x01	; 1
    66a0:	63 e0       	ldi	r22, 0x03	; 3
    66a2:	40 e0       	ldi	r20, 0x00	; 0
    66a4:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
    66a8:	80 e0       	ldi	r24, 0x00	; 0
    66aa:	90 e0       	ldi	r25, 0x00	; 0
    66ac:	a0 e8       	ldi	r26, 0x80	; 128
    66ae:	bf e3       	ldi	r27, 0x3F	; 63
    66b0:	8b 87       	std	Y+11, r24	; 0x0b
    66b2:	9c 87       	std	Y+12, r25	; 0x0c
    66b4:	ad 87       	std	Y+13, r26	; 0x0d
    66b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    66ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    66bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    66be:	9e 85       	ldd	r25, Y+14	; 0x0e
    66c0:	20 e0       	ldi	r18, 0x00	; 0
    66c2:	30 e0       	ldi	r19, 0x00	; 0
    66c4:	4a e7       	ldi	r20, 0x7A	; 122
    66c6:	55 e4       	ldi	r21, 0x45	; 69
    66c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66cc:	dc 01       	movw	r26, r24
    66ce:	cb 01       	movw	r24, r22
    66d0:	8f 83       	std	Y+7, r24	; 0x07
    66d2:	98 87       	std	Y+8, r25	; 0x08
    66d4:	a9 87       	std	Y+9, r26	; 0x09
    66d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    66d8:	6f 81       	ldd	r22, Y+7	; 0x07
    66da:	78 85       	ldd	r23, Y+8	; 0x08
    66dc:	89 85       	ldd	r24, Y+9	; 0x09
    66de:	9a 85       	ldd	r25, Y+10	; 0x0a
    66e0:	20 e0       	ldi	r18, 0x00	; 0
    66e2:	30 e0       	ldi	r19, 0x00	; 0
    66e4:	40 e8       	ldi	r20, 0x80	; 128
    66e6:	5f e3       	ldi	r21, 0x3F	; 63
    66e8:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    66ec:	88 23       	and	r24, r24
    66ee:	2c f4       	brge	.+10     	; 0x66fa <LCD_DisablePulse+0x70>
		__ticks = 1;
    66f0:	81 e0       	ldi	r24, 0x01	; 1
    66f2:	90 e0       	ldi	r25, 0x00	; 0
    66f4:	9e 83       	std	Y+6, r25	; 0x06
    66f6:	8d 83       	std	Y+5, r24	; 0x05
    66f8:	3f c0       	rjmp	.+126    	; 0x6778 <LCD_DisablePulse+0xee>
	else if (__tmp > 65535)
    66fa:	6f 81       	ldd	r22, Y+7	; 0x07
    66fc:	78 85       	ldd	r23, Y+8	; 0x08
    66fe:	89 85       	ldd	r24, Y+9	; 0x09
    6700:	9a 85       	ldd	r25, Y+10	; 0x0a
    6702:	20 e0       	ldi	r18, 0x00	; 0
    6704:	3f ef       	ldi	r19, 0xFF	; 255
    6706:	4f e7       	ldi	r20, 0x7F	; 127
    6708:	57 e4       	ldi	r21, 0x47	; 71
    670a:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    670e:	18 16       	cp	r1, r24
    6710:	4c f5       	brge	.+82     	; 0x6764 <LCD_DisablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6712:	6b 85       	ldd	r22, Y+11	; 0x0b
    6714:	7c 85       	ldd	r23, Y+12	; 0x0c
    6716:	8d 85       	ldd	r24, Y+13	; 0x0d
    6718:	9e 85       	ldd	r25, Y+14	; 0x0e
    671a:	20 e0       	ldi	r18, 0x00	; 0
    671c:	30 e0       	ldi	r19, 0x00	; 0
    671e:	40 e2       	ldi	r20, 0x20	; 32
    6720:	51 e4       	ldi	r21, 0x41	; 65
    6722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6726:	dc 01       	movw	r26, r24
    6728:	cb 01       	movw	r24, r22
    672a:	bc 01       	movw	r22, r24
    672c:	cd 01       	movw	r24, r26
    672e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6732:	dc 01       	movw	r26, r24
    6734:	cb 01       	movw	r24, r22
    6736:	9e 83       	std	Y+6, r25	; 0x06
    6738:	8d 83       	std	Y+5, r24	; 0x05
    673a:	0f c0       	rjmp	.+30     	; 0x675a <LCD_DisablePulse+0xd0>
    673c:	80 e9       	ldi	r24, 0x90	; 144
    673e:	91 e0       	ldi	r25, 0x01	; 1
    6740:	9c 83       	std	Y+4, r25	; 0x04
    6742:	8b 83       	std	Y+3, r24	; 0x03
    6744:	8b 81       	ldd	r24, Y+3	; 0x03
    6746:	9c 81       	ldd	r25, Y+4	; 0x04
    6748:	01 97       	sbiw	r24, 0x01	; 1
    674a:	f1 f7       	brne	.-4      	; 0x6748 <LCD_DisablePulse+0xbe>
    674c:	9c 83       	std	Y+4, r25	; 0x04
    674e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6750:	8d 81       	ldd	r24, Y+5	; 0x05
    6752:	9e 81       	ldd	r25, Y+6	; 0x06
    6754:	01 97       	sbiw	r24, 0x01	; 1
    6756:	9e 83       	std	Y+6, r25	; 0x06
    6758:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    675a:	8d 81       	ldd	r24, Y+5	; 0x05
    675c:	9e 81       	ldd	r25, Y+6	; 0x06
    675e:	00 97       	sbiw	r24, 0x00	; 0
    6760:	69 f7       	brne	.-38     	; 0x673c <LCD_DisablePulse+0xb2>
    6762:	14 c0       	rjmp	.+40     	; 0x678c <LCD_DisablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6764:	6f 81       	ldd	r22, Y+7	; 0x07
    6766:	78 85       	ldd	r23, Y+8	; 0x08
    6768:	89 85       	ldd	r24, Y+9	; 0x09
    676a:	9a 85       	ldd	r25, Y+10	; 0x0a
    676c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6770:	dc 01       	movw	r26, r24
    6772:	cb 01       	movw	r24, r22
    6774:	9e 83       	std	Y+6, r25	; 0x06
    6776:	8d 83       	std	Y+5, r24	; 0x05
    6778:	8d 81       	ldd	r24, Y+5	; 0x05
    677a:	9e 81       	ldd	r25, Y+6	; 0x06
    677c:	9a 83       	std	Y+2, r25	; 0x02
    677e:	89 83       	std	Y+1, r24	; 0x01
    6780:	89 81       	ldd	r24, Y+1	; 0x01
    6782:	9a 81       	ldd	r25, Y+2	; 0x02
    6784:	01 97       	sbiw	r24, 0x01	; 1
    6786:	f1 f7       	brne	.-4      	; 0x6784 <LCD_DisablePulse+0xfa>
    6788:	9a 83       	std	Y+2, r25	; 0x02
    678a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    678c:	2e 96       	adiw	r28, 0x0e	; 14
    678e:	0f b6       	in	r0, 0x3f	; 63
    6790:	f8 94       	cli
    6792:	de bf       	out	0x3e, r29	; 62
    6794:	0f be       	out	0x3f, r0	; 63
    6796:	cd bf       	out	0x3d, r28	; 61
    6798:	cf 91       	pop	r28
    679a:	df 91       	pop	r29
    679c:	08 95       	ret

0000679e <time_as_text>:
u32_t seconds_counter = 0;
u16_t write_index = 0;

u8_t time[9];

void time_as_text(u8_t* time_buffer, u8_t hour, u8_t minute, u8_t second){
    679e:	df 93       	push	r29
    67a0:	cf 93       	push	r28
    67a2:	00 d0       	rcall	.+0      	; 0x67a4 <time_as_text+0x6>
    67a4:	00 d0       	rcall	.+0      	; 0x67a6 <time_as_text+0x8>
    67a6:	0f 92       	push	r0
    67a8:	cd b7       	in	r28, 0x3d	; 61
    67aa:	de b7       	in	r29, 0x3e	; 62
    67ac:	9a 83       	std	Y+2, r25	; 0x02
    67ae:	89 83       	std	Y+1, r24	; 0x01
    67b0:	6b 83       	std	Y+3, r22	; 0x03
    67b2:	4c 83       	std	Y+4, r20	; 0x04
    67b4:	2d 83       	std	Y+5, r18	; 0x05
	time_buffer[0] = hour/10 + '0';
    67b6:	8b 81       	ldd	r24, Y+3	; 0x03
    67b8:	9a e0       	ldi	r25, 0x0A	; 10
    67ba:	69 2f       	mov	r22, r25
    67bc:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodqi4>
    67c0:	80 5d       	subi	r24, 0xD0	; 208
    67c2:	e9 81       	ldd	r30, Y+1	; 0x01
    67c4:	fa 81       	ldd	r31, Y+2	; 0x02
    67c6:	80 83       	st	Z, r24
	time_buffer[1] = hour%10 + '0';
    67c8:	89 81       	ldd	r24, Y+1	; 0x01
    67ca:	9a 81       	ldd	r25, Y+2	; 0x02
    67cc:	fc 01       	movw	r30, r24
    67ce:	31 96       	adiw	r30, 0x01	; 1
    67d0:	8b 81       	ldd	r24, Y+3	; 0x03
    67d2:	9a e0       	ldi	r25, 0x0A	; 10
    67d4:	69 2f       	mov	r22, r25
    67d6:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodqi4>
    67da:	89 2f       	mov	r24, r25
    67dc:	80 5d       	subi	r24, 0xD0	; 208
    67de:	80 83       	st	Z, r24
	time_buffer[2] = ':';
    67e0:	89 81       	ldd	r24, Y+1	; 0x01
    67e2:	9a 81       	ldd	r25, Y+2	; 0x02
    67e4:	fc 01       	movw	r30, r24
    67e6:	32 96       	adiw	r30, 0x02	; 2
    67e8:	8a e3       	ldi	r24, 0x3A	; 58
    67ea:	80 83       	st	Z, r24
	time_buffer[3] = minute/10 + '0';
    67ec:	89 81       	ldd	r24, Y+1	; 0x01
    67ee:	9a 81       	ldd	r25, Y+2	; 0x02
    67f0:	fc 01       	movw	r30, r24
    67f2:	33 96       	adiw	r30, 0x03	; 3
    67f4:	8c 81       	ldd	r24, Y+4	; 0x04
    67f6:	9a e0       	ldi	r25, 0x0A	; 10
    67f8:	69 2f       	mov	r22, r25
    67fa:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodqi4>
    67fe:	80 5d       	subi	r24, 0xD0	; 208
    6800:	80 83       	st	Z, r24
	time_buffer[4] = minute%10 + '0';
    6802:	89 81       	ldd	r24, Y+1	; 0x01
    6804:	9a 81       	ldd	r25, Y+2	; 0x02
    6806:	fc 01       	movw	r30, r24
    6808:	34 96       	adiw	r30, 0x04	; 4
    680a:	8c 81       	ldd	r24, Y+4	; 0x04
    680c:	9a e0       	ldi	r25, 0x0A	; 10
    680e:	69 2f       	mov	r22, r25
    6810:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodqi4>
    6814:	89 2f       	mov	r24, r25
    6816:	80 5d       	subi	r24, 0xD0	; 208
    6818:	80 83       	st	Z, r24
	time_buffer[5] = ':';
    681a:	89 81       	ldd	r24, Y+1	; 0x01
    681c:	9a 81       	ldd	r25, Y+2	; 0x02
    681e:	fc 01       	movw	r30, r24
    6820:	35 96       	adiw	r30, 0x05	; 5
    6822:	8a e3       	ldi	r24, 0x3A	; 58
    6824:	80 83       	st	Z, r24
	time_buffer[6] = second/10 + '0';
    6826:	89 81       	ldd	r24, Y+1	; 0x01
    6828:	9a 81       	ldd	r25, Y+2	; 0x02
    682a:	fc 01       	movw	r30, r24
    682c:	36 96       	adiw	r30, 0x06	; 6
    682e:	8d 81       	ldd	r24, Y+5	; 0x05
    6830:	9a e0       	ldi	r25, 0x0A	; 10
    6832:	69 2f       	mov	r22, r25
    6834:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodqi4>
    6838:	80 5d       	subi	r24, 0xD0	; 208
    683a:	80 83       	st	Z, r24
	time_buffer[7] = second%10 + '0';
    683c:	89 81       	ldd	r24, Y+1	; 0x01
    683e:	9a 81       	ldd	r25, Y+2	; 0x02
    6840:	fc 01       	movw	r30, r24
    6842:	37 96       	adiw	r30, 0x07	; 7
    6844:	8d 81       	ldd	r24, Y+5	; 0x05
    6846:	9a e0       	ldi	r25, 0x0A	; 10
    6848:	69 2f       	mov	r22, r25
    684a:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodqi4>
    684e:	89 2f       	mov	r24, r25
    6850:	80 5d       	subi	r24, 0xD0	; 208
    6852:	80 83       	st	Z, r24
	time_buffer[8] = '\0';
    6854:	89 81       	ldd	r24, Y+1	; 0x01
    6856:	9a 81       	ldd	r25, Y+2	; 0x02
    6858:	fc 01       	movw	r30, r24
    685a:	38 96       	adiw	r30, 0x08	; 8
    685c:	10 82       	st	Z, r1
}
    685e:	0f 90       	pop	r0
    6860:	0f 90       	pop	r0
    6862:	0f 90       	pop	r0
    6864:	0f 90       	pop	r0
    6866:	0f 90       	pop	r0
    6868:	cf 91       	pop	r28
    686a:	df 91       	pop	r29
    686c:	08 95       	ret

0000686e <TIME>:

void TIME(void) {
    686e:	df 93       	push	r29
    6870:	cf 93       	push	r28
    6872:	cd b7       	in	r28, 0x3d	; 61
    6874:	de b7       	in	r29, 0x3e	; 62
	EEPROM_Enable();
    6876:	0e 94 21 17 	call	0x2e42	; 0x2e42 <EEPROM_Enable>
	seconds_counter++;						// Increment the counter
    687a:	80 91 a1 01 	lds	r24, 0x01A1
    687e:	90 91 a2 01 	lds	r25, 0x01A2
    6882:	a0 91 a3 01 	lds	r26, 0x01A3
    6886:	b0 91 a4 01 	lds	r27, 0x01A4
    688a:	01 96       	adiw	r24, 0x01	; 1
    688c:	a1 1d       	adc	r26, r1
    688e:	b1 1d       	adc	r27, r1
    6890:	80 93 a1 01 	sts	0x01A1, r24
    6894:	90 93 a2 01 	sts	0x01A2, r25
    6898:	a0 93 a3 01 	sts	0x01A3, r26
    689c:	b0 93 a4 01 	sts	0x01A4, r27
	hour = seconds_counter / 3600;			// Calculate hours
    68a0:	80 91 a1 01 	lds	r24, 0x01A1
    68a4:	90 91 a2 01 	lds	r25, 0x01A2
    68a8:	a0 91 a3 01 	lds	r26, 0x01A3
    68ac:	b0 91 a4 01 	lds	r27, 0x01A4
    68b0:	20 e1       	ldi	r18, 0x10	; 16
    68b2:	3e e0       	ldi	r19, 0x0E	; 14
    68b4:	40 e0       	ldi	r20, 0x00	; 0
    68b6:	50 e0       	ldi	r21, 0x00	; 0
    68b8:	bc 01       	movw	r22, r24
    68ba:	cd 01       	movw	r24, r26
    68bc:	0e 94 c9 35 	call	0x6b92	; 0x6b92 <__udivmodsi4>
    68c0:	da 01       	movw	r26, r20
    68c2:	c9 01       	movw	r24, r18
    68c4:	80 93 9e 01 	sts	0x019E, r24
	minute = (seconds_counter / 60) % 60;   // Calculate minutes
    68c8:	80 91 a1 01 	lds	r24, 0x01A1
    68cc:	90 91 a2 01 	lds	r25, 0x01A2
    68d0:	a0 91 a3 01 	lds	r26, 0x01A3
    68d4:	b0 91 a4 01 	lds	r27, 0x01A4
    68d8:	2c e3       	ldi	r18, 0x3C	; 60
    68da:	30 e0       	ldi	r19, 0x00	; 0
    68dc:	40 e0       	ldi	r20, 0x00	; 0
    68de:	50 e0       	ldi	r21, 0x00	; 0
    68e0:	bc 01       	movw	r22, r24
    68e2:	cd 01       	movw	r24, r26
    68e4:	0e 94 c9 35 	call	0x6b92	; 0x6b92 <__udivmodsi4>
    68e8:	da 01       	movw	r26, r20
    68ea:	c9 01       	movw	r24, r18
    68ec:	2c e3       	ldi	r18, 0x3C	; 60
    68ee:	30 e0       	ldi	r19, 0x00	; 0
    68f0:	40 e0       	ldi	r20, 0x00	; 0
    68f2:	50 e0       	ldi	r21, 0x00	; 0
    68f4:	bc 01       	movw	r22, r24
    68f6:	cd 01       	movw	r24, r26
    68f8:	0e 94 c9 35 	call	0x6b92	; 0x6b92 <__udivmodsi4>
    68fc:	dc 01       	movw	r26, r24
    68fe:	cb 01       	movw	r24, r22
    6900:	80 93 9f 01 	sts	0x019F, r24
	second = seconds_counter % 60;          // Calculate seconds
    6904:	80 91 a1 01 	lds	r24, 0x01A1
    6908:	90 91 a2 01 	lds	r25, 0x01A2
    690c:	a0 91 a3 01 	lds	r26, 0x01A3
    6910:	b0 91 a4 01 	lds	r27, 0x01A4
    6914:	2c e3       	ldi	r18, 0x3C	; 60
    6916:	30 e0       	ldi	r19, 0x00	; 0
    6918:	40 e0       	ldi	r20, 0x00	; 0
    691a:	50 e0       	ldi	r21, 0x00	; 0
    691c:	bc 01       	movw	r22, r24
    691e:	cd 01       	movw	r24, r26
    6920:	0e 94 c9 35 	call	0x6b92	; 0x6b92 <__udivmodsi4>
    6924:	dc 01       	movw	r26, r24
    6926:	cb 01       	movw	r24, r22
    6928:	80 93 a0 01 	sts	0x01A0, r24
	TIMER_Timer1_OCR1A_Set(15625);
    692c:	89 e0       	ldi	r24, 0x09	; 9
    692e:	9d e3       	ldi	r25, 0x3D	; 61
    6930:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <TIMER_Timer1_OCR1A_Set>
}
    6934:	cf 91       	pop	r28
    6936:	df 91       	pop	r29
    6938:	08 95       	ret

0000693a <main>:


int main(){
    693a:	df 93       	push	r29
    693c:	cf 93       	push	r28
    693e:	cd b7       	in	r28, 0x3d	; 61
    6940:	de b7       	in	r29, 0x3e	; 62
    6942:	2a 97       	sbiw	r28, 0x0a	; 10
    6944:	0f b6       	in	r0, 0x3f	; 63
    6946:	f8 94       	cli
    6948:	de bf       	out	0x3e, r29	; 62
    694a:	0f be       	out	0x3f, r0	; 63
    694c:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinDirection(PIR1_PORT, PIR1_PIN, PIN_INPUT);
    694e:	83 e0       	ldi	r24, 0x03	; 3
    6950:	60 e0       	ldi	r22, 0x00	; 0
    6952:	40 e0       	ldi	r20, 0x00	; 0
    6954:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIR2_PORT, PIR2_PIN, PIN_INPUT);
    6958:	83 e0       	ldi	r24, 0x03	; 3
    695a:	63 e0       	ldi	r22, 0x03	; 3
    695c:	40 e0       	ldi	r20, 0x00	; 0
    695e:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
	INTERRUPT_EnableGlobalInterrupt();
    6962:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <INTERRUPT_EnableGlobalInterrupt>
	TIMER_Timer1_OCA_SetCallBack(TIME);		// Call function TIME in compare match
    6966:	87 e3       	ldi	r24, 0x37	; 55
    6968:	94 e3       	ldi	r25, 0x34	; 52
    696a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <TIMER_Timer1_OCA_SetCallBack>
	EEPROM_Enable();
    696e:	0e 94 21 17 	call	0x2e42	; 0x2e42 <EEPROM_Enable>
	LCD_Init(_4bits);
    6972:	80 e0       	ldi	r24, 0x00	; 0
    6974:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <LCD_Init>
	TIMER_Timer1_OCR1A_Set(15625);			// Set compare match to be 1s
    6978:	89 e0       	ldi	r24, 0x09	; 9
    697a:	9d e3       	ldi	r25, 0x3D	; 61
    697c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <TIMER_Timer1_OCR1A_Set>
	TIMER_Timer1_Init(TIMER1_CTC_OCR1, TIMER1_PRESCALER_1024);
    6980:	84 e0       	ldi	r24, 0x04	; 4
    6982:	65 e0       	ldi	r22, 0x05	; 5
    6984:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <TIMER_Timer1_Init>
	TIMER_Timer1_OCA_EnableInterrupt();
    6988:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <TIMER_Timer1_OCA_EnableInterrupt>


	DIO_SetPinDirection(PORT_B, PIN_0, PIN_INPUT);		// Push Button
    698c:	81 e0       	ldi	r24, 0x01	; 1
    698e:	60 e0       	ldi	r22, 0x00	; 0
    6990:	40 e0       	ldi	r20, 0x00	; 0
    6992:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_D, PIN_6, PIN_INPUT);		// Push Button
    6996:	83 e0       	ldi	r24, 0x03	; 3
    6998:	66 e0       	ldi	r22, 0x06	; 6
    699a:	40 e0       	ldi	r20, 0x00	; 0
    699c:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_D, PIN_2, PIN_INPUT);		// Push Button
    69a0:	83 e0       	ldi	r24, 0x03	; 3
    69a2:	62 e0       	ldi	r22, 0x02	; 2
    69a4:	40 e0       	ldi	r20, 0x00	; 0
    69a6:	0e 94 94 19 	call	0x3328	; 0x3328 <DIO_SetPinDirection>

	while(1){
		/* If no motion for both sensors */
		if ((DIO_GetPinValue(PIR1_PORT, PIR1_PIN) == PIN_LOW) && (DIO_GetPinValue(PIR2_PORT, PIR2_PIN) == PIN_LOW)){
    69aa:	83 e0       	ldi	r24, 0x03	; 3
    69ac:	60 e0       	ldi	r22, 0x00	; 0
    69ae:	0e 94 19 1c 	call	0x3832	; 0x3832 <DIO_GetPinValue>
    69b2:	88 23       	and	r24, r24
    69b4:	91 f4       	brne	.+36     	; 0x69da <main+0xa0>
    69b6:	83 e0       	ldi	r24, 0x03	; 3
    69b8:	63 e0       	ldi	r22, 0x03	; 3
    69ba:	0e 94 19 1c 	call	0x3832	; 0x3832 <DIO_GetPinValue>
    69be:	88 23       	and	r24, r24
    69c0:	61 f4       	brne	.+24     	; 0x69da <main+0xa0>
			if (motion_state == MOTION){
    69c2:	80 91 9c 01 	lds	r24, 0x019C
    69c6:	81 30       	cpi	r24, 0x01	; 1
    69c8:	e1 f5       	brne	.+120    	; 0x6a42 <main+0x108>
				DIO_SetPinValue(LED_PORT, LED_PIN, PIN_LOW);			// Turn off the LED
    69ca:	83 e0       	ldi	r24, 0x03	; 3
    69cc:	61 e0       	ldi	r22, 0x01	; 1
    69ce:	40 e0       	ldi	r20, 0x00	; 0
    69d0:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
				motion_state = NO_MOTION;
    69d4:	10 92 9c 01 	sts	0x019C, r1
    69d8:	34 c0       	rjmp	.+104    	; 0x6a42 <main+0x108>
			}
		}
		/* If there is a motion */
		else{
			if (motion_state == NO_MOTION){
    69da:	80 91 9c 01 	lds	r24, 0x019C
    69de:	88 23       	and	r24, r24
    69e0:	81 f5       	brne	.+96     	; 0x6a42 <main+0x108>
				DIO_SetPinValue(LED_PORT, LED_PIN, PIN_HIGH);			// Turn on the LED
    69e2:	83 e0       	ldi	r24, 0x03	; 3
    69e4:	61 e0       	ldi	r22, 0x01	; 1
    69e6:	41 e0       	ldi	r20, 0x01	; 1
    69e8:	0e 94 9c 1a 	call	0x3538	; 0x3538 <DIO_SetPinValue>
				LCD_Clear();
    69ec:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <LCD_Clear>
				motion_state = MOTION;
    69f0:	81 e0       	ldi	r24, 0x01	; 1
    69f2:	80 93 9c 01 	sts	0x019C, r24
				number_of_violations++;									// Increment number of violation
    69f6:	80 91 9d 01 	lds	r24, 0x019D
    69fa:	8f 5f       	subi	r24, 0xFF	; 255
    69fc:	80 93 9d 01 	sts	0x019D, r24
				time_as_text(time, hour, minute, second);				// Convert timestamp to text format
    6a00:	20 91 9e 01 	lds	r18, 0x019E
    6a04:	30 91 9f 01 	lds	r19, 0x019F
    6a08:	50 91 a0 01 	lds	r21, 0x01A0
    6a0c:	8e ea       	ldi	r24, 0xAE	; 174
    6a0e:	95 e0       	ldi	r25, 0x05	; 5
    6a10:	62 2f       	mov	r22, r18
    6a12:	43 2f       	mov	r20, r19
    6a14:	25 2f       	mov	r18, r21
    6a16:	0e 94 cf 33 	call	0x679e	; 0x679e <time_as_text>
				EEPROM_WriteArray(write_index, (u8_t*) time, 8);		// Store the timestamp at EEPROM
    6a1a:	80 91 a5 01 	lds	r24, 0x01A5
    6a1e:	90 91 a6 01 	lds	r25, 0x01A6
    6a22:	2e ea       	ldi	r18, 0xAE	; 174
    6a24:	35 e0       	ldi	r19, 0x05	; 5
    6a26:	b9 01       	movw	r22, r18
    6a28:	48 e0       	ldi	r20, 0x08	; 8
    6a2a:	50 e0       	ldi	r21, 0x00	; 0
    6a2c:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <EEPROM_WriteArray>
				write_index += 8;										// Increse write index for the next 8 characters (HH:MM:SS)
    6a30:	80 91 a5 01 	lds	r24, 0x01A5
    6a34:	90 91 a6 01 	lds	r25, 0x01A6
    6a38:	08 96       	adiw	r24, 0x08	; 8
    6a3a:	90 93 a6 01 	sts	0x01A6, r25
    6a3e:	80 93 a5 01 	sts	0x01A5, r24
			}
		}

		/* If Push Button B0 is pressed */
		if ((DIO_GetPinValue(PORT_B, PIN_0) == PIN_HIGH)){
    6a42:	81 e0       	ldi	r24, 0x01	; 1
    6a44:	60 e0       	ldi	r22, 0x00	; 0
    6a46:	0e 94 19 1c 	call	0x3832	; 0x3832 <DIO_GetPinValue>
    6a4a:	81 30       	cpi	r24, 0x01	; 1
    6a4c:	91 f5       	brne	.+100    	; 0x6ab2 <main+0x178>
			DELAY_Timer2_ms(50);
    6a4e:	60 e0       	ldi	r22, 0x00	; 0
    6a50:	70 e0       	ldi	r23, 0x00	; 0
    6a52:	88 e4       	ldi	r24, 0x48	; 72
    6a54:	92 e4       	ldi	r25, 0x42	; 66
    6a56:	0e 94 bd 21 	call	0x437a	; 0x437a <DELAY_Timer2_ms>
    6a5a:	1c c0       	rjmp	.+56     	; 0x6a94 <main+0x15a>
			while((DIO_GetPinValue(PORT_B, PIN_0) == PIN_HIGH)){
				LCD_GoToPosition(UPPER_ROW, 0);
    6a5c:	80 e0       	ldi	r24, 0x00	; 0
    6a5e:	60 e0       	ldi	r22, 0x00	; 0
    6a60:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <LCD_GoToPosition>
				LCD_SendString("No of Violations");
    6a64:	85 e6       	ldi	r24, 0x65	; 101
    6a66:	90 e0       	ldi	r25, 0x00	; 0
    6a68:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <LCD_SendString>
				LCD_GoToPosition(LOWER_ROW, 13);
    6a6c:	81 e0       	ldi	r24, 0x01	; 1
    6a6e:	6d e0       	ldi	r22, 0x0D	; 13
    6a70:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <LCD_GoToPosition>
				LCD_SendNumber(number_of_violations);
    6a74:	80 91 9d 01 	lds	r24, 0x019D
    6a78:	88 2f       	mov	r24, r24
    6a7a:	90 e0       	ldi	r25, 0x00	; 0
    6a7c:	a0 e0       	ldi	r26, 0x00	; 0
    6a7e:	b0 e0       	ldi	r27, 0x00	; 0
    6a80:	bc 01       	movw	r22, r24
    6a82:	cd 01       	movw	r24, r26
    6a84:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    6a88:	dc 01       	movw	r26, r24
    6a8a:	cb 01       	movw	r24, r22
    6a8c:	bc 01       	movw	r22, r24
    6a8e:	cd 01       	movw	r24, r26
    6a90:	0e 94 06 2b 	call	0x560c	; 0x560c <LCD_SendNumber>
		}

		/* If Push Button B0 is pressed */
		if ((DIO_GetPinValue(PORT_B, PIN_0) == PIN_HIGH)){
			DELAY_Timer2_ms(50);
			while((DIO_GetPinValue(PORT_B, PIN_0) == PIN_HIGH)){
    6a94:	81 e0       	ldi	r24, 0x01	; 1
    6a96:	60 e0       	ldi	r22, 0x00	; 0
    6a98:	0e 94 19 1c 	call	0x3832	; 0x3832 <DIO_GetPinValue>
    6a9c:	81 30       	cpi	r24, 0x01	; 1
    6a9e:	f1 f2       	breq	.-68     	; 0x6a5c <main+0x122>
				LCD_GoToPosition(UPPER_ROW, 0);
				LCD_SendString("No of Violations");
				LCD_GoToPosition(LOWER_ROW, 13);
				LCD_SendNumber(number_of_violations);
			}
			DELAY_Timer2_ms(50);
    6aa0:	60 e0       	ldi	r22, 0x00	; 0
    6aa2:	70 e0       	ldi	r23, 0x00	; 0
    6aa4:	88 e4       	ldi	r24, 0x48	; 72
    6aa6:	92 e4       	ldi	r25, 0x42	; 66
    6aa8:	0e 94 bd 21 	call	0x437a	; 0x437a <DELAY_Timer2_ms>
			LCD_Clear();
    6aac:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <LCD_Clear>
    6ab0:	7c cf       	rjmp	.-264    	; 0x69aa <main+0x70>
		}

		/* If Push Button D6 is pressed */
		else if ((DIO_GetPinValue(PORT_D, PIN_6) == PIN_HIGH)){
    6ab2:	83 e0       	ldi	r24, 0x03	; 3
    6ab4:	66 e0       	ldi	r22, 0x06	; 6
    6ab6:	0e 94 19 1c 	call	0x3832	; 0x3832 <DIO_GetPinValue>
    6aba:	81 30       	cpi	r24, 0x01	; 1
    6abc:	09 f0       	breq	.+2      	; 0x6ac0 <main+0x186>
    6abe:	45 c0       	rjmp	.+138    	; 0x6b4a <main+0x210>
			DELAY_Timer2_ms(50);
    6ac0:	60 e0       	ldi	r22, 0x00	; 0
    6ac2:	70 e0       	ldi	r23, 0x00	; 0
    6ac4:	88 e4       	ldi	r24, 0x48	; 72
    6ac6:	92 e4       	ldi	r25, 0x42	; 66
    6ac8:	0e 94 bd 21 	call	0x437a	; 0x437a <DELAY_Timer2_ms>
    6acc:	37 c0       	rjmp	.+110    	; 0x6b3c <main+0x202>
			while ((DIO_GetPinValue(PORT_D, PIN_6) == PIN_HIGH)){
				for(u8_t i = 0; i < number_of_violations; i++){
    6ace:	19 82       	std	Y+1, r1	; 0x01
    6ad0:	2e c0       	rjmp	.+92     	; 0x6b2e <main+0x1f4>
					u8_t arr[9];
					EEPROM_ReadArray(i*8, arr, 8);
    6ad2:	89 81       	ldd	r24, Y+1	; 0x01
    6ad4:	88 2f       	mov	r24, r24
    6ad6:	90 e0       	ldi	r25, 0x00	; 0
    6ad8:	88 0f       	add	r24, r24
    6ada:	99 1f       	adc	r25, r25
    6adc:	88 0f       	add	r24, r24
    6ade:	99 1f       	adc	r25, r25
    6ae0:	88 0f       	add	r24, r24
    6ae2:	99 1f       	adc	r25, r25
    6ae4:	9e 01       	movw	r18, r28
    6ae6:	2e 5f       	subi	r18, 0xFE	; 254
    6ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    6aea:	b9 01       	movw	r22, r18
    6aec:	48 e0       	ldi	r20, 0x08	; 8
    6aee:	50 e0       	ldi	r21, 0x00	; 0
    6af0:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <EEPROM_ReadArray>
					if (i % 2 == 0){
    6af4:	89 81       	ldd	r24, Y+1	; 0x01
    6af6:	88 2f       	mov	r24, r24
    6af8:	90 e0       	ldi	r25, 0x00	; 0
    6afa:	81 70       	andi	r24, 0x01	; 1
    6afc:	90 70       	andi	r25, 0x00	; 0
    6afe:	00 97       	sbiw	r24, 0x00	; 0
    6b00:	29 f4       	brne	.+10     	; 0x6b0c <main+0x1d2>
						LCD_GoToPosition(UPPER_ROW, 0);
    6b02:	80 e0       	ldi	r24, 0x00	; 0
    6b04:	60 e0       	ldi	r22, 0x00	; 0
    6b06:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <LCD_GoToPosition>
    6b0a:	04 c0       	rjmp	.+8      	; 0x6b14 <main+0x1da>
					}
					else{
						LCD_GoToPosition(LOWER_ROW, 0);
    6b0c:	81 e0       	ldi	r24, 0x01	; 1
    6b0e:	60 e0       	ldi	r22, 0x00	; 0
    6b10:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <LCD_GoToPosition>
					}
					LCD_SendString(arr);								// Print the timestamps
    6b14:	ce 01       	movw	r24, r28
    6b16:	02 96       	adiw	r24, 0x02	; 2
    6b18:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <LCD_SendString>
					DELAY_Timer2_s(1);
    6b1c:	60 e0       	ldi	r22, 0x00	; 0
    6b1e:	70 e0       	ldi	r23, 0x00	; 0
    6b20:	80 e8       	ldi	r24, 0x80	; 128
    6b22:	9f e3       	ldi	r25, 0x3F	; 63
    6b24:	0e 94 3c 23 	call	0x4678	; 0x4678 <DELAY_Timer2_s>

		/* If Push Button D6 is pressed */
		else if ((DIO_GetPinValue(PORT_D, PIN_6) == PIN_HIGH)){
			DELAY_Timer2_ms(50);
			while ((DIO_GetPinValue(PORT_D, PIN_6) == PIN_HIGH)){
				for(u8_t i = 0; i < number_of_violations; i++){
    6b28:	89 81       	ldd	r24, Y+1	; 0x01
    6b2a:	8f 5f       	subi	r24, 0xFF	; 255
    6b2c:	89 83       	std	Y+1, r24	; 0x01
    6b2e:	90 91 9d 01 	lds	r25, 0x019D
    6b32:	89 81       	ldd	r24, Y+1	; 0x01
    6b34:	89 17       	cp	r24, r25
    6b36:	68 f2       	brcs	.-102    	; 0x6ad2 <main+0x198>
						LCD_GoToPosition(LOWER_ROW, 0);
					}
					LCD_SendString(arr);								// Print the timestamps
					DELAY_Timer2_s(1);
				}
				LCD_Clear();
    6b38:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <LCD_Clear>
		}

		/* If Push Button D6 is pressed */
		else if ((DIO_GetPinValue(PORT_D, PIN_6) == PIN_HIGH)){
			DELAY_Timer2_ms(50);
			while ((DIO_GetPinValue(PORT_D, PIN_6) == PIN_HIGH)){
    6b3c:	83 e0       	ldi	r24, 0x03	; 3
    6b3e:	66 e0       	ldi	r22, 0x06	; 6
    6b40:	0e 94 19 1c 	call	0x3832	; 0x3832 <DIO_GetPinValue>
    6b44:	81 30       	cpi	r24, 0x01	; 1
    6b46:	19 f2       	breq	.-122    	; 0x6ace <main+0x194>
    6b48:	30 cf       	rjmp	.-416    	; 0x69aa <main+0x70>
				LCD_Clear();
			}
		}

		/* If Push Button D2 is pressed */
		else if ((DIO_GetPinValue(PORT_D, PIN_2) == PIN_HIGH)){
    6b4a:	83 e0       	ldi	r24, 0x03	; 3
    6b4c:	62 e0       	ldi	r22, 0x02	; 2
    6b4e:	0e 94 19 1c 	call	0x3832	; 0x3832 <DIO_GetPinValue>
    6b52:	81 30       	cpi	r24, 0x01	; 1
    6b54:	09 f0       	breq	.+2      	; 0x6b58 <main+0x21e>
    6b56:	29 cf       	rjmp	.-430    	; 0x69aa <main+0x70>
			SERVO_90_CW();												// Rotate Servo 90 degrees CW
    6b58:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <SERVO_90_CW>
			TIMER_Timer1_OCA_SetCallBack(TIME);		// Call function TIME in compare match
    6b5c:	87 e3       	ldi	r24, 0x37	; 55
    6b5e:	94 e3       	ldi	r25, 0x34	; 52
    6b60:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <TIMER_Timer1_OCA_SetCallBack>
			TIMER_Timer1_OCA_EnableInterrupt();
    6b64:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <TIMER_Timer1_OCA_EnableInterrupt>
			TIMER_Timer1_Init(TIMER1_CTC_OCR1, TIMER1_PRESCALER_1024);
    6b68:	84 e0       	ldi	r24, 0x04	; 4
    6b6a:	65 e0       	ldi	r22, 0x05	; 5
    6b6c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <TIMER_Timer1_Init>
			LCD_GoToPosition(UPPER_ROW, 0);
    6b70:	80 e0       	ldi	r24, 0x00	; 0
    6b72:	60 e0       	ldi	r22, 0x00	; 0
    6b74:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <LCD_GoToPosition>
    6b78:	18 cf       	rjmp	.-464    	; 0x69aa <main+0x70>

00006b7a <__udivmodqi4>:
    6b7a:	99 1b       	sub	r25, r25
    6b7c:	79 e0       	ldi	r23, 0x09	; 9
    6b7e:	04 c0       	rjmp	.+8      	; 0x6b88 <__udivmodqi4_ep>

00006b80 <__udivmodqi4_loop>:
    6b80:	99 1f       	adc	r25, r25
    6b82:	96 17       	cp	r25, r22
    6b84:	08 f0       	brcs	.+2      	; 0x6b88 <__udivmodqi4_ep>
    6b86:	96 1b       	sub	r25, r22

00006b88 <__udivmodqi4_ep>:
    6b88:	88 1f       	adc	r24, r24
    6b8a:	7a 95       	dec	r23
    6b8c:	c9 f7       	brne	.-14     	; 0x6b80 <__udivmodqi4_loop>
    6b8e:	80 95       	com	r24
    6b90:	08 95       	ret

00006b92 <__udivmodsi4>:
    6b92:	a1 e2       	ldi	r26, 0x21	; 33
    6b94:	1a 2e       	mov	r1, r26
    6b96:	aa 1b       	sub	r26, r26
    6b98:	bb 1b       	sub	r27, r27
    6b9a:	fd 01       	movw	r30, r26
    6b9c:	0d c0       	rjmp	.+26     	; 0x6bb8 <__udivmodsi4_ep>

00006b9e <__udivmodsi4_loop>:
    6b9e:	aa 1f       	adc	r26, r26
    6ba0:	bb 1f       	adc	r27, r27
    6ba2:	ee 1f       	adc	r30, r30
    6ba4:	ff 1f       	adc	r31, r31
    6ba6:	a2 17       	cp	r26, r18
    6ba8:	b3 07       	cpc	r27, r19
    6baa:	e4 07       	cpc	r30, r20
    6bac:	f5 07       	cpc	r31, r21
    6bae:	20 f0       	brcs	.+8      	; 0x6bb8 <__udivmodsi4_ep>
    6bb0:	a2 1b       	sub	r26, r18
    6bb2:	b3 0b       	sbc	r27, r19
    6bb4:	e4 0b       	sbc	r30, r20
    6bb6:	f5 0b       	sbc	r31, r21

00006bb8 <__udivmodsi4_ep>:
    6bb8:	66 1f       	adc	r22, r22
    6bba:	77 1f       	adc	r23, r23
    6bbc:	88 1f       	adc	r24, r24
    6bbe:	99 1f       	adc	r25, r25
    6bc0:	1a 94       	dec	r1
    6bc2:	69 f7       	brne	.-38     	; 0x6b9e <__udivmodsi4_loop>
    6bc4:	60 95       	com	r22
    6bc6:	70 95       	com	r23
    6bc8:	80 95       	com	r24
    6bca:	90 95       	com	r25
    6bcc:	9b 01       	movw	r18, r22
    6bce:	ac 01       	movw	r20, r24
    6bd0:	bd 01       	movw	r22, r26
    6bd2:	cf 01       	movw	r24, r30
    6bd4:	08 95       	ret

00006bd6 <__prologue_saves__>:
    6bd6:	2f 92       	push	r2
    6bd8:	3f 92       	push	r3
    6bda:	4f 92       	push	r4
    6bdc:	5f 92       	push	r5
    6bde:	6f 92       	push	r6
    6be0:	7f 92       	push	r7
    6be2:	8f 92       	push	r8
    6be4:	9f 92       	push	r9
    6be6:	af 92       	push	r10
    6be8:	bf 92       	push	r11
    6bea:	cf 92       	push	r12
    6bec:	df 92       	push	r13
    6bee:	ef 92       	push	r14
    6bf0:	ff 92       	push	r15
    6bf2:	0f 93       	push	r16
    6bf4:	1f 93       	push	r17
    6bf6:	cf 93       	push	r28
    6bf8:	df 93       	push	r29
    6bfa:	cd b7       	in	r28, 0x3d	; 61
    6bfc:	de b7       	in	r29, 0x3e	; 62
    6bfe:	ca 1b       	sub	r28, r26
    6c00:	db 0b       	sbc	r29, r27
    6c02:	0f b6       	in	r0, 0x3f	; 63
    6c04:	f8 94       	cli
    6c06:	de bf       	out	0x3e, r29	; 62
    6c08:	0f be       	out	0x3f, r0	; 63
    6c0a:	cd bf       	out	0x3d, r28	; 61
    6c0c:	09 94       	ijmp

00006c0e <__epilogue_restores__>:
    6c0e:	2a 88       	ldd	r2, Y+18	; 0x12
    6c10:	39 88       	ldd	r3, Y+17	; 0x11
    6c12:	48 88       	ldd	r4, Y+16	; 0x10
    6c14:	5f 84       	ldd	r5, Y+15	; 0x0f
    6c16:	6e 84       	ldd	r6, Y+14	; 0x0e
    6c18:	7d 84       	ldd	r7, Y+13	; 0x0d
    6c1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    6c1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    6c1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    6c20:	b9 84       	ldd	r11, Y+9	; 0x09
    6c22:	c8 84       	ldd	r12, Y+8	; 0x08
    6c24:	df 80       	ldd	r13, Y+7	; 0x07
    6c26:	ee 80       	ldd	r14, Y+6	; 0x06
    6c28:	fd 80       	ldd	r15, Y+5	; 0x05
    6c2a:	0c 81       	ldd	r16, Y+4	; 0x04
    6c2c:	1b 81       	ldd	r17, Y+3	; 0x03
    6c2e:	aa 81       	ldd	r26, Y+2	; 0x02
    6c30:	b9 81       	ldd	r27, Y+1	; 0x01
    6c32:	ce 0f       	add	r28, r30
    6c34:	d1 1d       	adc	r29, r1
    6c36:	0f b6       	in	r0, 0x3f	; 63
    6c38:	f8 94       	cli
    6c3a:	de bf       	out	0x3e, r29	; 62
    6c3c:	0f be       	out	0x3f, r0	; 63
    6c3e:	cd bf       	out	0x3d, r28	; 61
    6c40:	ed 01       	movw	r28, r26
    6c42:	08 95       	ret

00006c44 <_exit>:
    6c44:	f8 94       	cli

00006c46 <__stop_program>:
    6c46:	ff cf       	rjmp	.-2      	; 0x6c46 <__stop_program>
